Directory structure:
└── Ai-Tutor/
    ├── db.sqlite3
    ├── manage.py
    ├── requirements.txt
    ├── test.py
    ├── core/
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── api.py
    │   ├── apps.py
    │   ├── firebase_auth.py
    │   ├── managers.py
    │   ├── models.py
    │   ├── pdf_processor.py
    │   ├── serializers.py
    │   ├── tests.py
    │   ├── utils.py
    │   ├── www.youtube.com_cookies.txt
    │   ├── yt_processor.py
    │   └── migrations/
    │       ├── 0001_initial.py
    │       ├── 0002_alter_user_options_userpdf_pdfconversation.py
    │       ├── 0003_useryoutubevideo_youtubeconversation.py
    │       ├── 0004_chaptergeneration_chapterresource_and_more.py
    │       ├── 0005_userpdf_file.py
    │       ├── 0006_alter_userpdf_file.py
    │       └── __init__.py
    ├── decentral_tutor/
    │   ├── __init__.py
    │   ├── asgi.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    ├── frontend/
    │   ├── README.md
    │   ├── eslint.config.js
    │   ├── index.html
    │   ├── package.json
    │   ├── vite.config.js
    │   ├── public/
    │   │   └── _redirects
    │   └── src/
    │       ├── App.jsx
    │       ├── index.css
    │       ├── main.jsx
    │       ├── components/
    │       │   ├── LoadingScreen.jsx
    │       │   ├── Model1history.jsx
    │       │   ├── Model2history.jsx
    │       │   ├── Model2results.jsx
    │       │   ├── MultiMCQForm.jsx
    │       │   ├── QuizLoading.jsx
    │       │   ├── Resources.jsx
    │       │   ├── ResultsView.jsx
    │       │   ├── Scanner.jsx
    │       │   └── ScannerLoading.jsx
    │       ├── contexts/
    │       │   └── QuizContext.jsx
    │       ├── pages/
    │       │   ├── AuthForm.jsx
    │       │   ├── Dashboard.jsx
    │       │   ├── Home.jsx
    │       │   ├── NotFound.jsx
    │       │   └── Quiz.jsx
    │       └── utils/
    │           ├── api.js
    │           ├── contentScan.js
    │           ├── firebase.js
    │           └── getCurrentUserUID.js
    ├── transcripts/
    │   └── multi_mcqs.json
    └── vectorstores/
        ├── book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book/
        │   ├── index.faiss
        │   └── index.pkl
        ├── book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book1/
        │   ├── index.faiss
        │   └── index.pkl
        ├── book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book3/
        │   ├── index.faiss
        │   └── index.pkl
        ├── yt_gvpHdrU1F1ZmUy7y4TqTLHsLVMR2_H0JfZDXStKY/
        │   ├── index.faiss
        │   └── index.pkl
        └── yt_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_H0JfZDXStKY/
            ├── index.faiss
            └── index.pkl

================================================
FILE: db.sqlite3
================================================
[Non-text file]


================================================
FILE: manage.py
================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'decentral_tutor.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



================================================
FILE: requirements.txt
================================================
ï»¿Django==5.2.4
djangorestframework==3.16.0
djangorestframework_simplejwt==5.5.0
django-cors-headers==4.7.0
firebase-admin==6.9.0
youtube_search==2.1.2
youtube_transcript_api==1.1.1
tavily-python==0.5.1
python-dotenv==1.0.1
groq==0.13.1
gunicorn==23.0.0
langchain==0.3.25
langchain-google-genai==2.0.0
langchain-community==0.3.24
faiss-cpu==1.11.0
google-generativeai==0.7.0
google-ai-generativelanguage==0.6.5
whitenoise==6.9.0
pypdf==5.1.0
google-api-python-client==2.163.0
django-cloudinary-storage
cloudinary==1.44.1
beautifulsoup4
isodate==0.7.2


================================================
FILE: test.py
================================================
# test.py

import requests
import json
from pprint import pprint

BASE_URL = "http://localhost:8000"
MULTI_MCQ_API = f"{BASE_URL}/api/generate-multi-mcqs/"

TEST_VIDEO_URLS = [
    "https://youtube.com/watch?v=4dwsSz_fNSQ&pp=ygV8QUkgUm9ib3RpY3MgYW5kIEFJIENvbnRyb2wgU3lzdGVtczogIFBhdGggUGxhbm5pbmcsIFNlbnNvciBGdXNpb24sIFJlaW5mb3JjZW1lbnQgTGVhcm5pbmcgQ29udHJvbCB0dXRvcmlhbCBmb3IgY29sbGVnZSBncmFkZQ%3D%3D"
] * 4  # repeat same video 4 times for test

def test_generate_mcqs_from_multiple_videos():
    headers = {
        "Content-Type": "application/json"
    }

    payload = {
        "video_urls": TEST_VIDEO_URLS
    }

    print("▶ Sending request to generate MCQs from 4 videos...")
    res = requests.post(MULTI_MCQ_API, headers=headers, json=payload)

    print("\n=== Response ===")
    print(f"Status Code: {res.status_code}")
    
    try:
        data = res.json()
        pprint(data)
    except Exception as e:
        print("[ERROR] Failed to parse JSON:")
        print(res.text)
        return

    if res.status_code == 200 and data.get("status"):
        print("\n✅ MCQs generated successfully!")
        print(f"Total Questions: {data.get('total_questions', 0)}")

        for i, q in enumerate(data["questions"], 1):
            print(f"\n{i}. {q['question']}")
            for opt, text in q['options'].items():
                mark = "*" if opt == q['correct_answer'] else ""
                print(f"   {opt}) {text} {mark}")
            print(f"   Watch at: {q['youtube_url']}")
            print(f"   Explanation: {q['explanation']}")
    else:
        print("\n❌ Failed to generate MCQs.")
        if "questions" in data and not data["questions"]:
            print("[INFO] Empty MCQ list returned.")
        elif "error" in data:
            print("[ERROR]", data["error"])
        elif "traceback" in data:
            print("[DEBUG] Traceback Info:")
            print(data["traceback"])
        else:
            print("[DEBUG] Full response:")
            pprint(data)

if __name__ == "__main__":
    test_generate_mcqs_from_multiple_videos()



================================================
FILE: core/__init__.py
================================================



================================================
FILE: core/admin.py
================================================
from django.contrib import admin
from .models import User

admin.site.register(User)


================================================
FILE: core/api.py
================================================
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.parsers import MultiPartParser
from django.contrib.auth import get_user_model
from rest_framework.permissions import AllowAny
from django.middleware.csrf import get_token
from rest_framework.decorators import api_view
from django.http import JsonResponse
from .pdf_processor import PDFProcessor
import os
from django.conf import settings
from .models import UserPDF, PDFConversation, ChapterGeneration
import json
from .firebase_auth import FirebaseAuthentication
from rest_framework.permissions import IsAuthenticated
import traceback
from django.contrib.auth import get_user_model
from .utils import generate_chapter_names  
from .yt_processor import YouTubeProcessor
from .models import UserYouTubeVideo, YouTubeConversation,ChapterResource
from .yt_processor import YouTubeProcessor
from .models import ChapterVideoResource, ChapterWebResource
from .utils import get_video_resources, get_web_resources   
from django.contrib.auth import get_user_model
import cloudinary
import cloudinary.uploader



User = get_user_model()


class FirebaseLoginAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [AllowAny]

    def post(self, request):
        print("\n=== Received Request ===")
        print("Headers:", request.headers)
        print("Data:", request.data)
        print("Method:", request.method)
        
        firebase_uid = request.headers.get('X-Firebase-UID')
        if not firebase_uid:
            print("!! Missing Firebase UID header")
            return JsonResponse(
                {'error': 'Missing Firebase UID in headers'},
                status=status.HTTP_400_BAD_REQUEST
            )

        email = request.data.get('email')
        if not email:
            print("!! Missing email in request data")
            return JsonResponse(
                {'error': 'Email is required'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        # ... rest of your existing code ...
        username = request.data.get('username') or email.split('@')[0]
        

        user, created = User.objects.get_or_create(
            firebase_uid=firebase_uid,
            defaults={'email': email, 'username': username}
        )

        if created:
            return JsonResponse({
                'uid': user.firebase_uid,
                'email': user.email,
                'username': user.username,
                'message': 'User created successfully'
            }, status=status.HTTP_201_CREATED)
        
        return JsonResponse({
            'uid': user.firebase_uid,
            'email': user.email,
            'username': user.username,
            'message': 'User already exists'
        }, status=status.HTTP_200_OK)
    


class DashboardAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]
    def get(self, request):
        return JsonResponse({"message": "Dashboard API"}, status=status.HTTP_200_OK)
    
    


class ChapterAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            topic = request.data.get('topic')
            grade = request.data.get('grade')
            
            # Validate inputs
            if not topic or not grade:
                return JsonResponse({'error': 'Topic and grade are required'}, status=400)
            
            # Generate chapters
            chapters = generate_chapter_names(topic, grade)
            
            # Save generation record
            generation = ChapterGeneration.objects.create(
                user=request.user,
                topic=topic,
                grade=grade
            )
            
            # Save chapters without resources
            for i, chapter_name in enumerate(chapters):
                ChapterResource.objects.create(
                    generation=generation,
                    name=chapter_name,
                    position=i
                )
            
            return JsonResponse({
                'status': True,
                'data': {
                    'generation_id': generation.id,
                    'topic': topic,
                    'grade': grade,
                    'chapters': chapters
                }
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
        
@api_view(['GET'])
def get_csrf_token(request):
    return JsonResponse({'csrfToken': get_token(request)})

# core/api.py

class ChapterGenerationHistoryAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        generations = ChapterGeneration.objects.filter(user=request.user).order_by('-created_at')
        data = [{
            'id': gen.id,
            'topic': gen.topic,
            'grade': gen.grade,
            'created_at': gen.created_at,
            'chapter_count': gen.chapters.count()
        } for gen in generations]
        return JsonResponse({'data': data})
    
    
class DeleteChapterGenerationAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def delete(self, request, generation_id):
        try:
            generation = ChapterGeneration.objects.get(id=generation_id, user=request.user)
            generation.delete()
            return JsonResponse({
                'status': True,
                'message': 'Chapter generation and all related chapters deleted successfully'
            })
        except ChapterGeneration.DoesNotExist:
            return JsonResponse({
                'status': False,
                'error': 'Chapter generation not found'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to delete chapter generation'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class ChapterResourcesAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request, generation_id):
        try:
            generation = ChapterGeneration.objects.get(id=generation_id, user=request.user)
            chapters = generation.chapters.all().order_by('position')
            
            data = []
            for chapter in chapters:
                # Check if chapter already has resources
                has_resources = chapter.videos.exists() or chapter.websites.exists()
                
                if not has_resources:
                    # Generate and save resources if none exist
                    videos = get_video_resources(generation.topic, generation.grade, chapter.name)
                    websites = get_web_resources(generation.topic, generation.grade, chapter.name)
                    
                    # Save videos
                    for video in videos[:4]:  # Limit to 4 videos
                        ChapterVideoResource.objects.create(
                            chapter=chapter,
                            title=video['title'],
                            url=video['url'],
                            channel=video['channel'],
                            duration=video['duration']
                        )
                    
                    # Save websites
                    for website in websites[:4]:  # Limit to 4 websites
                        ChapterWebResource.objects.create(
                            chapter=chapter,
                            title=website['title'],
                            url=website['url'],
                            source=website['source']
                        )
                
                # Get all resources (either existing or newly created)
                chapter_data = {
                    'id': chapter.id,
                    'name': chapter.name,
                    'videos': [{
                        'title': v.title,
                        'url': v.url,
                        'channel': v.channel,
                        'duration': v.duration
                    } for v in chapter.videos.all()],
                    'websites': [{
                        'title': w.title,
                        'url': w.url,
                        'source': w.source
                    } for w in chapter.websites.all()]
                }
                data.append(chapter_data)
            
            return JsonResponse({'data': data})
            
        except ChapterGeneration.DoesNotExist:
            return JsonResponse({'error': 'Not found'}, status=404)


from .utils import get_video_resources

class VideoResourcesAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            # Get topic, grade and chapter from request data
            topic = request.data.get('topic')
            grade = request.data.get('grade')
            chapter = request.data.get('chapter')
            
            # Validate required fields
            if not topic:
                return JsonResponse(
                    {'error': 'Topic is required', 'status': False},
                    status=status.HTTP_400_BAD_REQUEST
                )
            if not grade:
                return JsonResponse(
                    {'error': 'Grade/level is required', 'status': False},
                    status=status.HTTP_400_BAD_REQUEST
                )
            if not chapter:
                return JsonResponse(
                    {'error': 'Chapter name is required', 'status': False},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get video resources (limited to 4 by the utility function)
            videos = get_video_resources(topic, grade, chapter)
            
            # Return success response with videos
            return JsonResponse({
                'status': True,
                'message': 'Video resources fetched successfully',
                'data': {
                    'topic': topic,
                    'grade': grade,
                    'chapter': chapter,
                    'videos': videos
                }
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            # Return error response
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to fetch video resources'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
            
            
from .utils import get_web_resources  # Make sure this is imported at the top

class WebResourcesAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        try:
            # Get topic, grade and chapter from request data
            topic = request.data.get('topic')
            grade = request.data.get('grade')
            chapter = request.data.get('chapter')
            
            # Validate required fields
            if not topic:
                return JsonResponse(
                    {'error': 'Topic is required', 'status': False},
                    status=status.HTTP_400_BAD_REQUEST
                )
            if not grade:
                return JsonResponse(
                    {'error': 'Grade/level is required', 'status': False},
                    status=status.HTTP_400_BAD_REQUEST
                )
            if not chapter:
                return JsonResponse(
                    {'error': 'Chapter name is required', 'status': False},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Get web resources (limited to 4 by the utility function)
            websites = get_web_resources(topic, grade, chapter)
            
            # Return success response with web resources
            return JsonResponse({
                'status': True,
                'message': 'Web resources fetched successfully',
                'data': {
                    'topic': topic,
                    'grade': grade,
                    'chapter': chapter,
                    'websites': websites
                }
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            # Return error response
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to fetch web resources'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

class PDFQAAPI(APIView):
    parser_classes = [MultiPartParser]
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        pdf_file = request.FILES.get('pdf')
        if not pdf_file:
            return JsonResponse(
                {'error': 'No PDF file provided'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # File validation checks
        if not pdf_file.name.lower().endswith('.pdf'):
            return JsonResponse(
                {'error': 'Only PDF files are allowed'},
                status=status.HTTP_400_BAD_REQUEST
            )

        if pdf_file.size == 0:
            return JsonResponse(
                {'error': 'Uploaded file is empty'},
                status=status.HTTP_400_BAD_REQUEST
            )

        MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
        if pdf_file.size > MAX_FILE_SIZE:
            return JsonResponse(
                {'error': 'File size exceeds 10MB limit'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            # Ensure file pointer is at start
            pdf_file.seek(0)
            
            processor = PDFProcessor()
            
            # Process the PDF with user ID for Cloudinary organization
            chunks, cloudinary_url, public_id = processor.process_pdf(
                pdf_file,
                user_id=request.user.firebase_uid
            )
            
            # Create unique store name
            store_name = f"book_{request.user.firebase_uid}_{os.path.splitext(pdf_file.name)[0]}"
            processor.create_vector_store(chunks, store_name)
            
            # Save to database
            user_pdf = UserPDF.objects.create(
                user=request.user,
                file_name=pdf_file.name,
                file=public_id,  # Cloudinary public_id
                vector_store=store_name
            )
            
            return JsonResponse({
                'status': True,
                'message': 'PDF processed successfully',
                'data': {
                    'id': user_pdf.id,
                    'file_name': user_pdf.file_name,
                    'cloudinary_url': cloudinary_url,
                    'upload_time': user_pdf.upload_time,
                    'size': pdf_file.size  # Return file size for reference
                }
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            import traceback
            traceback.print_exc()  # Log the full error for debugging
            
            error_message = str(e)
            if "Cloudinary" in error_message:
                error_message = "Failed to upload PDF to cloud storage"
            elif "PyPDF" in error_message:
                error_message = "Failed to process PDF content"
                
            return JsonResponse({
                'status': False,
                'error': error_message,
                'message': 'Failed to process PDF',
                'debug': str(e) if settings.DEBUG else None
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
                        
class QuestionAnswerAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        print("\n=== DEBUG: QuestionAnswerAPI Request ===")
        print("Headers:", request.headers)
        print("User:", request.user)
        print("Request data:", request.data)
        
        pdf_id = request.data.get('pdf_id')
        question = request.data.get('question')
        
        if not pdf_id or not question:
            print("!! DEBUG: Missing pdf_id or question")
            return JsonResponse(
                {'error': 'Both pdf_id and question are required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            print(f"!! DEBUG: Looking for PDF ID {pdf_id} for user {request.user}")
            user_pdf = UserPDF.objects.get(id=pdf_id, user=request.user)
            print(f"!! DEBUG: Found PDF: {user_pdf.file_name}")
            
            # Verify vector store exists
            vs_path = os.path.join(settings.BASE_DIR, "vectorstores", user_pdf.vector_store)
            print(f"!! DEBUG: Vector store path: {vs_path}")
            
            if not os.path.exists(vs_path):
                print("!! DEBUG: Vector store directory does not exist!")
                return JsonResponse(
                    {'error': 'Vector store not found. Please re-upload the PDF.'},
                    status=status.HTTP_404_NOT_FOUND
                )
            
            processor = PDFProcessor()
            print("!! DEBUG: Loading vector store...")
            vs = processor.load_vector_store(user_pdf.vector_store)
            print("!! DEBUG: Vector store loaded successfully")
            
            print("!! DEBUG: Generating answer...")
            answer = processor.answer_question(vs, question)
            print("!! DEBUG: Answer generated:", answer)
            
            # Save conversation
            PDFConversation.objects.create(
                pdf=user_pdf,
                question=question,
                answer=json.dumps(answer)
            )
            
            return JsonResponse({
                'status': True,
                'data': answer
            })
            
        except UserPDF.DoesNotExist:
            print("!! DEBUG: PDF not found or doesn't belong to user")
            return JsonResponse({
                'status': False,
                'error': 'PDF not found',
                'message': 'You do not have access to this PDF'
            }, status=status.HTTP_404_NOT_FOUND)
            
        except Exception as e:
            print(f"!! DEBUG: Unexpected error: {str(e)}")
            print(traceback.format_exc())
            return JsonResponse({
                'status': False,
                'error': str(e),
                'traceback': traceback.format_exc(),
                'message': 'Failed to answer question'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        

class UserPDFListAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        pdfs = UserPDF.objects.filter(user=request.user).order_by('-upload_time')
        data = [{
            'id': pdf.id,
            'file_name': pdf.file_name,
            'cloudinary_url': pdf.get_file_url(),  # Use the helper method
            'upload_time': pdf.upload_time,
            'conversation_count': pdf.conversations.count()
        } for pdf in pdfs]
        return JsonResponse({'status': True, 'data': data})
    
class PDFConversationHistoryAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request, pdf_id):
        try:
            user_pdf = UserPDF.objects.get(id=pdf_id, user=request.user)
            conversations = user_pdf.conversations.all().order_by('-created_at')[:50]
            data = [{
                'question': conv.question,
                'answer': json.loads(conv.answer),
                'created_at': conv.created_at
            } for conv in conversations]
            return JsonResponse({'status': True, 'data': data})
        except UserPDF.DoesNotExist:
            return JsonResponse({
                'status': False,
                'error': 'PDF not found'
            }, status=status.HTTP_404_NOT_FOUND)
        
class DeletePDFAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def delete(self, request, pdf_id):
        try:
            user_pdf = UserPDF.objects.get(id=pdf_id, user=request.user)

            # Delete from Cloudinary
            if user_pdf.file:  # This is the CloudinaryField
                try:
                    # Get the public_id from the Cloudinary resource
                    public_id = user_pdf.file.public_id
                    # Destroy using the public_id
                    result = cloudinary.uploader.destroy(
                        public_id,
                        resource_type='raw',
                        invalidate=True  # Optional: purge CDN cache
                    )
                    if result.get('result') == 'ok':
                        print(f"Successfully deleted from Cloudinary: {public_id}")
                    else:
                        print(f"Cloudinary deletion failed: {result.get('result')}")
                except Exception as e:
                    print(f"Error deleting from Cloudinary: {str(e)}")
                    # Continue with deletion even if Cloudinary fails

            # Delete vector store
            vectorstore_path = os.path.join(
                settings.BASE_DIR, 
                "vectorstores", 
                user_pdf.vector_store
            )
            if os.path.exists(vectorstore_path):
                import shutil
                shutil.rmtree(vectorstore_path)

            # Delete database record
            user_pdf.delete()

            return JsonResponse({
                'status': True,
                'message': 'PDF and all related data deleted successfully'
            })

        except UserPDF.DoesNotExist:
            return JsonResponse({
                'status': False,
                'error': 'PDF not found'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to delete PDF'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)        



class YouTubeVideoAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]
    
    def post(self, request):
        video_url = request.data.get('video_url')
        if not video_url:
            return JsonResponse(
                {'error': 'YouTube video URL is required'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            processor = YouTubeProcessor()
            
            # Process video
            video_id = processor.extract_video_id(video_url)
            store_name = f"yt_{request.user.firebase_uid}_{video_id}"
            
            # This handles transcript loading and vector store creation
            processing_result = processor.process_video(video_url, store_name)
            
            # Save to database
            user_video = UserYouTubeVideo.objects.create(
                user=request.user,
                video_url=video_url,
                video_id=video_id,
                video_title=processing_result['video_info'].get('title', ''),
                thumbnail_url=processing_result['video_info'].get('thumbnail', ''),
                vector_store=store_name
            )
            
            return JsonResponse({
                'status': True,
                'message': 'YouTube video processed successfully',
                'data': {
                    'id': user_video.id,
                    'video_title': user_video.video_title,
                    'thumbnail_url': user_video.thumbnail_url,
                    'upload_time': user_video.upload_time
                }
            })
            
        except Exception as e:
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to process YouTube video'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class YouTubeQuestionAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def post(self, request):
        video_id = request.data.get('video_id')
        question = request.data.get('question')
        
        if not video_id or not question:
            return JsonResponse(
                {'error': 'Both video_id and question are required'},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            # Verify video belongs to user
            user_video = UserYouTubeVideo.objects.get(id=video_id, user=request.user)
            processor = YouTubeProcessor()
            
            # Load vector store
            vs = processor.load_vector_store(user_video.vector_store)
            
            # Generate answer
            answer = processor.answer_question(vs, question)
            
            # Save conversation
            YouTubeConversation.objects.create(
                video=user_video,
                question=question,
                answer=json.dumps(answer)
            )
            
            return JsonResponse({
                'status': True,
                'data': answer
            })
            
        except UserYouTubeVideo.DoesNotExist:
            return JsonResponse({
                'status': False,
                'error': 'Video not found or access denied'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to answer question'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class YouTubeVideoListAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        videos = UserYouTubeVideo.objects.filter(user=request.user).order_by('-upload_time')
        data = [{
            'id': video.id,
            'video_title': video.video_title,
            'thumbnail_url': video.thumbnail_url,
            'upload_time': video.upload_time,
            'conversation_count': video.conversations.count()
        } for video in videos]
        return JsonResponse({'status': True, 'data': data})

class YouTubeVideoDeleteAPI(APIView):
    authentication_classes = [FirebaseAuthentication]
    permission_classes = [IsAuthenticated]

    def delete(self, request, video_id):
        try:
            user_video = UserYouTubeVideo.objects.get(id=video_id, user=request.user)
            
            # Delete vector store
            vectorstore_path = os.path.join(
                settings.BASE_DIR, 
                "vectorstores", 
                user_video.vector_store
            )
            if os.path.exists(vectorstore_path):
                import shutil
                shutil.rmtree(vectorstore_path)
            
            # Delete database record
            user_video.delete()
            
            return JsonResponse({
                'status': True,
                'message': 'YouTube video and all related data deleted successfully'
            })
            
        except UserYouTubeVideo.DoesNotExist:
            return JsonResponse({
                'status': False,
                'error': 'Video not found'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return JsonResponse({
                'status': False,
                'error': str(e),
                'message': 'Failed to delete video'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
from concurrent.futures import ThreadPoolExecutor
import json

from django.conf import settings
from .utils import (
    get_video_id,
    download_youtube_transcript,
    parse_transcript,
    generate_mcqs_from_transcript
)


class MultiVideoMCQAPI(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        video_urls = request.data.get("video_urls")
        if not video_urls or len(video_urls) != 4:
            return JsonResponse({"error": "Provide exactly 4 video URLs"}, status=400)

        goal_distribution = [2, 3, 2, 3]

        from .utils import get_transcript_chunks_from_youtube

        def process_video(video_url):
            try:
                # Extract URL from dict if needed
                video_url_str = video_url["url"] if isinstance(video_url, dict) else video_url

                transcript_chunks = get_transcript_chunks_from_youtube(video_url_str)
                if not transcript_chunks:
                    return []

                video_id = get_video_id(video_url_str)
                _, mcqs = generate_mcqs_from_transcript(transcript_chunks, video_id)
                return mcqs or []

            except Exception as e:
                print(f"[ERROR] Processing failed for {video_url}: {str(e)}")
                return []



        with ThreadPoolExecutor(max_workers=4) as executor:
            all_mcqs = list(executor.map(process_video, video_urls))

        # Step 1: Try to assign original goal distribution
        combined_questions = []
        leftovers = []

        for mcqs, goal in zip(all_mcqs, goal_distribution):
            if mcqs:
                to_add = mcqs[:goal]
                combined_questions.extend(to_add)
                if len(mcqs) > goal:
                    leftovers.extend(mcqs[goal:])
            else:
                # This video failed or returned empty
                continue

        # Step 2: Fill remaining questions from leftovers if total < 10
        while len(combined_questions) < 10 and leftovers:
            combined_questions.append(leftovers.pop(0))

        # Step 3: If still not enough, just return what we have
        combined_questions = combined_questions[:10]

        # Save to JSON
        save_path = os.path.join(settings.BASE_DIR, "transcripts", "multi_mcqs.json")
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        with open(save_path, "w", encoding="utf-8") as f:
            json.dump(combined_questions, f, indent=4)

        return JsonResponse({
            "status": True,
            "total_questions": len(combined_questions),
            "questions": combined_questions,
            "saved_to": "/transcripts/multi_mcqs.json"
        }, status=200)


================================================
FILE: core/apps.py
================================================
from django.apps import AppConfig

class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'
    verbose_name = 'Core'

    


================================================
FILE: core/firebase_auth.py
================================================
import firebase_admin
from firebase_admin import auth, credentials
from django.contrib.auth import get_user_model
from rest_framework import authentication
from rest_framework.exceptions import AuthenticationFailed
import os

# Initialize Firebase Admin SDK once
if not firebase_admin._apps:
    cred = credentials.Certificate({
        "type": "service_account",
        "project_id": os.getenv("FIREBASE_PROJECT_ID"),
        "private_key_id": os.getenv("FIREBASE_PRIVATE_KEY_ID"),
        "private_key": os.getenv("FIREBASE_PRIVATE_KEY").replace('\\n', '\n'),
        "client_email": os.getenv("FIREBASE_CLIENT_EMAIL"),
        "client_id": os.getenv("FIREBASE_CLIENT_ID"),
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": os.getenv("FIREBASE_CLIENT_CERT_URL")
    })
    firebase_admin.initialize_app(cred)

User = get_user_model()

class FirebaseAuthentication(authentication.BaseAuthentication):
    def authenticate(self, request):
        auth_header = request.META.get("HTTP_AUTHORIZATION", "")
        if not auth_header.startswith("Bearer "):
            return None  # No token provided

        id_token = auth_header.split("Bearer ")[1]

        try:
            decoded_token = auth.verify_id_token(id_token)
            firebase_uid = decoded_token.get("uid")
            email = decoded_token.get("email")
        except Exception as e:
            print(f"Firebase token verification failed: {str(e)}")
            raise AuthenticationFailed("Invalid or expired Firebase ID token")

        if not firebase_uid or not email:
            raise AuthenticationFailed("Missing UID or email in Firebase token")

        try:
            user = User.objects.get(firebase_uid=firebase_uid)
        except User.DoesNotExist:
            try:
                username = email.split("@")[0]
                base_username = username
                counter = 1
                while User.objects.filter(username=username).exists():
                    username = f"{base_username}_{counter}"
                    counter += 1

                user = User.objects.create(
                    firebase_uid=firebase_uid,
                    email=email,
                    username=username
                )
                print(f"Created new user: {user}")
            except Exception as e:
                print(f"User creation failed: {str(e)}")
                raise AuthenticationFailed("User creation failed")

        return (user, None)



================================================
FILE: core/managers.py
================================================



================================================
FILE: core/models.py
================================================
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.utils import timezone
from cloudinary.models import CloudinaryField  # Add this import

class UserManager(BaseUserManager):
    def create_user(self, firebase_uid, email, username, **extra_fields):
        if not firebase_uid:
            raise ValueError('Firebase UID must be set')
        if not email:
            raise ValueError('Email must be set')
        
        email = self.normalize_email(email)
        user = self.model(
            firebase_uid=firebase_uid,
            email=email,
            username=username,
            **extra_fields
        )
        user.save(using=self._db)
        return user

    def create_superuser(self, firebase_uid, email, username, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(firebase_uid, email, username, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    firebase_uid = models.CharField(max_length=128, unique=True, primary_key=True)
    email = models.EmailField(unique=True)
    username = models.CharField(max_length=150)
    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserManager()

    USERNAME_FIELD = 'firebase_uid'
    REQUIRED_FIELDS = ['email', 'username']

    def __str__(self):
        return self.username

    def has_perm(self, perm, obj=None):
        return self.is_staff

    def has_module_perms(self, app_label):
        return self.is_staff
    
    def get_upload_dir(self, filename):
        return f"user_uploads/{self.firebase_uid}/{filename}"
    
    class Meta:
        verbose_name = "User"
        verbose_name_plural = "Users"

class ChapterGeneration(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='chapter_generations')
    topic = models.CharField(max_length=255)
    grade = models.CharField(max_length=50)
    created_at = models.DateTimeField(auto_now_add=True)

class ChapterResource(models.Model):
    generation = models.ForeignKey(ChapterGeneration, on_delete=models.CASCADE, related_name='chapters')
    name = models.CharField(max_length=255)
    position = models.IntegerField()  # To maintain original order

class ChapterVideoResource(models.Model):
    chapter = models.ForeignKey(ChapterResource, on_delete=models.CASCADE, related_name='videos')
    title = models.TextField()
    url = models.URLField()
    channel = models.CharField(max_length=255)
    duration = models.CharField(max_length=20)
    created_at = models.DateTimeField(auto_now_add=True)

class ChapterWebResource(models.Model):
    chapter = models.ForeignKey(ChapterResource, on_delete=models.CASCADE, related_name='websites')
    title = models.TextField()
    url = models.URLField()
    source = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)

class UserPDF(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pdfs')
    file_name = models.CharField(max_length=255)
    file = CloudinaryField('pdf', resource_type='raw')  # Changed to CloudinaryField
    vector_store = models.CharField(max_length=255)
    upload_time = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.user.username}'s PDF: {self.file_name}"
    
    def get_file_url(self):
        """Helper method to get the Cloudinary URL"""
        return self.file.url if self.file else None

class PDFConversation(models.Model):
    pdf = models.ForeignKey(UserPDF, on_delete=models.CASCADE, related_name='conversations')
    question = models.TextField()
    answer = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"Conversation about {self.pdf.file_name}"

class UserYouTubeVideo(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='youtube_videos')
    video_url = models.URLField()
    video_id = models.CharField(max_length=20)
    video_title = models.CharField(max_length=255)
    thumbnail_url = models.URLField()
    vector_store = models.CharField(max_length=255)
    upload_time = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return f"{self.user.username}'s Video: {self.video_title}"

class YouTubeConversation(models.Model):
    video = models.ForeignKey(UserYouTubeVideo, on_delete=models.CASCADE, related_name='conversations')
    question = models.TextField()
    answer = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"Conversation about {self.video.video_title}"


================================================
FILE: core/pdf_processor.py
================================================
import os
import time
import requests
import google.generativeai as genai
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_community.document_loaders import PyPDFLoader
from langchain_community.vectorstores import FAISS
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document
import re
import hashlib
import json
import tempfile
import cloudinary
import cloudinary.uploader
from django.conf import settings

class PDFProcessor:
    def __init__(self):
        self.groq_api_key = os.getenv("GROQ_API_KEY")
        self.groq_model = "deepseek-r1-distill-llama-70b"
        genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
        self.embedding_model = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        
        # Configure Cloudinary
        cloudinary.config(
            cloud_name=os.getenv("CLOUDINARY_CLOUD_NAME"),
            api_key=os.getenv("CLOUDINARY_API_KEY"),
            api_secret=os.getenv("CLOUDINARY_API_SECRET")
        )

    def clean_text(self, text: str) -> str:
        lines = text.splitlines()
        cleaned_lines = [line for line in lines if not re.match(r'^[_\W\s]{5,}$', line.strip())]
        return "\n".join(cleaned_lines).strip()

    def generate_text_hash(self, text: str) -> str:
        return hashlib.md5(text.encode('utf-8')).hexdigest()[:8]

    def upload_to_cloudinary(self, file, user_id=None):
        """Upload file to Cloudinary and return secure URL"""
        try:
            upload_result = cloudinary.uploader.upload_large(
    file,
    resource_type='raw',
    folder=f"user_pdfs/{user_id}" if user_id else "user_pdfs",
    unique_filename=True,
    overwrite=False,
    use_filename=True
)

            return upload_result['secure_url'], upload_result['public_id']
        except Exception as e:
            raise Exception(f"Cloudinary upload failed: {str(e)}")

    def process_pdf(self, pdf_file, user_id=None):
        """Process PDF file"""
        print("Processing PDF...")
        
        try:
            # Save to temp file first
            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                for chunk in pdf_file.chunks():
                    tmp_file.write(chunk)
                tmp_path = tmp_file.name
            
            print(f"Temporarily saved PDF to: {tmp_path}")
            
            # Upload to Cloudinary
            try:
                with open(tmp_path, 'rb') as f:
                    cloudinary_url, public_id = self.upload_to_cloudinary(f, user_id)
                    print(f"PDF uploaded to Cloudinary: {cloudinary_url}")
            except Exception as e:
                raise Exception(f"Cloudinary upload failed: {str(e)}")

            # Process the PDF from temp file
            loader = PyPDFLoader(tmp_path)
            raw_pages = loader.load()
            text_splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=200)

            chunks = []
            for page_num, page_doc in enumerate(raw_pages, start=1):
                page_text = self.clean_text(page_doc.page_content)
                page_chunks = text_splitter.split_text(page_text)

                for chunk_num, chunk_text in enumerate(page_chunks, start=1):
                    start_pos = page_text.find(chunk_text)
                    end_pos = start_pos + len(chunk_text)

                    chunks.append(Document(
                        page_content=chunk_text,
                        metadata={
                            "source": cloudinary_url,
                            "page": page_num,
                            "chunk_id": f"p{page_num}c{chunk_num}",
                            "position": {
                                "start": start_pos,
                                "end": end_pos,
                                "length": len(chunk_text)
                            },
                            "preview": chunk_text[:50] + ("..." if len(chunk_text) > 50 else ""),
                            "text_hash": self.generate_text_hash(chunk_text),
                            "page_hash": self.generate_text_hash(page_text),
                            "cloudinary_id": public_id
                        }
                    ))

            print(f"Created {len(chunks)} text chunks from {len(raw_pages)} pages")
            return chunks, cloudinary_url, public_id

        except Exception as e:
            raise Exception(f"PDF processing failed: {str(e)}")
        finally:
            # Clean up temporary file
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)
                print(f"Removed temporary file: {tmp_path}")

    def create_vector_store(self, chunks, store_name):
        print("Creating embeddings and vector store...")
        vectorstore = FAISS.from_documents(chunks, self.embedding_model)
        print(f"Vector store created with {vectorstore.index.ntotal} embeddings")
        
        # Save to vectorstores directory
        store_path = os.path.join(settings.BASE_DIR, "vectorstores", store_name)
        vectorstore.save_local(store_path)
        print(f"Vector store saved at {store_path}")
        return vectorstore

    def load_vector_store(self, store_name):
        store_path = os.path.join(settings.BASE_DIR, "vectorstores", store_name)
        return FAISS.load_local(
            store_path,
            self.embedding_model,
            allow_dangerous_deserialization=True
        )

    def call_groq_llm(self, prompt):
        headers = {
            "Authorization": f"Bearer {self.groq_api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": self.groq_model,
            "messages": [
                {"role": "system", "content": "You are a helpful AI assistant. Your work is to answer the Question given in prompt by strictly taking help of provided Context. Your solution should be accurate and in detail"},
                {"role": "user", "content": prompt}
            ]
        }

        response = requests.post("https://api.groq.com/openai/v1/chat/completions", json=payload, headers=headers)
        if response.status_code != 200:
            raise Exception(f"Groq LLM error: {response.status_code} - {response.text}")
        
        return response.json()["choices"][0]["message"]["content"]

    def expand_query_with_llm(self, query):
        prompt = f"""You are an expert assistant. The user query below is too short for accurate search.
So please you answer that query in 10 lines 

Query: {query}

Expanded version:"""
        return self.call_groq_llm(prompt)

    def answer_question(self, vectorstore, question):
        # Step 1: Expand the query
        expanded_query = self.expand_query_with_llm(question)
        
        # Step 2: Semantic search on expanded query
        similar_docs = vectorstore.max_marginal_relevance_search(
            query=expanded_query, 
            k=5, 
            fetch_k=25
        )

        if not similar_docs:
            return {
                "answer": "No relevant context found.",
                "references": [],
                "thinking_process": ""
            }

        # Prepare context for LLM
        full_context = "\n\n".join([doc.page_content for doc in similar_docs])

        # Generate answer with thinking process
        prompt = f"""Analyze the question and provide:
1. Your thinking process (marked with <thinking> tags)
2. A detailed answer based strictly on the context
3. Key points from each relevant chunk
4. Be as detailed as possible

Question: {question}

Context:
{full_context}

Format your response as:
<thinking>Your analytical process here</thinking>
<answer>Your structured answer here</answer>"""
        
        llm_response = self.call_groq_llm(prompt)
        
        # Extract thinking and answer parts
        thinking_process = llm_response.split("<thinking>")[1].split("</thinking>")[0].strip()
        answer = llm_response.split("<answer>")[1].split("</answer>")[0].strip()

        # Prepare structured response
        response = {
            "question": question,
            "expanded_query": expanded_query,
            "thinking_process": thinking_process,
            "answer": answer,
            "references": [
                {
                    "page": doc.metadata["page"],
                    "chunk_id": doc.metadata["chunk_id"],
                    "position": doc.metadata["position"],
                    "text": doc.page_content,
                    "preview": doc.metadata["preview"],
                    "page_hash": doc.metadata["page_hash"],
                    "text_hash": doc.metadata["text_hash"],
                    "cloudinary_id": doc.metadata.get("cloudinary_id", "")
                } for doc in similar_docs
            ],
            "context_hash": self.generate_text_hash(full_context)
        }

        return response


================================================
FILE: core/serializers.py
================================================



================================================
FILE: core/tests.py
================================================
import os
import requests
import json

BASE_URL = "http://localhost:8000"

def get_auth_headers(firebase_uid):
    """Generate headers with Firebase UID"""
    return {'X-Firebase-UID': firebase_uid}

def upload_and_process_pdf(pdf_path, firebase_uid):
    """Upload and process a PDF file"""
    print(f"\nUploading and processing PDF: {pdf_path}")
    
    if not os.path.exists(pdf_path):
        print(f"Error: File not found at {pdf_path}")
        return None

    try:
        with open(pdf_path, 'rb') as f:
            files = {'pdf': (os.path.basename(pdf_path), f)}
            headers = get_auth_headers(firebase_uid)
            response = requests.post(
                f"{BASE_URL}/api/process-pdf/",
                files=files,
                headers=headers
            )
        
        if response.status_code == 200:
            data = response.json()
            print("PDF processed successfully!")
            print(f"PDF ID: {data.get('data', {}).get('id')}")
            print(f"File name: {data.get('data', {}).get('file_name')}")
            return data.get('data', {}).get('id')
        else:
            print(f"Error processing PDF: {response.status_code}")
            print(response.json())
            return None
            
    except Exception as e:
        print(f"Error uploading PDF: {str(e)}")
        return None

def list_user_pdfs(firebase_uid):
    """List all PDFs for the authenticated user"""
    try:
        headers = get_auth_headers(firebase_uid)
        response = requests.get(
            f"{BASE_URL}/api/user/pdfs/",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            print("\nYour PDFs:")
            for idx, pdf in enumerate(data.get('data', []), 1):
                print(f"{idx}. {pdf['file_name']} (ID: {pdf['id']})")
            return data.get('data', [])
        else:
            print(f"Error listing PDFs: {response.status_code}")
            print(response.json())
            return None
            
    except Exception as e:
        print(f"Error listing PDFs: {str(e)}")
        return None

def ask_question(pdf_id, question, firebase_uid):
    """Ask a question about the processed PDF"""
    print(f"\nAsking question: {question}")
    
    try:
        headers = get_auth_headers(firebase_uid)
        response = requests.post(
            f"{BASE_URL}/api/answer-question/",
            json={
                'pdf_id': pdf_id,
                'question': question
            },
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            print("\nAnswer received:")
            print(json.dumps(data['data'], indent=2))
            return data['data']
        else:
            print(f"Error answering question: {response.status_code}")
            print(response.json())
            return None
            
    except Exception as e:
        print(f"Error asking question: {str(e)}")
        return None

def get_conversation_history(pdf_id, firebase_uid):
    """Get conversation history for a PDF"""
    try:
        headers = get_auth_headers(firebase_uid)
        response = requests.get(
            f"{BASE_URL}/api/user/pdfs/{pdf_id}/conversations/",
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            print("\nConversation history:")
            for conv in data.get('data', []):
                print(f"\nQ: {conv['question']}")
                print(f"A: {conv['answer']['answer'][:100]}...")  # Show first 100 chars
            return data.get('data', [])
        else:
            print(f"Error getting history: {response.status_code}")
            print(response.json())
            return None
            
    except Exception as e:
        print(f"Error getting history: {str(e)}")
        return None

def delete_pdf(pdf_id, firebase_uid):
    """Delete a PDF and its data"""
    confirm = input(f"\nAre you sure you want to delete PDF {pdf_id}? (y/n): ").strip().lower()
    if confirm != 'y':
        print("Deletion cancelled")
        return False
        
    try:
        headers = get_auth_headers(firebase_uid)
        response = requests.delete(
            f"{BASE_URL}/api/user/pdfs/{pdf_id}/",
            headers=headers
        )
        
        if response.status_code == 200:
            print("PDF deleted successfully!")
            return True
        else:
            print(f"Error deleting PDF: {response.status_code}")
            print(response.json())
            return False
            
    except Exception as e:
        print(f"Error deleting PDF: {str(e)}")
        return False

def run_tests():
    print("\n=== PDF Processing and QA Test ===")
    print("This test will:")
    print("1. Upload and process a PDF file")
    print("2. List your PDFs")
    print("3. Ask questions about the content")
    print("4. View conversation history")
    print("5. Delete PDF")

    # Get Firebase UID from user
    firebase_uid = "2IUpOTCYcLfJ1fLY8jItUCw11in1".strip()
    if not firebase_uid:
        print("Using default test UID")
        firebase_uid = "test_uid_123"  # Should match a user in your database

    # Step 1: Process PDF
    pdf_path = r"C:\Users\Lenovo\Desktop\Code For Bharat\Current\AiTutor\book2.pdf".strip()
    if not pdf_path or not os.path.exists(pdf_path):
        print("Using default test PDF")
        pdf_path = "test.pdf"  # Should exist in your directory

    pdf_id = upload_and_process_pdf(pdf_path, firebase_uid)
    if not pdf_id:
        print("Failed to process PDF. Exiting test.")
        return

    # Step 2: List PDFs
    list_user_pdfs(firebase_uid)

    # Step 3: Ask questions
    questions = [
        input("\nEnter first question (or press Enter for default): ").strip() or "What is this document about?",
        input("Enter second question (or press Enter for default): ").strip() or "Summarize the key points"
    ]

    for question in questions:
        ask_question(pdf_id, question, firebase_uid)

    # Step 4: View history
    if input("\nView conversation history? (y/n): ").lower() == 'y':
        get_conversation_history(pdf_id, firebase_uid)

    # Step 5: Delete PDF
    if input("\nDelete this PDF? (y/n): ").lower() == 'y':
        delete_pdf(pdf_id, firebase_uid)

    print("\nTest completed!")

if __name__ == "__main__":
    run_tests()


================================================
FILE: core/utils.py
================================================
import os
from typing import List, Dict, TypedDict
import time
from datetime import timedelta
from dotenv import load_dotenv
from youtube_search import YoutubeSearch
from tavily import TavilyClient
import google.generativeai as genai
from .yt_processor import YouTubeProcessor
import re 

# Initialize YouTubeProcessor (which includes proxy setup)
yt_processor = YouTubeProcessor()

# Initialize Gemini and Tavily
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model = genai.GenerativeModel('gemini-1.5-flash')
tavily = TavilyClient(api_key=os.getenv("TAVILY_API_KEY"))

# Define type hints
class VideoResource(TypedDict):
    title: str
    url: str
    channel: str
    duration: str

class WebResource(TypedDict):
    title: str
    url: str
    source: str

class ChapterOutput(TypedDict):
    name: str
    youtube_videos: List[VideoResource]
    web_resources: List[WebResource]

def generate_chapter_names(topic: str, grade: str) -> List[str]:
    prompt = f"""
        Generate exactly 10-12 comprehensive chapter names for studying {topic} 
        at {grade} level following these strict guidelines:

        1. Progression Structure:
        - Chapters 1-3: Foundational concepts
        - Chapters 4-6: Core techniques/methods  
        - Chapters 7-8: Advanced applications
        - Chapters 9-10: Cutting-edge extensions

        2. Naming Requirements:
        - Each 5-8 words
        - Include 2-3 key subtopics when possible
        - Use appropriate technical terms for the level
        - Distinct concepts (no overlap)
        - Progress logically

        3. Style:
        - Clear and concise
        - Avoid vague terms like "introduction to"
        - Action-oriented where applicable

        4. Format:
        - ONLY output numbered list
        - No explanations
        - No section headers
        - No additional text

        Example for "Machine Learning (Undergrad)":
        1. Supervised Learning: Regression, Classification, Loss Functions  
        2. Neural Networks: Architectures, Backpropagation, Activation Functions
        ...
        10. Federated Learning: Distributed Training, Privacy Preservation

        Now generate for {topic} at {grade} level:
        1. 
        2. 
        ...
        10.
        """
    
    response = model.generate_content(prompt)
    chapters = []
    
    for line in response.text.split('\n'):
        line = line.strip()
        if line and line[0].isdigit():
            chapter_name = line.split('.', 1)[1].strip()
            chapters.append(chapter_name)
            if len(chapters) == 10:
                break
    
    return chapters

def get_video_resources(topic: str, grade: str, chapter_name: str) -> List[VideoResource]:
    query = f"{topic} {chapter_name} tutorial for {grade} grade"
    results = YoutubeSearch(query, max_results=20).to_dict()  # Get more results to filter from
    
    videos = []
    for result in results:
        # Parse duration (format is either MM:SS or HH:MM:SS)
        duration_str = result["duration"]
        duration_parts = duration_str.split(':')
        
        try:
            if len(duration_parts) == 2:  # MM:SS format
                minutes = int(duration_parts[0])
                seconds = int(duration_parts[1])
                total_seconds = minutes * 60 + seconds
            elif len(duration_parts) == 3:  # HH:MM:SS format
                hours = int(duration_parts[0])
                minutes = int(duration_parts[1])
                seconds = int(duration_parts[2])
                total_seconds = hours * 3600 + minutes * 60 + seconds
            else:
                continue  # Skip if duration format is unexpected
            
            # Convert to minutes for comparison
            duration_minutes = total_seconds / 60
            
            # Check if duration is between 3 and 90 minutes
            if 3 <= duration_minutes <= 90:
                videos.append({
                    "title": result["title"],
                    "url": f"https://youtube.com{result['url_suffix']}",
                    "channel": result["channel"],
                    "duration": duration_str,
                    "duration_minutes": round(duration_minutes, 1)  # Added for convenience
                })
                
                # Stop when we have 4 qualifying videos
                if len(videos) >= 4:
                    break
                    
        except (ValueError, IndexError):
            continue  # Skip if duration parsing fails
    
    return videos

def get_web_resources(topic: str, grade: str, chapter_name: str) -> List[WebResource]:
    query = f"{topic} {chapter_name} tutorial OR guide for {grade} grade"
    search_results = tavily.search(query=query, include_raw_content=False, max_results=5)
    
    resources = []
    for result in search_results.get('results', [])[:4]:
        resources.append({
            "title": result.get('title', 'No title available'),
            "url": result.get('url', '#'),
            "source": result.get('url', '').split('/')[2] if '/' in result.get('url', '') else 'Unknown'
        })
    
    return resources

def display_chapters(chapter_names: List[str]):
    print("\nGenerated Chapters:")
    for i, name in enumerate(chapter_names, 1):
        print(f"{i}. {name}")

def display_single_chapter_resources(chapter: ChapterOutput):
    print(f"\nCHAPTER: {chapter['name']}")
    
    print("\nYouTube Videos:")
    for video in chapter["youtube_videos"]:
        print(f"- {video['title']} ({video['duration']})")
        print(f"  URL: {video['url']}")
        print(f"  Channel: {video['channel']}")
    
    print("\nWeb Resources:")
    for resource in chapter["web_resources"]:
        print(f"- {resource['title']}")
        print(f"  URL: {resource['url']}")
        print(f"  Source: {resource['source']}")

def get_video_id(video_url: str) -> str:
    """Extract video ID from a YouTube URL using YouTubeProcessor"""
    return yt_processor.extract_video_id(video_url)

def download_youtube_transcript(video_id: str, languages: list = ['en']) -> tuple:
    """Download transcript using YouTubeProcessor with proxy support"""
    try:
        chunks = yt_processor.load_youtube_transcript(f"https://www.youtube.com/watch?v={video_id}")
        if not chunks:
            return None, None
            
        # Format the transcript with timestamps
        formatted_transcript = []
        for chunk in chunks:
            start_time = chunk.metadata["timestamp"]["start"]
            text = chunk.page_content
            formatted_transcript.append(
                f"[{format_seconds_to_srt(start_time)}] {text}"
            )
        
        return "\n".join(formatted_transcript), video_id
    except Exception as e:
        print(f"Error downloading transcript: {str(e)}")
        return None, None

def format_seconds_to_srt(seconds: float) -> str:
    """Convert seconds to SRT time format (HH:MM:SS,mmm)"""
    td = timedelta(seconds=seconds)
    hours, remainder = divmod(td.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    milliseconds = td.microseconds // 1000
    return f"{hours:02d}:{minutes:02d}:{seconds:02d},{milliseconds:03d}"

def parse_transcript(transcript_text: str) -> list:
    """Parse transcript text into a list of chunks with timestamps"""
    chunks = []
    lines = transcript_text.split('\n')
    
    for line in lines:
        if line.startswith('[') and ']' in line:
            time_part, text = line.split(']', 1)
            time_str = time_part[1:]
            start_time = srt_time_to_seconds(time_str)
            
            chunks.append({
                'text': text.strip(),
                'start': start_time,
                'start_seconds': start_time,
                'time_range': f"{time_str} --> {time_str}"  # Using same time for start/end
            })
    
    return chunks

def srt_time_to_seconds(time_str: str) -> float:
    """Convert SRT time format (HH:MM:SS,mmm) to seconds"""
    hh_mm_ss, mmm = time_str.split(',')
    hh, mm, ss = hh_mm_ss.split(':')
    return int(hh) * 3600 + int(mm) * 60 + int(ss) + int(mmm)/1000

def generate_mcqs_from_transcript(transcript_chunks: list, video_id: str) -> tuple:
    """Generate MCQ questions from transcript chunks using Gemini with YouTube links"""
    transcript_with_timestamps = "\n\n".join(
        f"[{chunk['time_range']} (or {int(chunk['start_seconds'])}s)] {chunk['text']}" 
        for chunk in transcript_chunks
    )

    prompt = f"""
    I will provide you with a video transcript that includes timestamps. 
    Please generate 5-6 high quality multiple choice questions (MCQs) based on the key concepts and topics discussed in the video.

    Requirements:
    1. Questions should test understanding of important concepts, not trivial details
    2. Each question must be directly answerable from the transcript
    3. Include 4 plausible options for each question (a, b, c, d)
    4. Mark the correct answer with an asterisk (*)
    5. For each question, include:
       - The original timestamp (HH:MM:SS,mmm)
       - The time in seconds (for YouTube URL timestamp)
       - A clickable YouTube URL with the timestamp (format: https://youtu.be/VIDEO_ID?t=SECONDSs)
    6. Give proper explaination of the why correct answer is correct. And try to not include timestamps in explaination
    7. Format exactly as shown.

    Example format:
    1. What is X?
    a) One
    b) Two
    c) Three*
    d) Four
    Timestamp: [00:01:30,000]
    Seconds: 90
    Watch at: https://youtu.be/VIDEO_ID?t=90s
    Explaination: This is because...
    
    Transcript with timestamps:
    {transcript_with_timestamps}
    """
    try:
        response = model.generate_content(prompt)
        output = response.text.replace("VIDEO_ID", video_id)

        # Parse the text into JSON
        mcq_blocks = re.split(r"\n\d+\.\s", "\n" + output.strip())
        mcq_list = []

        for block in mcq_blocks[1:]:  # First is empty due to split
            lines = block.strip().split('\n')
            question = lines[0].strip()
            options = {}
            correct = ""
            for line in lines:
                match = re.match(r"([a-d])\)\s(.+?)(\*?)$", line.strip())
                if match:
                    opt = match.group(1)
                    text = match.group(2).strip()
                    is_correct = match.group(3) == '*'
                    options[opt] = text
                    if is_correct:
                        correct = opt


            timestamp_line = [l for l in lines if "Timestamp" in l][0]
            seconds_line = [l for l in lines if "Seconds" in l][0]
            url_line = [l for l in lines if "Watch at" in l][0]

            # Find explanation block (everything after "Watch at")
            explanation_index = lines.index(url_line) + 1
            explanation = "\n".join(lines[explanation_index:]).strip()

            mcq_list.append({
                "question": question,
                "options": options,
                "correct_answer": correct,
                "timestamp": timestamp_line.split(":", 1)[1].strip(" []"),
                "seconds": int(seconds_line.split(":")[1].strip()),
                "youtube_url": url_line.split(":", 1)[1].strip(),
                "explanation": explanation
            })

        return output, mcq_list

    except Exception as e:
        print(f"Error generating MCQs: {str(e)}")
        return None, None

def get_transcript_chunks_from_youtube(video_url: str, languages: list = ['en', 'hi']) -> list:
    """Get transcript chunks using YouTubeProcessor with proxy support"""
    try:
        video_id = yt_processor.extract_video_id(video_url)
        chunks = yt_processor.load_youtube_transcript(video_url)
        
        # Format transcript as list of dicts similar to the original format
        formatted_chunks = []
        for chunk in chunks:
            formatted_chunks.append({
                'text': chunk.page_content,
                'start': chunk.metadata['timestamp']['start'],
                'start_seconds': chunk.metadata['timestamp']['start'],
                'time_range': format_seconds_to_srt(chunk.metadata['timestamp']['start']) + 
                              " --> " + 
                              format_seconds_to_srt(chunk.metadata['timestamp']['end'])
            })
        
        return formatted_chunks
    except Exception as e:
        print(f"[ERROR] Failed to get transcript chunks: {str(e)}")
        return []

if __name__ == "__main__":
    print("Study Resource Generator")
    topic = input("Enter your study topic: ").strip() or "Python Programming"
    grade = input("Enter grade/standard level: ").strip() or "high school"
    
    try:
        # First generate all chapter names
        chapter_names = generate_chapter_names(topic, grade)
        display_chapters(chapter_names)
        
        # Ask user which chapter they want resources for
        while True:
            try:
                chapter_num = input("\nEnter chapter number to generate resources for (1-10) or 'q' to quit: ").strip()
                if chapter_num.lower() == 'q':
                    break
                
                chapter_num = int(chapter_num)
                if 1 <= chapter_num <= 10:
                    selected_chapter = chapter_names[chapter_num - 1]
                    print(f"\nGenerating resources for Chapter {chapter_num}: {selected_chapter}...")
                    
                    # Generate resources only for the selected chapter
                    videos = get_video_resources(topic, grade, selected_chapter)
                    websites = get_web_resources(topic, grade, selected_chapter)
                    
                    chapter_output = {
                        "name": selected_chapter,
                        "youtube_videos": videos,
                        "web_resources": websites
                    }
                    
                    display_single_chapter_resources(chapter_output)
                else:
                    print("Please enter a number between 1 and 10.")
            except ValueError:
                print("Please enter a valid number or 'q' to quit.")
                
    except Exception as e:
        print(f"Error: {e}")

# Load environment variables
load_dotenv()



================================================
FILE: core/www.youtube.com_cookies.txt
================================================
# Netscape HTTP Cookie File
# http://curl.haxx.se/rfc/cookie_spec.html
# This is a generated file!  Do not edit.

.youtube.com	TRUE	/	TRUE	1787485542	PREF	tz=Asia.Calcutta&f5=30000&f7=100&f6=40000000&f4=4000000
.youtube.com	TRUE	/	TRUE	1786945731	LOGIN_INFO	AFmmF2swRQIgcbrT4_5G7Vg1UgFBz3yaGCnQ79TtJ2xrRvQCeN_ybfQCIQCb3E-szCK91Zq9lQpKx-am5r8g-iHdbCs3T0lZMLZOsA:QUQ3MjNmel9BenluUjdBa0h0Q1dBc1BOZ3lWTk9NU1NDWVR0bTdLQm01dW5tNXNpYjdvd0M1VDdYOXVITUluNnpPNTVzS0RWaVhuZFhqUTVtVktPdDgwVG5KRUpUUnhoc2FEcnIzY0tGZ0ZTNnJxVUFBQUtPNENwT2xwZmxxRlFVcWM1RHlJOUh3MWlhdUowVDE1TzNkdlhQeENDOWxXdU5R
.youtube.com	TRUE	/	FALSE	1787048824	SID	g.a000zAjJ22aqm-LLwniznxza8twqP4Wc2r3w4QMrRH8wjN0AfqXBkxs2O2UAyNZDww3fu-3W_wACgYKAcASARESFQHGX2Mi9C2Z5_1u2FatqkZnJ1lMoxoVAUF8yKoC1vYexMWAWTO41pe7HnAr0076
.youtube.com	TRUE	/	TRUE	1787048824	__Secure-1PSID	g.a000zAjJ22aqm-LLwniznxza8twqP4Wc2r3w4QMrRH8wjN0AfqXBmnufFnu3ITpl5PUA22dQKQACgYKAS0SARESFQHGX2MihQdHzW1-qA6wMPATiHctrBoVAUF8yKqh47UVR_nh3EdZfRzYl0Rr0076
.youtube.com	TRUE	/	TRUE	1787048824	__Secure-3PSID	g.a000zAjJ22aqm-LLwniznxza8twqP4Wc2r3w4QMrRH8wjN0AfqXBZC2da05H6mhaS_NmOxveXQACgYKATgSARESFQHGX2MitcEF51tJIor7DJkBpE1nMRoVAUF8yKpyUr2cGYqhqA4wv72E4Ouh0076
.youtube.com	TRUE	/	FALSE	1787048824	HSID	Aah2o0O_CHGK2ummp
.youtube.com	TRUE	/	TRUE	1787048824	SSID	ANNoxyORVwsj1c_8i
.youtube.com	TRUE	/	FALSE	1787048824	APISID	42cfPMGdWPgqlWf6/AlGqdSq6ge8xcUT_n
.youtube.com	TRUE	/	TRUE	1787048824	SAPISID	5TM8Jx0qoR5APtIN/AV2GRyQ88errYVmfB
.youtube.com	TRUE	/	TRUE	1787048824	__Secure-1PAPISID	5TM8Jx0qoR5APtIN/AV2GRyQ88errYVmfB
.youtube.com	TRUE	/	TRUE	1787048824	__Secure-3PAPISID	5TM8Jx0qoR5APtIN/AV2GRyQ88errYVmfB
.youtube.com	TRUE	/	TRUE	1784461410	__Secure-1PSIDTS	sidts-CjIB5H03P1AF8ECVUwwm4sWMPjsdaTUmnN4b45iidhuuLwDUa_usX_ZhrnFsqlT9M0GRuhAA
.youtube.com	TRUE	/	TRUE	1784461410	__Secure-3PSIDTS	sidts-CjIB5H03P1AF8ECVUwwm4sWMPjsdaTUmnN4b45iidhuuLwDUa_usX_ZhrnFsqlT9M0GRuhAA
.youtube.com	TRUE	/	FALSE	1784461546	SIDCC	AKEyXzWb37IbgZ0Qx44oMUNo7QFYB1Xmzrk4Xq-qKmqNO5EcxF3cKikApwBXZyxKKB6QTqLdbNZj
.youtube.com	TRUE	/	TRUE	1784461546	__Secure-1PSIDCC	AKEyXzUJSU4kdbmUxR5A9lI8LKGvV_hPv2EXpOPuMMgQQndywbb4JNzj_INF4JC-jqyyOHOEtSgZ
.youtube.com	TRUE	/	TRUE	1784461546	__Secure-3PSIDCC	AKEyXzUhvINARC-T9r-qqhuNTOabyKqrRVtuD13t_9_NdkOf-8TAN_vzDDcpB1Bl06ATKkCVRppB
.youtube.com	TRUE	/	TRUE	1768477539	VISITOR_INFO1_LIVE	EtYGhQCeSLI
.youtube.com	TRUE	/	TRUE	1768477539	VISITOR_PRIVACY_METADATA	CgJJThIEGgAgIA%3D%3D
.youtube.com	TRUE	/	TRUE	0	YSC	Lxfu4zH2bGQ
.youtube.com	TRUE	/	TRUE	1768475592	__Secure-ROLLOUT_TOKEN	CPq6-4_zoIqh8gEQvKP_-rvrigMY24PmoOXIjgM%3D



================================================
FILE: core/yt_processor.py
================================================
import os
import re
import json
import hashlib
import logging
import requests
from typing import List, Dict, Optional, Union, Tuple
from datetime import timedelta
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import TranscriptsDisabled, NoTranscriptFound
from youtube_transcript_api.proxies import WebshareProxyConfig
from langchain.schema import Document
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_community.vectorstores import FAISS
import google.generativeai as genai
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import random
import time
import os
import requests
from urllib.parse import urlparse, parse_qs



class YouTubeProcessor:
    def __init__(self):
        # Load environment variables
        load_dotenv()
        
        # Initialize configurations
        self._init_configurations()
        
        # Initialize proxy settings
        self._init_proxies()

    def _init_configurations(self):
        """Initialize all non-proxy related configurations"""
        self.groq_api_key = os.getenv("GROQ_API_KEY")
        self.groq_model = "deepseek-r1-distill-llama-70b"
        genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
        self.embedding_model = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
        self.supported_languages = ['en', 'hi']  # English and Hindi (English first)
        self.max_retries = 3
        self.initial_delay = 1

    def _init_proxies(self):
        """Initialize all proxy-related configurations"""
        self.webshare_username = os.getenv("WEBSHARE_USERNAME")
        self.webshare_password = os.getenv("WEBSHARE_PASSWORD")
        self.has_proxies = self.webshare_username and self.webshare_password
        
        # Configuration for requests library
        self.requests_proxies = {
            'http': f'http://{self.webshare_username}:{self.webshare_password}@p.webshare.io:80',
            'https': f'http://{self.webshare_username}:{self.webshare_password}@p.webshare.io:80',
        } if self.has_proxies else None
        
        # Configuration for YouTubeTranscriptApi
        self.ytt_proxy_config = WebshareProxyConfig(
            proxy_username=self.webshare_username,
            proxy_password=self.webshare_password
        ) if self.has_proxies else None
        
        # Headers to mimic browser
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Connection': 'keep-alive',
        }
        
        # Initialize YouTubeTranscriptApi with correct proxy config
        self.ytt_api = YouTubeTranscriptApi(proxy_config=self.ytt_proxy_config)

    @staticmethod
    def clean_text(text: str) -> str:
        """Clean text by removing empty or whitespace-only lines"""
        lines = text.splitlines()
        cleaned_lines = [line for line in lines if not re.match(r'^[_\W\s]{5,}$', line.strip())]
        return "\n".join(cleaned_lines).strip()

    @staticmethod
    def generate_text_hash(text: str) -> str:
        """Generate a short hash for text content"""
        return hashlib.md5(text.encode('utf-8')).hexdigest()[:8]

    @staticmethod
    def extract_video_id(video_url: str) -> str:
        """Extract YouTube video ID from URL"""
        patterns = [
    r'(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|youtu\.be\/)([^"&?\/\s]{11}))',
    r'youtube\.com\/watch\?v=([^"&?\/\s]{11})',
    r'youtu\.be\/([^"&?\/\s]{11})'
]
        
        for pattern in patterns:
            match = re.search(pattern, video_url)
            if match:
                return match.group(1)
        
        return video_url  # Return as-is if no pattern matches (might already be an ID)
    
    @staticmethod
    def format_timestamp_url(video_url: str, timestamp: float) -> str:
        """Format URL with timestamp parameter"""
        video_id = YouTubeProcessor.extract_video_id(video_url)
        return f"https://www.youtube.com/watch?v={video_id}&t={int(timestamp)}s"
    

    def get_youtube_video_info(self, video_url: str) -> dict:
        api_key = os.getenv("YOUTUBE_API_KEY")
        video_id = self.extract_video_id(video_url)
        if not api_key or not video_id:
            return {
                "title": "",
                "description": "",
                "thumbnail": "",
                "duration": 0,
                "view_count": 0,
                "upload_date": ""
            }

        endpoint = (
            f"https://www.googleapis.com/youtube/v3/videos"
            f"?part=snippet,contentDetails,statistics"
            f"&id={video_id}&key={api_key}"
        )

        try:
            response = requests.get(endpoint)
            data = response.json()
            if not data["items"]:
                return {}
            video_data = data["items"][0]

            snippet = video_data.get("snippet", {})
            content = video_data.get("contentDetails", {})
            stats = video_data.get("statistics", {})

            duration_seconds = self.parse_duration(content.get("duration", "PT0S"))

            return {
                "title": snippet.get("title", ""),
                "description": snippet.get("description", ""),
                "thumbnail": snippet.get("thumbnails", {}).get("high", {}).get("url", ""),
                "duration": duration_seconds,
                "view_count": int(stats.get("viewCount", 0)),
                "upload_date": snippet.get("publishedAt", "")
            }

        except Exception as e:
            print(f"Error fetching video info: {str(e)}")
            return {}

    # def extract_video_id(self, url: str) -> str:
    #     parsed = urlparse(url)
    #     if parsed.hostname in ["youtu.be"]:
    #         return parsed.path[1:]
    #     if parsed.hostname in ["www.youtube.com", "youtube.com"]:
    #         query = parse_qs(parsed.query)
    #         return query.get("v", [""])[0]
    #     return ""

    def parse_duration(self, duration: str) -> int:
        import isodate
        try:
            return int(isodate.parse_duration(duration).total_seconds())
        except:
            return 0


    def _make_request_with_retry(self, url, max_retries=None, initial_delay=None):
        """Helper method to make requests with retry logic"""
        max_retries = max_retries or self.max_retries
        initial_delay = initial_delay or self.initial_delay
        
        delay = initial_delay
        for attempt in range(max_retries):
            try:
                response = requests.get(
                    url,
                    proxies=self.requests_proxies,
                    headers=self.headers,
                    timeout=30
                )
                if response.status_code == 200:
                    return response
                elif response.status_code == 429:  # Too Many Requests
                    delay *= (2 + random.random())  # Exponential backoff with jitter
                    time.sleep(delay)
                else:
                    return None
            except Exception as e:
                print(f"Request failed (attempt {attempt + 1}): {str(e)}")
                delay *= (2 + random.random())
                time.sleep(delay)
        
        return None

    def get_transcript(self, video_id: str) -> Tuple[Optional[List[Dict]], Optional[str]]:
        """Get transcript with multiple fallback strategies"""
        # First try standard API with proxies
        try:
            transcript = self.ytt_api.get_transcript(video_id, languages=['en'])
            print("Found English transcript via API")
            return transcript, 'en'
        except Exception as e:
            print(f"API failed for English transcript: {str(e)}")
        
        # Fallback 1: Try Hindi transcript
        try:
            transcript = self.ytt_api.get_transcript(video_id, languages=['hi'])
            print("Found Hindi transcript via API")
            return transcript, 'hi'
        except NoTranscriptFound:
            try:
                transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                for t in transcript_list:
                    if t.language_code == 'hi' and t.is_generated:
                        print("Found auto-generated Hindi transcript")
                        return t.fetch(), 'hi'
            except Exception as e:
                print(f"Couldn't find Hindi transcript: {str(e)}")
        except Exception as e:
            print(f"Error fetching Hindi transcript: {str(e)}")
        
        # Fallback 2: Try scraping
        scraped_transcript = self._scrape_transcript(video_id)
        if scraped_transcript:
            return scraped_transcript, 'en'
        
        return None, None

    def _scrape_transcript(self, video_id: str) -> Optional[List[Dict]]:
        """Fallback method to scrape transcript if API fails"""
        url = f"https://www.youtube.com/watch?v={video_id}"
        
        response = self._make_request_with_retry(url)
        if not response or response.status_code != 200:
            return None
        
        try:
            soup = BeautifulSoup(response.text, 'html.parser')
            script_tags = soup.find_all('script')
            
            # Look for transcript data in script tags
            for script in script_tags:
                if 'captionTracks' in str(script):
                    # This is a simplified parser - actual implementation may need adjustment
                    data = json.loads(script.string.split('ytInitialPlayerResponse = ')[1].split(';')[0])
                    caption_tracks = data.get('captions', {}).get('playerCaptionsTracklistRenderer', {}).get('captionTracks', [])
                    
                    for track in caption_tracks:
                        if track.get('languageCode') in self.supported_languages:
                            transcript_url = track.get('baseUrl')
                            if transcript_url:
                                transcript_response = self._make_request_with_retry(f"{transcript_url}&fmt=json3")
                                if transcript_response:
                                    return self._parse_scraped_transcript(transcript_response.json())
        except Exception as e:
            print(f"Scraping failed: {str(e)}")
        
        return None

    def _parse_scraped_transcript(self, transcript_data: Dict) -> List[Dict]:
        """Parse scraped transcript data into standard format"""
        events = transcript_data.get('events', [])
        transcript = []
        
        for event in events:
            if 'segs' in event:
                for seg in event['segs']:
                    if seg.get('utf8'):
                        transcript.append({
                            'text': seg['utf8'],
                            'start': event.get('tStartMs', 0) / 1000,
                            'duration': event.get('dDurationMs', 3000) / 1000
                        })
        
        return transcript
    def load_youtube_transcript(self, video_url: str) -> List[Document]:
        """Load and process YouTube transcript into chunks with timestamps"""
        video_id = self.extract_video_id(video_url)
        print(f"\nProcessing YouTube video: {video_url}")
        
        # Get video metadata
        video_info = self.get_youtube_video_info(video_url)
        if video_info.get('title'):
            print(f"Video Title: {video_info['title']}")
        
        # Get transcript with language preference
        transcript, transcript_lang = self.get_transcript(video_id)
        if not transcript:
            raise Exception(f"No transcript available in supported languages: {self.supported_languages}")
        
        # Process transcript into chunks with metadata
        full_text = " ".join([entry['text'] for entry in transcript])
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=800, chunk_overlap=200)
        text_chunks = text_splitter.split_text(self.clean_text(full_text))
        
        chunks = []
        for chunk_num, chunk_text in enumerate(text_chunks, start=1):
            # Map chunk to timestamp range
            start_pos = full_text.find(chunk_text)
            end_pos = start_pos + len(chunk_text)
            
            start_time = 0
            end_time = 0
            current_pos = 0
            matched_entries = []
            
            for entry in transcript:
                entry_end = current_pos + len(entry['text']) + 1  # +1 for space
                if current_pos <= end_pos and entry_end >= start_pos:
                    matched_entries.append(entry)
                current_pos = entry_end
            
            if matched_entries:
                start_time = matched_entries[0]['start']
                end_time = matched_entries[-1]['start'] + matched_entries[-1]['duration']
            
            chunks.append(Document(
                page_content=chunk_text,
                metadata={
                    "source": self.format_timestamp_url(video_url, start_time),
                    "thumbnail": video_info.get('thumbnail', ''),
                    "chunk_id": f"c{chunk_num}",
                    "timestamp": {
                        "start": start_time,
                        "end": end_time,
                        "length": end_time - start_time
                    },
                    "preview": chunk_text[:50] + ("..." if len(chunk_text) > 50 else ""),
                    "text_hash": self.generate_text_hash(chunk_text),
                    "video_hash": self.generate_text_hash(full_text),
                    "video_title": video_info.get('title', 'Unknown'),
                    "video_id": video_id,
                    "language": transcript_lang
                }
            ))
        
        print(f"Created {len(chunks)} text chunks from YouTube video")
        return chunks

    def create_vector_store(self, chunks: List[Document], store_name: str) -> FAISS:
        """Create and save FAISS vector store from document chunks"""
        print("Creating embeddings and vector store...")
        vectorstore = FAISS.from_documents(chunks, self.embedding_model)
        print(f"Vector store created with {vectorstore.index.ntotal} embeddings")
        
        # Save to specified path
        store_path = os.path.join("vectorstores", store_name)
        os.makedirs(os.path.dirname(store_path), exist_ok=True)
        vectorstore.save_local(store_path)
        print(f"Vector store saved at {store_path}")
        return vectorstore
    
    def load_vector_store(self, store_name: str) -> FAISS:
        """Load existing vector store from disk"""
        store_path = os.path.join("vectorstores", store_name)
        return FAISS.load_local(
            store_path,
            self.embedding_model,
            allow_dangerous_deserialization=True
        )

    def call_groq_llm(self, prompt: str, language: str = 'en') -> str:
        """Call Groq LLM API with the given prompt"""
        headers = {
            "Authorization": f"Bearer {self.groq_api_key}",
            "Content-Type": "application/json"
        }
        
        system_message = {
            "en": "You are a helpful AI assistant. Answer questions using the provided context.",
            "hi": "आप एक सहायक AI सहायक हैं। प्रदान किए गए संदर्भ का उपयोग करके प्रश्नों का उत्तर दें।"
        }.get(language, "en")
        
        payload = {
            "model": self.groq_model,
            "messages": [
                {
                    "role": "system", 
                    "content": system_message
                },
                {"role": "user", "content": prompt}
            ]
        }

        try:
            response = requests.post(
                "https://api.groq.com/openai/v1/chat/completions", 
                json=payload, 
                headers=headers,
                timeout=30
            )
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            raise Exception(f"Groq LLM error: {str(e)}")

    def expand_query_with_llm(self, query: str, language: str = 'en') -> str:
        """Expand short queries for better semantic search"""
        prompt_templates = {
            'en': """You are an expert assistant. The user query below is too short for accurate search.
Please expand it into a more detailed version while preserving the original intent.

Original Query: {query}

Expanded Version:""",
            'hi': """आप एक विशेषज्ञ सहायक हैं। नीचे दिया गया उपयोगकर्ता प्रश्न सटीक खोज के लिए बहुत छोटा है।
कृपया इसे मूल इरादे को संरक्षित करते हुए अधिक विस्तृत संस्करण में विस्तारित करें।

मूल प्रश्न: {query}

विस्तारित संस्करण:"""
        }
        
        prompt = prompt_templates.get(language, 'en').format(query=query)
        return self.call_groq_llm(prompt, language)

    def answer_question(self, vectorstore: FAISS, question: str) -> Dict:
        """Answer question using vector store context"""
        # Detect language of the question
        question_lang = 'hi' if any('\u0900' <= char <= '\u097F' for char in question) else 'en'
        
        # Expand the query
        expanded_query = self.expand_query_with_llm(question, question_lang)
        
        # Semantic search
        similar_docs = vectorstore.max_marginal_relevance_search(
            query=expanded_query, 
            k=5, 
            fetch_k=25
        )

        if not similar_docs:
            return {
                "answer": "No relevant context found in the video.",
                "references": [],
                "thinking_process": ""
            }

        # Prepare context
        full_context = "\n\n".join([doc.page_content for doc in similar_docs])
        
        # Generate answer (always in English)
        prompt_template = """Analyze the question and provide:
1. Your thinking process (marked with <thinking> tags)
2. A detailed answer in English based strictly on the context
3. Key points from each relevant chunk
4. Include timestamps where this information appears in the video

Question: {question}

Context:
{context}

IMPORTANT: Your answer must be in English, even if the context is in another language.

Format your response as:
<thinking>Your analytical process here</thinking>
<answer>Your structured answer in English here</answer>"""
        
        llm_response = self.call_groq_llm(
            prompt_template.format(question=question, context=full_context),
            'en'
        )
        
        # Extract response parts
        thinking_process = ""
        answer = ""
        try:
            thinking_process = llm_response.split("<thinking>")[1].split("</thinking>")[0].strip()
            answer = llm_response.split("<answer>")[1].split("</answer>")[0].strip()
        except:
            thinking_process = "The model did not provide a separate thinking process."
            answer = llm_response

        return {
            "question": question,
            "expanded_query": expanded_query,
            "thinking_process": thinking_process,
            "answer": answer,
            "references": [
                {
                    "source": doc.metadata["source"],
                    "thumbnail": doc.metadata["thumbnail"],
                    "chunk_id": doc.metadata["chunk_id"],
                    "timestamp": doc.metadata["timestamp"],
                    "text": doc.page_content,
                    "preview": doc.metadata["preview"],
                    "video_title": doc.metadata.get("video_title", "Unknown"),
                    "language": doc.metadata.get("language", "en")
                } for doc in similar_docs
            ],
            "context_hash": self.generate_text_hash(full_context),
            "language": "en"
        }

    def process_video(self, video_url: str, store_name: str) -> Dict:
        """Full processing pipeline for a YouTube video"""
        chunks = self.load_youtube_transcript(video_url)
        vectorstore = self.create_vector_store(chunks, store_name)
        video_info = self.get_youtube_video_info(video_url)
        
        return {
            "vectorstore": vectorstore,
            "video_info": video_info,
            "chunks": chunks,
            "store_name": store_name
        }

from dotenv import load_dotenv
load_dotenv()



================================================
FILE: core/migrations/0001_initial.py
================================================
# Generated by Django 5.2.4 on 2025-07-04 13:43

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('firebase_uid', models.CharField(max_length=128, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]



================================================
FILE: core/migrations/0002_alter_user_options_userpdf_pdfconversation.py
================================================
# Generated by Django 5.2.4 on 2025-07-07 08:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='user',
            options={'verbose_name': 'User', 'verbose_name_plural': 'Users'},
        ),
        migrations.CreateModel(
            name='UserPDF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('vector_store', models.CharField(max_length=255)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pdfs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PDFConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pdf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='core.userpdf')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]



================================================
FILE: core/migrations/0003_useryoutubevideo_youtubeconversation.py
================================================
# Generated by Django 5.1.6 on 2025-07-08 11:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_alter_user_options_userpdf_pdfconversation'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserYouTubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_url', models.URLField()),
                ('video_id', models.CharField(max_length=20)),
                ('video_title', models.CharField(max_length=255)),
                ('thumbnail_url', models.URLField()),
                ('vector_store', models.CharField(max_length=255)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='youtube_videos', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='YouTubeConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='core.useryoutubevideo')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]



================================================
FILE: core/migrations/0004_chaptergeneration_chapterresource_and_more.py
================================================
# Generated by Django 5.2.4 on 2025-07-09 06:49

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_useryoutubevideo_youtubeconversation'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChapterGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(max_length=255)),
                ('grade', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapter_generations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('position', models.IntegerField()),
                ('generation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='core.chaptergeneration')),
            ],
        ),
        migrations.CreateModel(
            name='ChapterVideoResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('url', models.URLField()),
                ('channel', models.CharField(max_length=255)),
                ('duration', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='core.chapterresource')),
            ],
        ),
        migrations.CreateModel(
            name='ChapterWebResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('url', models.URLField()),
                ('source', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='websites', to='core.chapterresource')),
            ],
        ),
    ]



================================================
FILE: core/migrations/0005_userpdf_file.py
================================================
# Generated by Django 5.2.4 on 2025-07-18 09:55

import cloudinary.models
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0004_chaptergeneration_chapterresource_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='userpdf',
            name='file',
            field=cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='pdf'),
        ),
    ]



================================================
FILE: core/migrations/0006_alter_userpdf_file.py
================================================
# Generated by Django 5.2.4 on 2025-07-18 09:56

import cloudinary.models
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_userpdf_file'),
    ]

    operations = [
        migrations.AlterField(
            model_name='userpdf',
            name='file',
            field=cloudinary.models.CloudinaryField(default='', max_length=255, verbose_name='pdf'),
            preserve_default=False,
        ),
    ]



================================================
FILE: core/migrations/__init__.py
================================================



================================================
FILE: decentral_tutor/__init__.py
================================================



================================================
FILE: decentral_tutor/asgi.py
================================================
"""
ASGI config for decentral_tutor project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'decentral_tutor.settings')

application = get_asgi_application()



================================================
FILE: decentral_tutor/settings.py
================================================
"""
Django settings for decentral_tutor project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()  # Load environment variables

# Firebase config
FIREBASE_PROJECT_ID = os.getenv("FIREBASE_PROJECT_ID")
FIREBASE_PRIVATE_KEY_ID = os.getenv("FIREBASE_PRIVATE_KEY_ID")
FIREBASE_PRIVATE_KEY = os.getenv("FIREBASE_PRIVATE_KEY").replace('\\n', '\n')
FIREBASE_CLIENT_EMAIL = os.getenv("FIREBASE_CLIENT_EMAIL")
FIREBASE_CLIENT_ID = os.getenv("FIREBASE_CLIENT_ID")
FIREBASE_CLIENT_CERT_URL = os.getenv("FIREBASE_CLIENT_CERT_URL")

AUTH_USER_MODEL = 'core.User'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jjpx-v%93pqjoe6jh%pk_g30sk+fqf*4cvbyql=j2c6oszx@#$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']  # Allow all hosts for development

# Application definition
INSTALLED_APPS = [
    'core.apps.CoreConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'corsheaders',  # For cross-origin requests during development
    # Remove 'rest_framework_simplejwt',
    'cloudinary',
    'cloudinary_storage',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'decentral_tutor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # Can be empty if Django only serves APIs or uses templates for admin/auth
        'APP_DIRS': True, # Keep this if apps have their own templates (e.g. admin)
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'decentral_tutor.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = []
AUTHENTICATION_BACKENDS = [
    'core.firebase_auth.FirebaseAuthentication',
    'django.contrib.auth.backends.ModelBackend',  # Keep for admin
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # For production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend', 'build', 'static'),  # React static files
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'core.firebase_auth.FirebaseAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    )
}

# CORS Configuration (for development)
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins during development
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",  # your Vite dev server
]
# Authentication URLs (removed redirects - handled by React)
# LOGIN_REDIRECT_URL = 'dashboard'  # Removed
# LOGOUT_REDIRECT_URL = 'home'      # Removed

# Email configuration (example - update for production)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Update STATICFILES_DIRS to check if directory exists


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend/build/static'),
] if os.path.exists(os.path.join(BASE_DIR, 'frontend/build/static')) else []



CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-firebase-uid',  # Add this
    'x-user-email',    # Add this
    'x-user-name',     # Add this
    'x-requested-with', 
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True


# Add to the bottom of settings.py
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Create vectorstores directory
VECTORSTORES_DIR = os.path.join(BASE_DIR, 'vectorstores')
os.makedirs(VECTORSTORES_DIR, exist_ok=True)


# Cloudinary Storage
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


================================================
FILE: decentral_tutor/urls.py
================================================
from django.contrib import admin
from django.urls import path, include
from core.api import FirebaseLoginAPI, DashboardAPI, ChapterAPI, VideoResourcesAPI, WebResourcesAPI, PDFQAAPI, QuestionAnswerAPI, UserPDFListAPI, DeletePDFAPI, PDFConversationHistoryAPI, YouTubeQuestionAPI, YouTubeVideoAPI, YouTubeVideoListAPI, YouTubeVideoDeleteAPI, ChapterGenerationHistoryAPI, ChapterResourcesAPI, DeleteChapterGenerationAPI
from django.views.generic import TemplateView
from core.api import get_csrf_token
from core.api import MultiVideoMCQAPI

urlpatterns = [
    # Existing URLs
    path('admin/', admin.site.urls),
    path('api/login/', FirebaseLoginAPI.as_view(), name='api_login'),
    path('api/dashboard/', DashboardAPI.as_view(), name='api_dashboard'),
    
    # Chapter-related URLs
    path('api/chapters/', ChapterAPI.as_view(), name='api_chapters'),
    path('api/chapters/history/', ChapterGenerationHistoryAPI.as_view(), name='api_chapter_history'),
    path('api/chapters/<int:generation_id>/resources/', ChapterResourcesAPI.as_view(), name='api_chapter_resources'),
    path('api/videos/', VideoResourcesAPI.as_view(), name='api_videos'),
    path('api/websites/', WebResourcesAPI.as_view(), name='api_websites'),
    path('api/chapters/<int:generation_id>/', DeleteChapterGenerationAPI.as_view(), name='api_delete_chapter_generation'),
    path("api/generate-multi-mcqs/", MultiVideoMCQAPI.as_view(), name="generate_multi_mcqs"),

    
    # PDF-related URLs
    path('api/process-pdf/', PDFQAAPI.as_view(), name='api_process_pdf'),
    path('api/answer-question/', QuestionAnswerAPI.as_view(), name='api_answer_question'),
    path('api/user/pdfs/', UserPDFListAPI.as_view(), name='api_user_pdfs'),
    path('api/user/pdfs/<int:pdf_id>/', DeletePDFAPI.as_view(), name='api_delete_pdf'),
    path('api/user/pdfs/<int:pdf_id>/conversations/', PDFConversationHistoryAPI.as_view(), name='api_pdf_conversations'),
    
    # YouTube-related URLs
    path('api/process-youtube/', YouTubeVideoAPI.as_view(), name='api_process_youtube'),
    path('api/ask-youtube-question/', YouTubeQuestionAPI.as_view(), name='api_ask_youtube_question'),
    path('api/user/youtube-videos/', YouTubeVideoListAPI.as_view(), name='api_user_youtube_videos'),
    path('api/user/youtube-videos/<int:video_id>/', YouTubeVideoDeleteAPI.as_view(), name='api_delete_youtube_video'),
    
    # CSRF and frontend
    path('api/csrf/', get_csrf_token, name='api_csrf'),
    path('', TemplateView.as_view(template_name='index.html')),
    path('<path:path>', TemplateView.as_view(template_name='index.html')),
]


================================================
FILE: decentral_tutor/wsgi.py
================================================
"""
WSGI config for decentral_tutor project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'decentral_tutor.settings')

application = get_wsgi_application()



================================================
FILE: frontend/README.md
================================================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.



================================================
FILE: frontend/eslint.config.js
================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])



================================================
FILE: frontend/index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



================================================
FILE: frontend/package.json
================================================
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-pdf-viewer/core": "^3.12.0",
    "@react-pdf-viewer/default-layout": "^3.12.0",
    "@react-pdf-viewer/highlight": "^3.12.0",
    "@tailwindcss/vite": "^4.1.11",
    "axios": "^1.10.0",
    "firebase": "^11.10.0",
    "lucide-react": "^0.525.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-markdown": "^10.1.0",
    "react-router-dom": "^6.x.x",
    "react-youtube": "^10.1.0",
    "tailwindcss": "^4.1.11"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.5.2",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "vite": "^7.0.0"
  }
}



================================================
FILE: frontend/vite.config.js
================================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'


// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss()],
})



================================================
FILE: frontend/public/_redirects
================================================
/*    /index.html   200



================================================
FILE: frontend/src/App.jsx
================================================
import React from 'react'
import { Route, Routes } from 'react-router-dom';
import Home from './pages/Home';
import AuthForm from './pages/AuthForm';
import NotFound from './pages/NotFound';
import Dashboard from './pages/Dashboard';
import Quiz from './pages/Quiz';


function App() {
  return (
    <>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/dashboard/*" element={<Dashboard/>} />
        <Route path="/quiz" element={<Quiz />} />

        <Route path="/auth" element={<AuthForm />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </>
  );
}

export default App


================================================
FILE: frontend/src/index.css
================================================
@import "tailwindcss";


.custom-scrollbar::-webkit-scrollbar {
  width: 10px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: rgba(30, 41, 59, 0.5); /* slate-800 */
  border-radius: 9999px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: linear-gradient(to bottom, #6366f1, #8b5cf6); /* indigo to purple */
  border-radius: 9999px;
  border: 2px solid rgba(15, 23, 42, 0.6); /* outline blend */
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(to bottom, #818cf8, #a78bfa); /* lighter hover */
}
.custom-scrollbar {
  scrollbar-width: thin;
  scrollbar-color: #8b5cf6 rgba(30, 41, 59, 0.5);
}



================================================
FILE: frontend/src/main.jsx
================================================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import "./index.css";
import App from "./App.jsx";
import { QuizProvider } from "./contexts/QuizContext.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <QuizProvider>
        <App />
      </QuizProvider>
    </BrowserRouter>
  </StrictMode>
);



================================================
FILE: frontend/src/components/LoadingScreen.jsx
================================================
import React, { useState, useEffect } from "react";
import { 
  BookOpen, 
  Brain, 
  Sparkles, 
  Loader2, 
  Target, 
  Zap,
  Lightbulb,
  Cpu
} from "lucide-react";

function LoadingScreen() {
  const [currentStep, setCurrentStep] = useState(0);
  const [progress, setProgress] = useState(0);

  const loadingSteps = [
    { 
      icon: Brain, 
      text: "Initializing AI Learning Engine...", 
      description: "Preparing personalized education algorithms",
      color: "from-blue-500 to-cyan-500" 
    },
    { 
      icon: BookOpen, 
      text: "Analyzing Educational Content...", 
      description: "Processing vast knowledge databases",
      color: "from-purple-500 to-pink-500" 
    },
    { 
      icon: Target, 
      text: "Customizing Learning Path...", 
      description: "Tailoring content to your needs",
      color: "from-emerald-500 to-teal-500" 
    },
    { 
      icon: Sparkles, 
      text: "Generating Smart Resources...", 
      description: "Creating your personalized study materials",
      color: "from-orange-500 to-red-500" 
    },
    { 
      icon: Zap, 
      text: "Finalizing AI Experience...", 
      description: "Almost ready for your learning journey",
      color: "from-indigo-500 to-purple-500" 
    }
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 2;
      });
    }, 100);

    const stepInterval = setInterval(() => {
      setCurrentStep(prev => {
        if (prev >= loadingSteps.length - 1) {
          clearInterval(stepInterval);
          return prev;
        }
        return prev + 1;
      });
    }, 2000);

    return () => {
      clearInterval(interval);
      clearInterval(stepInterval);
    };
  }, []);

  const FloatingIcon = ({ icon: Icon, delay, size = "w-6 h-6" }) => (
    <div 
      className={`absolute text-white/30 animate-pulse`}
      style={{
        animationDelay: `${delay}s`,
        animationDuration: '3s',
        top: `${Math.random() * 80 + 10}%`,
        left: `${Math.random() * 80 + 10}%`,
      }}
    >
      <Icon className={size} />
    </div>
  );

  return (
    <div className="min-h-screen min-w-screen bg-gradient-to-br from-slate-900/80 via-gray-900/80 to-slate-800/80 backdrop-blur-sm flex items-center justify-center p-6 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(20)].map((_, i) => (
          <FloatingIcon 
            key={i} 
            icon={[BookOpen, Brain, Lightbulb, Cpu, Sparkles][i % 5]} 
            delay={i * 0.3}
            size={i % 3 === 0 ? "w-8 h-8" : "w-6 h-6"}
          />
        ))}
      </div>

      {/* Gradient Orbs */}
      <div className="absolute top-20 left-20 w-72 h-72 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full blur-3xl animate-pulse"></div>
      <div className="absolute bottom-20 right-20 w-96 h-96 bg-gradient-to-r from-emerald-500/20 to-teal-500/20 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '1s' }}></div>
      <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-r from-pink-500/20 to-orange-500/20 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '2s' }}></div>

      {/* Main Loading Container */}
      <div className="relative z-10 bg-gradient-to-br from-gray-800/80 via-slate-800/80 to-gray-900/80 backdrop-blur-2xl rounded-3xl p-6 shadow-2xl border border-gray-700/50 max-w-xl w-full mx-auto">
        
        {/* Header */}
        <div className="text-center mb-6">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-full p-3 shadow-lg">
              <Brain className="w-6 h-6 text-white" />
            </div>
            <h1 className="text-2xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
              AI Learning Hub
            </h1>
          </div>
          <p className="text-gray-300 text-sm font-medium">
            Preparing your personalized educational experience
          </p>
        </div>

        {/* Main Loading Animation */}
        <div className="flex flex-col items-center mb-4">
          <div className="relative mb-4">
            {/* Spinning Outer Ring */}
            <div className="w-20 h-20 border-3 border-gray-700 rounded-full animate-spin border-t-transparent">
              <div className={`w-full h-full rounded-full bg-gradient-to-r ${loadingSteps[currentStep].color} p-1`}>
                <div className="w-full h-full bg-gray-800 rounded-full flex items-center justify-center">
                  {React.createElement(loadingSteps[currentStep].icon, {
                    className: "w-8 h-8 text-white animate-pulse"
                  })}
                </div>
              </div>
            </div>
            
            {/* Pulsing Inner Glow */}
            <div className={`absolute inset-0 rounded-full bg-gradient-to-r ${loadingSteps[currentStep].color} opacity-20 animate-ping`}></div>
          </div>
        </div>

        {/* Current Step Info */}
        <div className="text-center mb-4">
          <h2 className="text-lg font-bold text-white mb-1">
            {loadingSteps[currentStep].text}
          </h2>
          <p className="text-gray-400 text-sm font-medium">
            {loadingSteps[currentStep].description}
          </p>
        </div>

        {/* Progress Bar */}
        <div className="mb-4">
          <div className="flex justify-between items-center mb-2">
            <span className="text-xs font-medium text-gray-400">Progress</span>
            <span className="text-xs font-bold text-white">{Math.round(progress)}%</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-2 overflow-hidden">
            <div 
              className={`h-full bg-gradient-to-r ${loadingSteps[currentStep].color} transition-all duration-300 ease-out rounded-full relative`}
              style={{ width: `${progress}%` }}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse"></div>
            </div>
          </div>
        </div>

        {/* Step Indicators */}
        <div className="flex justify-center space-x-3">
          {loadingSteps.map((step, index) => (
            <div
              key={index}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                index <= currentStep
                  ? `bg-gradient-to-r ${step.color} shadow-lg`
                  : 'bg-gray-600'
              }`}
            >
              {index === currentStep && (
                <div className={`w-full h-full rounded-full bg-gradient-to-r ${step.color} animate-pulse`}></div>
              )}
            </div>
          ))}
        </div>

        {/* Fun Facts */}
        <div className="mt-4 text-center">
          <div className="bg-gradient-to-r from-blue-900/20 to-purple-900/20 rounded-xl p-3 border border-blue-500/20">
            <div className="flex items-center justify-center gap-2 mb-1">
              <Lightbulb className="w-4 h-4 text-yellow-400" />
              <span className="text-xs font-bold text-yellow-400">AI Fact</span>
            </div>
            <p className="text-gray-300 text-xs">
              Our AI processes over 10 million educational resources to find the perfect content for you!
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default LoadingScreen;


================================================
FILE: frontend/src/components/Model1history.jsx
================================================
import React, { useEffect, useState, useContext } from "react";
import {
  fetchChapterGenerationHistory,
  deleteChapterGeneration,
} from "../utils/contentScan";
import { Clock, BookOpen, Calendar, Hash, Trash2 } from "lucide-react";
import { fetchChapterResources } from "../utils/contentScan";

function Model1history( {setFromHistory,setChapterHistory, loading, setLoading} ) {
  const [history, setHistory] = useState([]);
  const loadHistory = async () => {
    try {
      const data = await fetchChapterGenerationHistory();
      setHistory(data);
    } catch (err) {
      console.error("Failed to load history:", err);
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Are you sure you want to delete this generation?"))
      return;
    try {
      await deleteChapterGeneration(id);
      setHistory((prev) => prev.filter((item) => item.id !== id));
    } catch (err) {
      console.error("Delete failed:", err);
      alert("Failed to delete. Try again.");
    }
  };

  useEffect(() => {
    setTimeout(() => {
    loadHistory();
    }, 1000);
  }, []);

  const handleClick = async (item) => {
     if (loading) return;
    setLoading(true);
    try {
      const resources = await fetchChapterResources(item.id);
      setChapterHistory(resources);
      setFromHistory(true);
      setLoading(false);
    } catch (err) {
      console.error("Failed to fetch chapter resources:", err);
      alert("Failed to load resources for this chapter. Try again.");
    }
  };

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-3xl p-8 shadow-2xl border border-blue-400/20">
          <div className="flex items-center gap-4">
            <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-4 shadow-lg">
              <Clock className="w-8 h-8 text-blue-100" />
            </div>
            <div>
              <h2 className="text-4xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
                Chapter Generation History
              </h2>
              <p className="text-blue-100 text-lg font-medium">
                Discover your previously generated AI-powered chapter outlines
              </p>
            </div>
          </div>
        </div>

        {/* Content Section */}
        <div className=" rounded-3xl overflow-hidden ">
          <div className="p-8">
            {history.length === 0 ? (
              <div className="text-center py-16">
                <div className="bg-gradient-to-br from-gray-700 to-slate-800 rounded-full p-6 w-24 h-24 mx-auto mb-6 shadow-lg">
                  <BookOpen className="w-12 h-12 text-blue-400 mx-auto" />
                </div>
                <h3 className="text-2xl font-bold text-gray-100 mb-4">
                  No AI Learning History Yet
                </h3>
                <p className="text-gray-400 text-lg font-medium mb-2">
                  Your personalized chapter outlines will appear here
                </p>
                <p className="text-gray-500 text-sm">
                  Generate your first AI-powered chapter outline to get started
                </p>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="flex items-center gap-4 mb-8">
                  <div className="bg-gradient-to-r from-emerald-500 to-teal-600 rounded-2xl p-3 shadow-lg">
                    <BookOpen className="w-7 h-7 text-white" />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-white">
                      AI-Generated Learning Paths
                    </h3>
                    <p className="text-gray-300 font-medium">
                      Click on any entry to explore curated resources
                    </p>
                  </div>
                  <div className="bg-white/20 backdrop-blur-lg text-white px-5 py-2 rounded-full font-bold border border-white/30 ml-auto">
                    {history.length} entries
                  </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {history.map((item) => (
                    <div
                      key={item.id}
                      onClick={() => handleClick(item)}
                      className="group relative bg-gradient-to-br from-gray-700 to-slate-800 hover:from-gray-600 hover:to-slate-700 rounded-2xl p-6 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl border border-gray-600/50 hover:border-indigo-500/50"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-4">
                            <div className="bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 rounded-xl p-2 shadow-lg">
                              <BookOpen className="w-5 h-5 text-white" />
                            </div>
                            <h3 className="font-bold text-xl text-gray-100 group-hover:text-indigo-300 transition-colors leading-relaxed">
                              {item.topic}
                            </h3>
                          </div>
                          
                          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
                            <div className="flex items-center gap-2 text-gray-300 bg-gray-800/50 rounded-xl px-3 py-2">
                              <Calendar className="w-4 h-4 text-emerald-400" />
                              <span className="font-medium">Grade: {item.grade}</span>
                            </div>
                            <div className="flex items-center gap-2 text-gray-300 bg-gray-800/50 rounded-xl px-3 py-2">
                              <Hash className="w-4 h-4 text-blue-400" />
                              <span className="font-medium">{item.chapter_count} chapters</span>
                            </div>
                          </div>
                          
                          <div className="flex items-center gap-2 text-gray-400 mt-4 bg-gray-800/30 rounded-xl px-3 py-2">
                            <Clock className="w-4 h-4 text-purple-400" />
                            <span className="text-sm font-medium">
                              {new Date(item.created_at).toLocaleString()}
                            </span>
                          </div>
                        </div>

                        {/* Delete button */}
                        <button
                          onClick={(e) => {
                             if (loading) return;
                            e.stopPropagation();
                            handleDelete(item.id);
                          }}
                          className="flex-shrink-0 p-3 bg-red-900/20 hover:bg-red-900/40 text-red-400 hover:text-red-300 rounded-xl transition-all duration-200 border border-red-500/30 hover:border-red-500/50 shadow-lg"
                          title="Delete AI Generation"
                        >
                          <Trash2 className="w-5 h-5" />
                        </button>
                      </div>
                      
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-500/0 to-indigo-500/0 group-hover:from-blue-500/10 group-hover:to-indigo-500/20 rounded-2xl transition-all duration-300" />
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default Model1history;


================================================
FILE: frontend/src/components/Model2history.jsx
================================================
import React, { useState, useEffect } from "react";
import { fetchUserPDFList } from "../utils/contentScan";
import { History, FileText, Youtube, Clock, MessageSquare, Sparkles, Trash2, Play, BookOpen } from "lucide-react";
import { deletePdf } from "../utils/contentScan";
import { fetchYouTubeHistory, deleteYoutubeVideo, fetchPDFConversationHistory } from "../utils/contentScan";

// Enhanced scrollbar styles with theme matching
const scrollbarStyles = `
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(71, 85, 105, 0.3);
    border-radius: 8px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, #3b82f6, #6366f1, #8b5cf6);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, #2563eb, #4f46e5, #7c3aed);
  }
`;

// Inject enhanced styles
if (typeof document !== "undefined") {
  const existingStyle = document.querySelector('style[data-history-styles]');
  if (existingStyle) {
    existingStyle.remove();
  }
  
  const styleElement = document.createElement("style");
  styleElement.setAttribute('data-history-styles', 'true');
  styleElement.textContent = scrollbarStyles;
  document.head.appendChild(styleElement);
}

const Model2history = () => {
  const [activeTab, setActiveTab] = useState("pdf");
  const [pdfHistory, setPdfHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [ytHistory, setYtHistory] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isLoaded, setIsLoaded] = useState(false);

  // Mouse tracking for interactive background
  useEffect(() => {
    setIsLoaded(true);
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };
    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  // Fetch PDF upload history
  useEffect(() => {
    if (activeTab === "pdf") {
      setLoading(true);
      fetchUserPDFList()
        .then((data) => setPdfHistory(data))
        .catch((err) => console.error("Failed to fetch PDF history", err))
        .finally(() => setLoading(false));
    }
  }, [activeTab]);

  const handleDelete = async (pdfId) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this PDF?"
    );
    if (!confirmed) return;

    const result = await deletePdf(pdfId);
    if (result.success) {
      setPdfHistory((prev) => prev.filter((pdf) => pdf.id !== pdfId));
      alert("PDF deleted successfully.");
    } else {
      alert("Failed to delete PDF: " + result.message);
    }
  };

  useEffect(() => {
    setLoading(true);
    if (activeTab === "pdf") {
      fetchUserPDFList()
        .then((data) => setPdfHistory(data))
        .catch((err) => console.error("Failed to fetch PDF history", err))
        .finally(() => setLoading(false));
    } else if (activeTab === "youtube") {
      fetchYouTubeHistory()
        .then((data) => setYtHistory(data))
        .catch((err) => console.error("Failed to fetch YouTube history", err))
        .finally(() => setLoading(false));
    }
  }, [activeTab]);

  const handleDeleteYT = async (videoId) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this YouTube video?"
    );
    if (!confirmed) return;

    try {
      await deleteYoutubeVideo(videoId);
      setYtHistory((prev) => prev.filter((video) => video.id !== videoId));
      alert("YouTube video deleted successfully.");
    } catch (err) {
      alert("Error: " + err.message);
    }
  };

  const handlePdfClick = (pdf) => {
    alert("Viewing conversation history for PDFs is not available yet.");
  };

  const handleYouTubeClick = (video) => {
    alert("Viewing conversation history for YouTube is not available yet.");
  };

  return (
    <div className="min-h-screen  p-4 sm:p-5 md:p-6 relative overflow-hidden">
      {/* Animated Background */}
      <div className="fixed inset-0 pointer-events-none">
        <div 
          className="absolute w-64 h-64 sm:w-80 sm:h-80 md:w-96 md:h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"
          style={{
            left: mousePosition.x - 192,
            top: mousePosition.y - 192,
            transition: 'all 0.3s ease-out'
          }}
        />
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-indigo-500/10 rounded-full blur-3xl animate-pulse delay-2000" />
      </div>

      <div className={`relative max-w-6xl mx-auto transition-all duration-1000 ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
        {/* Enhanced Header */}
        <div className="bg-gradient-to-r from-gray-800/60 via-slate-800/60 to-gray-800/60 backdrop-blur-lg rounded-3xl shadow-2xl border border-gray-700/50 p-8 mb-8">
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-6">

            <div className="relative">
              <div className="p-4 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-2xl shadow-lg animate-pulse">
                <History className="w-8 h-8 text-white" />
              </div>
              <div className="absolute -inset-1 bg-gradient-to-r from-blue-400 via-purple-400 to-indigo-400 rounded-2xl blur opacity-30 animate-pulse"></div>
            </div>
            <div>
              <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold bg-gradient-to-r from-white via-blue-100 to-indigo-200 bg-clip-text text-transparent mb-2">
                ðŸ“š Analysis History
              </h1>
              <p className="text-gray-300 text-lg">
                View your previously analyzed content and conversations
              </p>
            </div>
          </div>
        </div>

        {/* Enhanced Toggle Buttons */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <button
            onClick={() => setActiveTab("pdf")}
            className={`group relative p-4 sm:p-5 md:p-6 rounded-3xl border-2 transition-all duration-300 text-left overflow-hidden backdrop-blur-sm ${
              activeTab === "pdf"
                ? "border-blue-500 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-indigo-700/20 shadow-2xl"
                : "border-gray-600/50 bg-gradient-to-r from-gray-800/60 to-slate-800/60 hover:border-gray-500/70 hover:shadow-xl"
            }`}
          >
            <div className="relative z-10 flex items-center gap-4">
              <div className={`p-4 rounded-2xl shadow-lg transition-all duration-300 ${
                activeTab === "pdf"
                  ? "bg-gradient-to-r from-blue-600 to-indigo-700 animate-pulse"
                  : "bg-gradient-to-r from-gray-700 to-slate-700 group-hover:from-gray-600 group-hover:to-slate-600"
              }`}>
                <FileText className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className={`text-xl font-bold mb-2 transition-colors ${
                  activeTab === "pdf"
                    ? "text-blue-100"
                    : "text-gray-100 group-hover:text-white"
                }`}>
                  ðŸ“„ PDF Documents
                </h3>
                <p className={`text-sm transition-colors ${
                  activeTab === "pdf"
                    ? "text-blue-200"
                    : "text-gray-400 group-hover:text-gray-300"
                }`}>
                  Previously analyzed documents and textbooks
                </p>
              </div>
            </div>
            {activeTab === "pdf" && (
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600/10 via-purple-600/10 to-indigo-700/10 animate-pulse" />
            )}
          </button>

          <button
            onClick={() => setActiveTab("youtube")}
            className={`group relative p-p-4 sm:p-5 md:p-6 rounded-3xl border-2 transition-all duration-300 text-left overflow-hidden backdrop-blur-sm ${
              activeTab === "youtube"
                ? "border-red-500 bg-gradient-to-r from-red-600/20 via-pink-600/20 to-rose-700/20 shadow-2xl"
                : "border-gray-600/50 bg-gradient-to-r from-gray-800/60 to-slate-800/60 hover:border-gray-500/70 hover:shadow-xl"
            }`}
          >
            <div className="relative z-10 flex items-center gap-4">
              <div className={`p-4 rounded-2xl shadow-lg transition-all duration-300 ${
                activeTab === "youtube"
                  ? "bg-gradient-to-r from-red-600 to-pink-600 animate-pulse"
                  : "bg-gradient-to-r from-gray-700 to-slate-700 group-hover:from-gray-600 group-hover:to-slate-600"
              }`}>
                <Youtube className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className={`text-xl font-bold mb-2 transition-colors ${
                  activeTab === "youtube"
                    ? "text-red-100"
                    : "text-gray-100 group-hover:text-white"
                }`}>
                  ðŸŽ¥ YouTube Videos
                </h3>
                <p className={`text-sm transition-colors ${
                  activeTab === "youtube"
                    ? "text-red-200"
                    : "text-gray-400 group-hover:text-gray-300"
                }`}>
                  Previously analyzed educational videos
                </p>
              </div>
            </div>
            {activeTab === "youtube" && (
              <div className="absolute inset-0 bg-gradient-to-r from-red-600/10 via-pink-600/10 to-rose-700/10 animate-pulse" />
            )}
          </button>
        </div>

        {/* Enhanced Content Area */}
        <div className="bg-gradient-to-r from-gray-800/60 via-slate-800/60 to-gray-800/60 backdrop-blur-lg rounded-3xl shadow-2xl border border-gray-700/50 p-8">
          {loading ? (
            <div className="flex flex-col items-center justify-center py-16">
              <div className="relative">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-500/30 border-t-blue-500 shadow-lg"></div>
                <div className="absolute inset-0 animate-ping rounded-full h-16 w-16 border-4 border-blue-400/20"></div>
              </div>
              <div className="mt-6 text-center">
                <p className="text-xl font-medium text-gray-300 mb-2">Loading your content...</p>
                <p className="text-gray-500">âœ¨ Preparing your learning history</p>
              </div>
            </div>
          ) : activeTab === "pdf" ? (
            pdfHistory.length === 0 ? (
              <div className="text-center py-16">
                <div className="relative mb-8">
                  <div className="p-4 sm:p-5 md:p-6 bg-gradient-to-r from-blue-600/20 to-indigo-700/20 rounded-3xl inline-block">
                    <BookOpen className="w-16 h-16 text-blue-400 animate-pulse" />
                  </div>
                  <div className="absolute -inset-2 bg-gradient-to-r from-blue-400/20 to-indigo-400/20 rounded-3xl blur animate-pulse"></div>
                </div>
                <h3 className="text-2xl font-bold text-white mb-3">ðŸ“š No PDFs Yet</h3>
                <p className="text-gray-400 text-lg mb-2">
                  Upload your first PDF to get started with AI analysis
                </p>
                <p className="text-gray-500">
                  ðŸš€ Experience instant summaries, key insights, and smart Q&A
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="mb-6">
                  <h3 className="text-2xl font-bold text-white mb-2">
                    ðŸ“„ Your PDF Collection ({pdfHistory.length})
                  </h3>
                  <p className="text-gray-400">Click on any document to view conversation history</p>
                </div>
                <div className="space-y-4 max-h-96 overflow-y-auto custom-scrollbar">
                  {pdfHistory.map((pdf, index) => (
                    <div
                      key={pdf.id}
                      onClick={() => handlePdfClick(pdf)}
                      className={`group cursor-pointer p-4 sm:p-5 md:p-6 bg-gradient-to-r from-gray-700/60 to-slate-800/60 backdrop-blur-sm rounded-2xl border border-gray-600/50 hover:border-blue-500/50 transition-all duration-300 transform hover:scale-[1.02] hover:shadow-xl ${
                        index % 2 === 0 ? 'hover:from-blue-900/20 hover:to-indigo-900/20' : 'hover:from-purple-900/20 hover:to-pink-900/20'
                      }`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-4 mb-4">
                            <div className={`p-3 rounded-xl shadow-lg transition-all duration-300 ${
                              index % 2 === 0 
                                ? 'bg-gradient-to-r from-blue-600 to-indigo-700 group-hover:from-blue-500 group-hover:to-indigo-600' 
                                : 'bg-gradient-to-r from-purple-600 to-pink-700 group-hover:from-purple-500 group-hover:to-pink-600'
                            }`}>
                              <FileText className="w-5 h-5 text-white" />
                            </div>
                            <div className="flex-1">
                              <h4 className="font-bold text-white text-lg mb-1 group-hover:text-blue-200 transition-colors truncate">
                                {pdf.file_name}
                              </h4>
                              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-6 text-sm text-gray-400">
                                <div className="flex items-center gap-2">
                                  <Clock className="w-4 h-4" />
                                  <span>
                                    {new Date(pdf.upload_time).toLocaleDateString('en-US', {
                                      year: 'numeric',
                                      month: 'short',
                                      day: 'numeric',
                                      hour: '2-digit',
                                      minute: '2-digit'
                                    })}
                                  </span>
                                </div>
                                <div className="flex items-center gap-2">
                                  <MessageSquare className="w-4 h-4" />
                                  <span>
                                    {pdf.conversation_count} conversation{pdf.conversation_count !== 1 ? 's' : ''}
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div className="ml-6 flex flex-col items-end gap-3">
                          <div className={`px-4 py-2 rounded-full text-sm font-medium shadow-lg ${
                            index % 2 === 0
                              ? 'bg-gradient-to-r from-blue-600/20 to-indigo-700/20 text-blue-300 border border-blue-500/30'
                              : 'bg-gradient-to-r from-purple-600/20 to-pink-700/20 text-purple-300 border border-purple-500/30'
                          }`}>
                            ðŸ’¬ {pdf.conversation_count} chat{pdf.conversation_count !== 1 ? 's' : ''}
                          </div>

                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDelete(pdf.id);
                            }}
                            className="group/btn flex items-center gap-2 px-4 py-2 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-xl transition-all duration-200 border border-red-500/30 hover:border-red-400/50"
                          >
                            <Trash2 className="w-4 h-4 group-hover/btn:animate-pulse" />
                            <span className="text-sm font-medium">Delete</span>
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )
          ) : ytHistory.length === 0 ? (
            <div className="text-center py-16">
              <div className="relative mb-8">
                <div className="p-4 sm:p-5 md:p-6 bg-gradient-to-r from-red-600/20 to-pink-700/20 rounded-3xl inline-block">
                  <Youtube className="w-16 h-16 text-red-400 animate-pulse" />
                </div>
                <div className="absolute -inset-2 bg-gradient-to-r from-red-400/20 to-pink-400/20 rounded-3xl blur animate-pulse"></div>
              </div>
              <h3 className="text-2xl font-bold text-white mb-3">ðŸŽ¥ No Videos Yet</h3>
              <p className="text-gray-400 text-lg mb-2">
                Analyze your first YouTube video to get started
              </p>
              <p className="text-gray-500">
                ðŸš€ Get instant summaries, timestamps, and key insights
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="mb-6">
                <h3 className="text-2xl font-bold text-white mb-2">
                  ðŸŽ¥ Your Video Collection ({ytHistory.length})
                </h3>
                <p className="text-gray-400">Click on any video to view conversation history</p>
              </div>
              <div className="space-y-4 max-h-96 overflow-y-auto custom-scrollbar">
                {ytHistory.map((video, index) => (
                  <div
                    key={video.id}
                    onClick={() => handleYouTubeClick(video)}
                    className={`group cursor-pointer p-4 sm:p-5 md:p-6 bg-gradient-to-r from-gray-700/60 to-slate-800/60 backdrop-blur-sm rounded-2xl border border-gray-600/50 hover:border-red-500/50 transition-all duration-300 transform hover:scale-[1.02] hover:shadow-xl ${
                      index % 2 === 0 ? 'hover:from-red-900/20 hover:to-pink-900/20' : 'hover:from-orange-900/20 hover:to-red-900/20'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-4 mb-4">
                          <div className="relative">
                            <img
                              src={video.thumbnail_url}
                              alt="Video thumbnail"
                              className="w-24 h-16 object-cover rounded-xl shadow-lg border border-gray-600/50"
                            />
                            <div className="absolute inset-0 bg-black/30 rounded-xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                              <Play className="w-6 h-6 text-white" />
                            </div>
                          </div>
                          <div className="flex-1">
                            <h4 className="font-bold text-white text-lg mb-1 group-hover:text-red-200 transition-colors line-clamp-2">
                              {video.video_title}
                            </h4>
                            <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-6 text-sm text-gray-400">
                              <div className="flex items-center gap-2">
                                <Clock className="w-4 h-4" />
                                <span>
                                  {new Date(video.upload_time).toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: 'short',
                                    day: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  })}
                                </span>
                              </div>
                              <div className="flex items-center gap-2">
                                <MessageSquare className="w-4 h-4" />
                                <span>
                                  {video.conversation_count} conversation{video.conversation_count !== 1 ? 's' : ''}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <div className="ml-6 flex flex-col items-end gap-3">
                        <div className={`px-4 py-2 rounded-full text-sm font-medium shadow-lg ${
                          index % 2 === 0
                            ? 'bg-gradient-to-r from-red-600/20 to-pink-700/20 text-red-300 border border-red-500/30'
                            : 'bg-gradient-to-r from-orange-600/20 to-red-700/20 text-orange-300 border border-orange-500/30'
                        }`}>
                          ðŸ’¬ {video.conversation_count} chat{video.conversation_count !== 1 ? 's' : ''}
                        </div>

                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteYT(video.id);
                          }}
                          className="group/btn flex items-center gap-2 px-4 py-2 text-red-400 hover:text-red-300 hover:bg-red-500/10 rounded-xl transition-all duration-200 border border-red-500/30 hover:border-red-400/50"
                        >
                          <Trash2 className="w-4 h-4 group-hover/btn:animate-pulse" />
                          <span className="text-sm font-medium">Delete</span>
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Model2history;


================================================
FILE: frontend/src/components/Model2results.jsx
================================================
import React from "react";
import {
  ArrowLeft,
  CheckCircle,
  Link as LinkIcon,
  FileText,
  Brain,
} from "lucide-react";

import YouTube from "react-youtube";
import ReactMarkdown from "react-markdown";
import { Worker, Viewer } from "@react-pdf-viewer/core";
import "@react-pdf-viewer/core/lib/styles/index.css";
import { defaultLayoutPlugin } from "@react-pdf-viewer/default-layout";
import { highlightPlugin } from "@react-pdf-viewer/highlight";
import "@react-pdf-viewer/default-layout/lib/styles/index.css";
import "@react-pdf-viewer/highlight/lib/styles/index.css";
import { useState, useMemo } from "react";
import { askPdfQuestion, askYoutubeQuestion } from "../utils/contentScan"; // Adjust the import path as needed

const API_BASE = import.meta.env.VITE_API_BASE;

function Model2results({
  file,
  url,
  mode,
  isLoading,
  setIsLoading,
  onNewScan,
  viewerRef,
  fileUrl,
  response,
}) {
  const defaultLayoutPluginInstance = defaultLayoutPlugin();
  const highlightPluginInstance = highlightPlugin();

  const { jumpToHighlightArea } = highlightPluginInstance;
  const [player, setPlayer] = useState(null);
  const [isAnswerLoading, setIsAnswerLoading] = useState(false);

  const [question, setQuestion] = useState("");
  const [videoStartTime, setVideoStartTime] = useState(0);
  const [thinkingText, setThinkingText] = useState("");
  const fullThinkingText = "Thinking...";

  const [messages, setMessages] = useState([
    {
      type: "ai",
      text: `Hello! I've analyzed your ${
        mode === "pdf" ? "PDF document" : "YouTube video"
      }. What would you like to know about it?`,
    },
  ]);

  const handleSend = async () => {
    if (!question.trim()) return;

    const userMessage = { type: "user", text: question };
    setMessages((prev) => [...prev, userMessage]);
    setIsAnswerLoading(true);

    try {
      let res;
      if (mode === "pdf") {
        const pdfId = response?.data?.id;
        res = await askPdfQuestion(pdfId, question);
      } else if (mode === "yt") {
        const videoId = response?.data?.id;
        res = await askYoutubeQuestion(videoId, question);
      }

      const rawAnswer = res?.data?.answer || "No response from server.";
      const refs = res?.data?.references || [];
      const thinking = res?.data?.thinking_process || "";

      

      const extractTagContent = (tag, text) => {
        const regex = new RegExp(`<${tag}[^>]*>([\\s\\S]*?)<\\/${tag}>`, "gi");
        const matches = [];
        let match;
        while ((match = regex.exec(text)) !== null) {
          matches.push(match[1].trim());
        }
        return matches.length > 0 ? matches.join("\n") : null;
      };

      const answerOnly = extractTagContent("answer", rawAnswer);
      const thinkingText = extractTagContent("think", rawAnswer);

      const newMessages = [];

      // Add thinking message first if it exists
      if (thinking) {
        newMessages.push({ type: "think", text: thinking });
      }

      // Add the answer message
      newMessages.push({ type: "ai", text: answerOnly || rawAnswer });

      // Add references if they exist
      if (refs.length > 0) {
        newMessages.push({ type: "reference-list", references: refs });
      }

      setMessages((prev) => [...prev, ...newMessages]);
    } catch (err) {
      console.error("Error getting answer:", err);
      setMessages((prev) => [
        ...prev,
        { type: "ai", text: "⚠️ Error getting answer." },
      ]);
    } finally {
      setIsAnswerLoading(false);
      setQuestion("");
    }
  };

  // Function to extract YouTube video ID from URL
  function getYoutubeVideoId(url) {
    try {
      const urlObj = new URL(url);
      if (urlObj.hostname === "youtu.be") {
        return urlObj.pathname.slice(1);
      } else if (urlObj.hostname.includes("youtube.com")) {
        return urlObj.searchParams.get("v");
      }
      return null;
    } catch (e) {
      return null;
    }
  }

  // Converts timestamp string like "01:30" or "00:01:30" to seconds
  function timeToSeconds(timeStr) {
    const parts = timeStr.split(":").map(Number).reverse();
    return parts.reduce(
      (total, part, index) => total + part * Math.pow(60, index),
      0
    );
  }

  const handleSeek = (timeInSeconds) => {
    if (player) {
      player.seekTo(timeInSeconds, true);
      player.playVideo();
    }
  };

  return (
    <section className="w-full h-full flex flex-col bg-gradient-to-br from-gray-900 via-slate-900 to-gray-800 overflow-hidden">
      {/* Header with Back Button */}
      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 p-4 border-b border-blue-400/20 shadow-xl">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="bg-white/20 backdrop-blur-lg rounded-xl p-2 shadow-md">
              <CheckCircle className="w-5 h-5 text-white" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-white bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
                AI Analysis Results
              </h2>
              <p className="text-blue-100 text-sm font-normal">
                {mode === "pdf" ? `${file?.name}` : "YouTube video analysis"}
              </p>
            </div>
          </div>
          <button
            onClick={onNewScan}
            className="flex items-center gap-2 px-4 py-2 text-blue-100 hover:text-white hover:bg-white/15 transition-all duration-200 rounded-lg backdrop-blur-sm border border-white/20 text-sm font-medium"
          >
            <ArrowLeft className="w-4 h-4" />
            New Scan
          </button>
        </div>
      </div>

      {/* Two-Panel Layout */}
      <div className="flex h-[calc(100vh-120px)] min-h-0">
        {/* Left Panel - Chat Section */}
        <div className="flex flex-col h-full w-3/5 min-w-0 border-r border-gray-700/50 bg-gradient-to-br from-gray-800 to-slate-800">
          {/* Chat Messages Area */}
          <div className="flex-1 overflow-y-auto p-6 space-y-4 min-h-0 bg-gradient-to-b from-gray-800/50 to-slate-800/50 custom-scrollbar">
            <div className="space-y-4">
              {messages.map((msg, index) => {
                if (msg.type === "reference-list") {
                  return (
                    <div
                      key={index}
                      className="text-sm text-gray-100 space-y-3"
                    >
                      <div className="flex items-center gap-2 text-indigo-300 font-semibold">
                        <LinkIcon className="w-4 h-4" />
                        <span>References Found</span>
                      </div>
                      <div className="space-y-2">
                        {msg.references.map((ref) => (
                          <button
                            key={ref.chunk_id}
                            onClick={() => {
                              if (mode === "pdf") {
                                jumpToHighlightArea({
                                  pageIndex: ref.page - 2,
                                });
                              } else if (
                                mode === "yt" &&
                                ref.timestamp?.start
                              ) {
                                const startTime =
                                  typeof ref.timestamp.start === "string"
                                    ? timeToSeconds(ref.timestamp.start)
                                    : ref.timestamp.start;

                                handleSeek(startTime);
                              }
                            }}
                            className="block text-left w-full break-words p-4 rounded-2xl bg-gradient-to-r from-indigo-900/40 to-purple-900/40 hover:from-indigo-900/60 hover:to-purple-900/60 transition-all duration-300 border border-indigo-500/30 hover:border-indigo-400/50 shadow-lg hover:shadow-xl transform hover:scale-102 backdrop-blur-sm"
                          >
                            <div className="flex items-start gap-3">
                              <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center shadow-md">
                                {mode === "pdf" ? (
                                  <FileText className="w-4 h-4 text-white" />
                                ) : (
                                  <span className="text-white font-bold text-xs">
                                    ⏱️
                                  </span>
                                )}
                              </div>
                              <div className="flex-1 min-w-0">
                                <div className="text-indigo-200 font-medium text-sm">
                                  {mode === "pdf"
                                    ? `Page ${ref.page}`
                                    : `Timestamp: ${ref.timestamp.start}s`}
                                </div>
                                <div className="text-gray-300 text-sm mt-1 line-clamp-2">
                                  {mode === "pdf"
                                    ? `${ref.preview.slice(0, 120)}...`
                                    : `${ref.text.slice(0, 120)}...`}
                                </div>
                              </div>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  );
                }

                return (
                  <div
                    key={index}
                    className={`flex ${
                      msg.type === "user" ? "justify-end" : "justify-start"
                    }`}
                  >
                    <div
                      className={`${
                        msg.type === "user"
                          ? "bg-gradient-to-r from-emerald-600 to-teal-600 text-white shadow-lg"
                          : msg.type === "think"
                          ? "bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-gray-100 shadow-lg border-blue-400/40 backdrop-blur-sm"
                          : "bg-gradient-to-r from-gray-700 to-slate-700 text-gray-100 shadow-lg"
                      } rounded-2xl p-5 max-w-[85%] min-w-0 border ${
                        msg.type === "user"
                          ? "border-emerald-400/30"
                          : msg.type === "think"
                          ? "border-blue-400/50"
                          : "border-gray-600/50"
                      } ${msg.type === "think" ? "relative" : ""}`}
                    >
                      {msg.type === "think" && (
                        <div className="flex items-center gap-2 mb-3 text-blue-300">
                          <Brain className="w-4 h-4" />
                          <span className="text-xs font-semibold uppercase tracking-wide">
                            AI Thinking Process
                          </span>
                        </div>
                      )}
                      {msg.type === "ai" || msg.type === "think" ? (
                        <div className="prose prose-sm prose-invert max-w-none break-words overflow-wrap-anywhere whitespace-pre-wrap">
                          <ReactMarkdown
                            components={{
                              p: ({ node, ...props }) => (
                                <p
                                  className={`${
                                    msg.type === "think"
                                      ? "text-gray-200"
                                      : "text-white"
                                  }`}
                                  {...props}
                                />
                              ),
                              strong: ({ node, ...props }) => (
                                <strong
                                  className={
                                    msg.type === "think" ? "text-blue-200" : ""
                                  }
                                  {...props}
                                />
                              ),
                              em: ({ node, ...props }) => (
                                <em
                                  className={
                                    msg.type === "think" ? "text-blue-300" : ""
                                  }
                                  {...props}
                                />
                              ),
                              code: ({ node, inline, ...props }) =>
                                inline ? (
                                  <code
                                    className={`${
                                      msg.type === "think"
                                        ? "text-blue-100 bg-blue-900/30 px-1 rounded"
                                        : ""
                                    }`}
                                    {...props}
                                  />
                                ) : (
                                  <pre
                                    className={`${
                                      msg.type === "think"
                                        ? "bg-blue-900/20 border border-blue-500/30 p-2 rounded"
                                        : ""
                                    }`}
                                  >
                                    <code {...props} />
                                  </pre>
                                ),
                            }}
                          >
                            {msg.text}
                          </ReactMarkdown>
                        </div>
                      ) : (
                        <p className="text-sm font-medium break-words whitespace-pre-wrap overflow-wrap-anywhere">
                          {msg.text}
                        </p>
                      )}
                    </div>
                  </div>
                );
              })}

              {isAnswerLoading && (
                <div className="flex justify-start">
                  <div className="bg-gradient-to-r from-gray-700/40 to-slate-700/40 rounded-2xl p-5 max-w-[85%] min-w-0 backdrop-blur-sm border border-gray-600/30 shadow-inner relative overflow-hidden group">
                    <div className="flex items-center gap-3">
                      <div className="flex space-x-1">
                        <span
                          className="w-2 h-2 bg-indigo-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0s" }}
                        ></span>
                        <span
                          className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></span>
                        <span
                          className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"
                          style={{ animationDelay: "0.4s" }}
                        ></span>
                      </div>
                      <p className="text-sm text-gray-400 font-medium">
                        Thinking...
                      </p>
                    </div>
                    <div className="absolute top-2 right-3 opacity-30 group-hover:opacity-80 transition duration-300">
                      <button
                        onClick={() => setIsAnswerLoading(false)}
                        className="text-xs text-gray-400 hover:text-gray-200 transition"
                      >
                        ✕
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Chat Input */}
          <div className="flex-shrink-0 p-6 border-t border-gray-700/50 bg-gradient-to-r from-gray-800 to-slate-800">
            <div className="flex gap-3">
              <input
                type="text"
                value={question}
                disabled={isAnswerLoading}
                onChange={(e) => setQuestion(e.target.value)}
                onKeyDown={(e) => e.key === "Enter" && handleSend()}
                placeholder="Ask a question about the content..."
                className="flex-1 min-w-0 p-4 border border-gray-600/50 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gradient-to-r from-gray-700 to-slate-700 text-gray-100 placeholder-gray-400 text-sm font-medium backdrop-blur-sm shadow-lg transition-all duration-200 hover:shadow-xl"
              />
              <button
                disabled={isAnswerLoading}
                onClick={handleSend}
                className="flex-shrink-0 px-8 py-4 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 hover:from-blue-700 hover:via-purple-700 hover:to-indigo-700 text-white rounded-2xl transition-all duration-300 disabled:opacity-50 shadow-lg hover:shadow-xl transform hover:scale-105 font-bold border border-blue-400/30"
              >
                Send
              </button>
            </div>
          </div>
        </div>

        {/* Right Panel - Content Display */}
        <div className="w-2/5 flex flex-col min-w-0 bg-gradient-to-br from-gray-800 to-slate-800">
          {/* Content Display Area */}
          <div className="flex-1 overflow-hidden min-h-0">
            {mode === "pdf" ? (
              <div className="h-full bg-gradient-to-br from-gray-800 to-slate-800 overflow-y-auto rounded-l-3xl border-l border-gray-700/50">
                {file ? (
                  <Worker workerUrl="https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js">
                    <div className="h-full overflow-y-auto bg-white rounded-l-3xl shadow-2xl">
                      <Viewer
                        ref={viewerRef}
                        fileUrl={fileUrl}
                        plugins={[
                          defaultLayoutPluginInstance,
                          highlightPluginInstance,
                        ]}
                        renderLoader={(percentages) => (
                          <div className="flex items-center justify-center h-full bg-gradient-to-br from-gray-800 to-slate-800">
                            <div className="text-center">
                              <div className="relative mb-4">
                                <div className="bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-600 rounded-full p-4 shadow-lg">
                                  <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
                                </div>
                                <div className="absolute inset-0 bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-600 rounded-full animate-pulse opacity-30"></div>
                              </div>
                              <div className="text-lg font-bold text-white mb-2">
                                Loading PDF Analysis
                              </div>
                              <div className="text-blue-200 font-medium">
                                {Math.round(percentages)}% complete
                              </div>
                            </div>
                          </div>
                        )}
                        theme={{
                          theme: "auto",
                        }}
                      />
                    </div>
                  </Worker>
                ) : (
                  <div className="text-center text-gray-300 h-full flex items-center justify-center">
                    <div className="text-center">
                      <div className="bg-gradient-to-r from-gray-600 to-slate-600 rounded-2xl p-6 shadow-lg backdrop-blur-sm border border-gray-500/30 mb-4">
                        <FileText className="w-12 h-12 mx-auto text-gray-400" />
                      </div>
                      <p className="text-lg font-medium text-gray-300">
                        PDF not loaded
                      </p>
                      <p className="text-gray-400 text-sm mt-2">
                        Please upload a PDF file to analyze
                      </p>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="h-full bg-gradient-to-br from-gray-800 to-slate-800 flex items-center justify-center rounded-l-3xl border-l border-gray-700/50">
                <div className="w-full h-full rounded-l-3xl overflow-hidden shadow-2xl">
                  {url ? (
                    <YouTube
                      videoId={getYoutubeVideoId(url)}
                      opts={{
                        width: "100%",
                        height: "100%",
                        playerVars: {
                          autoplay: 1,
                        },
                      }}
                      onReady={(e) => setPlayer(e.target)}
                      className="w-full h-full"
                    />
                  ) : (
                    <div className="text-center text-gray-300 h-full flex items-center justify-center">
                      <div className="text-center">
                        <div className="bg-gradient-to-r from-red-600 to-pink-600 rounded-2xl p-6 shadow-lg backdrop-blur-sm border border-red-400/30 mb-4">
                          <svg
                            className="w-12 h-12 mx-auto text-white"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.5a2.5 2.5 0 110 5H9m4.5-1.206a11.955 11.955 0 01-2.5 2.5"
                            />
                          </svg>
                        </div>
                        <p className="text-lg font-medium text-gray-300">
                          No video URL provided
                        </p>
                        <p className="text-gray-400 text-sm mt-2">
                          Please provide a YouTube URL to analyze
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </section>
  );
}

export default Model2results;



================================================
FILE: frontend/src/components/MultiMCQForm.jsx
================================================
// components/MultiMCQForm.jsx
import React, { useState } from "react";
import { generateMultiVideoMCQs } from "../utils/api";

const MultiMCQForm = () => {
  const [videoUrls, setVideoUrls] = useState(["", "", "", ""]);
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [error, setError] = useState("");

  const handleChange = (index, value) => {
    const updated = [...videoUrls];
    updated[index] = value;
    setVideoUrls(updated);
  };

  const handleSubmit = async () => {
    setLoading(true);
    setError("");
    setResults(null);

    try {
      const data = await generateMultiVideoMCQs(videoUrls);
      setResults(data);
    } catch (err) {
      setError("Could not generate MCQs. Please check your video URLs.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 max-w-xl mx-auto">
      <h2 className="text-xl font-bold mb-2">Enter 4 YouTube Video URLs</h2>
      {videoUrls.map((url, i) => (
        <input
          key={i}
          className="w-full mb-2 p-2 border rounded"
          placeholder={`Video URL ${i + 1}`}
          value={url}
          onChange={(e) => handleChange(i, e.target.value)}
        />
      ))}

      <button
        onClick={handleSubmit}
        disabled={loading}
        className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
      >
        {loading ? "Generating..." : "Generate MCQs"}
      </button>

      {error && <p className="text-red-600 mt-4">{error}</p>}

      {results && (
        <div className="mt-6">
          <h3 className="font-semibold mb-2">Generated MCQs ({results.total_questions})</h3>
          <pre className="bg-gray-100 p-2 rounded overflow-auto max-h-96">{JSON.stringify(results.questions, null, 2)}</pre>
        </div>
      )}
    </div>
  );
};

export default MultiMCQForm;



================================================
FILE: frontend/src/components/QuizLoading.jsx
================================================
import React from "react";
import { 
  Brain, 
  Sparkles, 
  BookOpen, 
  Target, 
  Zap, 
  Clock,
  CheckCircle,
  Loader2
} from "lucide-react";

const QuizLoading = () => {
  return (
    <div className="min-h-screen p-6 overflow-x-hidden">
      <div className="max-w-3xl mx-auto space-y-8">

        {/* Main Loading Section */}
        <div className="bg-gradient-to-br from-gray-800 via-slate-800 to-gray-900 rounded-3xl shadow-2xl border border-gray-700/50 overflow-hidden">
          <div className=" p-6">
            <div className="flex items-center gap-4">
              <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-3 shadow-lg">
                <Sparkles className="w-7 h-7 text-white" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-white">
                  AI is Generating Your Quiz
                </h2>
                <p className="text-purple-100 font-medium">
                  Please wait while we analyze your videos and create intelligent questions
                </p>
              </div>
            </div>
          </div>

          <div className="p-8">
            {/* Central Loading Animation */}
            <div className="flex flex-col items-center justify-center space-y-6 mb-8">
              <div className="relative">
                {/* Outer rotating ring */}
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-600 rounded-full p-1 animate-spin">
                  <div className="bg-gray-800 rounded-full w-20 h-20"></div>
                </div>
                
                {/* Inner brain icon */}
                <div className="relative bg-gradient-to-r from-purple-500 via-indigo-500 to-blue-600 rounded-full p-5 shadow-lg">
                  <Brain className="w-10 h-10 text-white animate-pulse" />
                </div>
                
                {/* Floating sparkles */}
                <div className="absolute -top-2 -right-2 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full p-2 animate-bounce">
                  <Sparkles className="w-3 h-3 text-white" />
                </div>
                <div className="absolute -bottom-2 -left-2 bg-gradient-to-r from-pink-400 to-red-500 rounded-full p-2 animate-bounce delay-75">
                  <Zap className="w-3 h-3 text-white" />
                </div>
              </div>
              
              <div className="text-center">
                <h3 className="text-2xl font-bold text-gray-100 mb-2">
                  Crafting Your Personalized Quiz
                </h3>
                <p className="text-gray-300 font-medium">
                  Our AI is analyzing video content to create meaningful questions just for you
                </p>
              </div>
            </div>

            {/* Progress Steps */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="group bg-gradient-to-r from-gray-700 to-slate-800 rounded-xl p-4 border border-gray-600/50 transform hover:scale-105 transition-all duration-300">
                <div className="flex items-center gap-3 mb-3">
                  <div className="bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl p-2 shadow-lg">
                    <BookOpen className="w-5 h-5 text-white" />
                  </div>
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-gray-100">Analyzing Content</h4>
                  </div>
                  <div className="bg-green-500/20 rounded-full p-1">
                    <CheckCircle className="w-4 h-4 text-green-400" />
                  </div>
                </div>
                <p className="text-gray-300 font-medium text-sm">
                  Processing video transcripts and identifying key learning points
                </p>
              </div>

              <div className="group bg-gradient-to-r from-gray-700 to-slate-800 rounded-xl p-4 border border-gray-600/50 transform hover:scale-105 transition-all duration-300">
                <div className="flex items-center gap-3 mb-3">
                  <div className="bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl p-2 shadow-lg">
                    <Target className="w-5 h-5 text-white" />
                  </div>
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-gray-100">Creating Questions</h4>
                  </div>
                  <div className="bg-blue-500/20 rounded-full p-1">
                    <Loader2 className="w-4 h-4 text-blue-400 animate-spin" />
                  </div>
                </div>
                <p className="text-gray-300 font-medium text-sm">
                  Generating intelligent multiple-choice questions with explanations
                </p>
              </div>

              <div className="group bg-gradient-to-r from-gray-700 to-slate-800 rounded-xl p-4 border border-gray-600/50 transform hover:scale-105 transition-all duration-300 opacity-60">
                <div className="flex items-center gap-3 mb-3">
                  <div className="bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl p-2 shadow-lg">
                    <Sparkles className="w-5 h-5 text-white" />
                  </div>
                  <div className="flex-1">
                    <h4 className="text-lg font-bold text-gray-100">Finalizing Quiz</h4>
                  </div>
                  <div className="bg-gray-500/20 rounded-full p-1">
                    <Clock className="w-4 h-4 text-gray-400" />
                  </div>
                </div>
                <p className="text-gray-300 font-medium text-sm">
                  Preparing your personalized learning experience
                </p>
              </div>
            </div>

            {/* Loading Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
              <div className="bg-gradient-to-r from-blue-600/20 to-indigo-600/20 rounded-xl p-3 border border-blue-500/30 text-center">
                <div className="text-xl font-bold text-blue-300 mb-1">AI</div>
                <div className="text-xs text-blue-200 font-medium">Powered</div>
              </div>
              <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-xl p-3 border border-purple-500/30 text-center">
                <div className="text-xl font-bold text-purple-300 mb-1">âˆž</div>
                <div className="text-xs text-purple-200 font-medium">Possibilities</div>
              </div>
              <div className="bg-gradient-to-r from-emerald-600/20 to-teal-600/20 rounded-xl p-3 border border-emerald-500/30 text-center">
                <div className="text-xl font-bold text-emerald-300 mb-1">100%</div>
                <div className="text-xs text-emerald-200 font-medium">Personalized</div>
              </div>
              <div className="bg-gradient-to-r from-orange-600/20 to-red-600/20 rounded-xl p-3 border border-orange-500/30 text-center">
                <div className="text-xl font-bold text-orange-300 mb-1">âš¡</div>
                <div className="text-xs text-orange-200 font-medium">Smart</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuizLoading;


================================================
FILE: frontend/src/components/Resources.jsx
================================================
import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import {
  BookOpen,
  Sparkles,
  GraduationCap,
  AlertCircle,
  Play,
  ExternalLink,
  Loader2,
  ChevronDown,
  ArrowRight,
  Target,
  Zap,
} from "lucide-react";
import ResultsView from "./ResultsView"; // Adjust the import path
import { getFirebaseIdToken } from "../utils/firebase"; // Adjust the import path
import Model1history from "./Model1history";
import { getCsrfToken } from "../utils/api"; // Adjust the import path
import LoadingScreen from "./LoadingScreen"; // Adjust the import path

function Resources() {
  const [topic, setTopic] = useState("");
  const [grade, setGrade] = useState("");
  const [chapters, setChapters] = useState([]);
  const [error, setError] = useState("");
  const [formError, setFormError] = useState("");
  const [loading, setLoading] = useState(false);
  const [videos, setVideos] = useState([]);
  const [websites, setWebsites] = useState([]);
  const [activeTab, setActiveTab] = useState("form");
  const [chapterHistory, setChapterHistory] = useState([]);
  const [fromHistory, setFromHistory] = useState(false);

  const gradeOptions = [
    { value: "school", label: "Elementary School", icon: "ðŸŽ’" },
    { value: "high school", label: "High School", icon: "ðŸ“š" },
    { value: "college", label: "College", icon: "ðŸŽ“" },
    { value: "phd", label: "PhD Level", icon: "ðŸ”¬" },
  ];

  const API_BASE = import.meta.env.VITE_API_BASE;

  const generateChapters = async () => {
    if (loading) return;
    if (!topic.trim() || !grade.trim()) {
      setFormError("Please fill in both the topic and grade.");
      setChapters([]);
      return;
    }

    setLoading(true);
    try {
      const csrfToken = await getCsrfToken();
      const firebaseIdToken = await getFirebaseIdToken();

      const res = await axios.post(
        `${API_BASE}/chapters/`,
        { topic, grade },
        {
          withCredentials: true,
          headers: {
            "X-CSRFToken": csrfToken,
            "Content-Type": "application/json",
            Authorization: `Bearer ${firebaseIdToken}`, // Include Firebase ID token if needed
          },
        }
      );
      console.log("Response from server:", res.data);

      setChapters(res.data?.data?.chapters || []);
      setError("");
      setFormError("");
      setActiveTab("results");
    } catch (err) {
      setError(err.response?.data?.error || "Something went wrong");
      setChapters([]);
    } finally {
      setLoading(false);
    }
  };

  const fetchVideoResources = async (chapter) => {
    if (!topic?.trim()) return setError("Topic cannot be blank");
    if (!grade?.trim()) return setError("Grade cannot be blank");
    if (!chapter) return setError("Chapter cannot be blank");

    try {
      setError("");
      const idToken = await getFirebaseIdToken();
      const csrfToken = await getCsrfToken();

      const res = await axios.post(
        `${API_BASE}/videos/`,
        { topic, grade, chapter },
        {
          withCredentials: true,
          headers: {
            "X-CSRFToken": csrfToken,
            "Content-Type": "application/json",
            Authorization: `Bearer ${idToken}`, // Include Firebase ID token if needed
          },
        }
      );

      console.log("Video response:", res.data.data.videos);
      setVideos(res.data?.data?.videos || []);
    } catch (err) {
      const backendMsg = err?.response?.data?.error;
      setError(backendMsg || err.message || "Failed to fetch videos");
      setVideos([]);
    }
  };

  const fetchWebResources = async ({ topic, grade, chapter }) => {
    const csrfToken = await getCsrfToken();
    const idToken = await getFirebaseIdToken();
    const res = await axios.post(
      `${API_BASE}/websites/`,
      { topic, grade, chapter },
      {
        withCredentials: true,
        headers: {
          "X-CSRFToken": csrfToken,
          "Content-Type": "application/json",
          Authorization: `Bearer ${idToken}`, // Include Firebase ID token if needed
        },
      }
    );

    return res.data?.data?.websites || [];
  };
  const getSelectedGradeOption = () => {
    return gradeOptions.find((option) => option.value === grade);
  };

  useEffect(() => {
    if (fromHistory) {
      const chapterNames = chapterHistory.map((item) => item.name);
      setChapters(chapterNames); // âœ… now chapters is just an array of strings
      console.log("Chapter names:", chapterNames);

      setActiveTab("results");
    }
  }, [fromHistory, chapterHistory]);

  return (
    <div className="min-h-screen p-4">
      {loading && (
        <div className="fixed inset-0 z-50 bg-white/60 dark:bg-slate-900/60 backdrop-blur-sm flex flex-col items-center justify-center">
          <LoadingScreen />
        </div>
      )}

      <div className="max-w-4xl mx-auto space-y-8">
        {/* Enhanced Form Tab */}
        {activeTab === "form" && (
          <div className="space-y-8">
            {/* Main Form Card */}
            <div className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-lg rounded-2xl shadow-xl border border-slate-200/50 dark:border-slate-700/50 overflow-hidden">
              {/* Animated Header */}
              <div className="relative bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 p-8">
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 via-purple-500/20 to-pink-500/20 backdrop-blur-sm"></div>
                <div className="relative flex items-center gap-4">
                  <div className="p-4 bg-white/20 backdrop-blur-sm rounded-xl border border-white/30">
                    <BookOpen className="w-8 h-8 text-white" />
                  </div>
                  <div>
                    <h2 className="text-3xl font-bold text-white">
                      Create Your Learning Path
                    </h2>
                    <p className="text-white/90 text-lg mt-1">
                      Generate comprehensive chapter outlines tailored to your
                      level
                    </p>
                  </div>
                </div>
                {/* Floating decoration */}
                <div className="absolute top-4 right-4 w-20 h-20 bg-white/10 rounded-full blur-xl animate-pulse"></div>
                <div className="absolute bottom-4 right-8 w-16 h-16 bg-white/10 rounded-full blur-lg animate-pulse"></div>
              </div>

              {/* Enhanced Form Content */}
              <div className="p-8 space-y-8">
                {/* Topic Input with Enhanced Styling */}
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <Target className="w-5 h-5 text-blue-500" />
                    <label className="text-lg font-semibold text-slate-700 dark:text-slate-300">
                      What would you like to learn?
                    </label>
                  </div>
                  <div className="relative group">
                    <input
                      type="text"
                      placeholder="Enter your topic (e.g., Machine Learning, History of Rome, Quantum Physics)"
                      value={topic}
                      onChange={(e) => setTopic(e.target.value)}
                      className="w-full p-4 pl-12 text-lg border-2 border-slate-200 dark:border-slate-600 rounded-xl focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 group-hover:border-blue-300 dark:group-hover:border-blue-400"
                    />
                    <Sparkles className="absolute left-4 top-4 w-6 h-6 text-blue-500 group-focus-within:animate-pulse" />
                    <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/0 via-purple-500/0 to-pink-500/0 group-focus-within:from-blue-500/5 group-focus-within:via-purple-500/5 group-focus-within:to-pink-500/5 transition-all duration-300 pointer-events-none"></div>
                  </div>
                </div>

                {/* Grade Level Select with Enhanced Design */}
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    <GraduationCap className="w-5 h-5 text-purple-500" />
                    <label className="text-lg font-semibold text-slate-700 dark:text-slate-300">
                      Choose your academic level
                    </label>
                  </div>
                  <div className="relative group">
                    <select
                      value={grade}
                      onChange={(e) => setGrade(e.target.value)}
                      className="w-full p-4 pl-12 pr-12 text-lg border-2 border-slate-200 dark:border-slate-600 rounded-xl focus:outline-none focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 transition-all duration-300 bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100 appearance-none cursor-pointer group-hover:border-purple-300 dark:group-hover:border-purple-400"
                    >
                      <option value="">Select your academic level</option>
                      {gradeOptions.map((option) => (
                        <option key={option.value} value={option.value}>
                          {option.icon} {option.label}
                        </option>
                      ))}
                    </select>
                    <GraduationCap className="absolute left-4 top-4 w-6 h-6 text-purple-500 group-focus-within:animate-pulse" />
                    <ChevronDown className="absolute right-4 top-4 w-6 h-6 text-slate-400 group-focus-within:text-purple-500 transition-colors duration-200" />
                  </div>
                </div>

                {/* Selected Grade Preview */}
                {grade && (
                  <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-slate-50 to-blue-50 dark:from-slate-700 dark:to-slate-600 rounded-xl border border-slate-200 dark:border-slate-600 transition-all duration-300">
                    <div
                      className={`w-3 h-3 rounded-full bg-gradient-to-r ${
                        getSelectedGradeOption()?.color ||
                        "from-blue-400 to-purple-500"
                      }`}
                    ></div>
                    <span className="text-sm font-medium text-slate-700 dark:text-slate-300">
                      Selected: {getSelectedGradeOption()?.icon}{" "}
                      {getSelectedGradeOption()?.label}
                    </span>
                  </div>
                )}

                {/* Enhanced Error Display */}
                {formError && (
                  <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 border-2 border-red-200 dark:border-red-800 rounded-xl transition-all duration-300">
                    <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0 animate-pulse" />
                    <p className="text-red-700 dark:text-red-400 font-medium">
                      {formError}
                    </p>
                  </div>
                )}

                {/* Enhanced Generate Button */}
                <button
                  onClick={generateChapters}
                  disabled={loading}
                  className={`w-full font-bold py-4 px-8 rounded-xl text-lg transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-offset-2 transform hover:scale-[1.02] active:scale-[0.98] ${
                    loading
                      ? "bg-slate-400 cursor-not-allowed scale-100"
                      : "bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 hover:from-blue-700 hover:via-purple-700 hover:to-pink-700 shadow-lg hover:shadow-xl focus:ring-blue-500/50"
                  } text-white relative overflow-hidden group`}
                >
                  {/* Button background animation */}
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 opacity-0 group-hover:opacity-20 transition-opacity duration-300"></div>

                  {loading ? (
                    <span className="flex items-center justify-center gap-3">
                      <Loader2 className="w-6 h-6 animate-spin" />
                      <span>Generating Amazing Chapters...</span>
                      <div className="flex gap-1">
                        <div className="w-1 h-1 bg-white/60 rounded-full animate-bounce"></div>
                        <div
                          className="w-1 h-1 bg-white/60 rounded-full animate-bounce"
                          style={{ animationDelay: "0.1s" }}
                        ></div>
                        <div
                          className="w-1 h-1 bg-white/60 rounded-full animate-bounce"
                          style={{ animationDelay: "0.2s" }}
                        ></div>
                      </div>
                    </span>
                  ) : (
                    <span className="flex items-center justify-center gap-3 relative">
                      <Zap className="w-6 h-6 group-hover:animate-pulse" />
                      <span>Generate Chapters</span>
                      <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform duration-200" />
                    </span>
                  )}
                </button>
              </div>
            </div>

            {/* Enhanced History Section */}
            <div className="bg-white/90 dark:bg-slate-800/90 backdrop-blur-lg rounded-2xl shadow-lg border border-slate-200/50 dark:border-slate-700/50 overflow-hidden">
              <div className="p-6 border-b border-slate-200 dark:border-slate-700">
                <h3 className="text-xl font-bold text-slate-800 dark:text-slate-200 flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  Recent Learning Sessions
                </h3>
                <p className="text-slate-600 dark:text-slate-400 mt-1">
                  Continue from where you left off
                </p>
              </div>
              <div className="p-6">
                <Model1history
                  setFromHistory={setFromHistory}
                  setChapterHistory={setChapterHistory}
                  loading={loading}
                  setLoading={setLoading}
                />
              </div>
            </div>
          </div>
        )}

        {/* Enhanced Results Tab */}
        {activeTab === "results" && (
          <div className="transition-all duration-500 ease-in-out">
            <ResultsView
              chapters={chapters}
              videos={videos}
              websites={websites}
              error={error}
              setError={setError}
              topic={topic}
              fetchVideoResources={fetchVideoResources}
              fetchWebResources={fetchWebResources}
              grade={grade}
              setVideos={setVideos}
              setWebsites={setWebsites}
              fromHistory={fromHistory}
              chapterHistory={chapterHistory}
              onBack={() => setActiveTab("form")}
            />
          </div>
        )}
      </div>
    </div>
  );
}

export default Resources;



================================================
FILE: frontend/src/components/ResultsView.jsx
================================================
import React, { useState } from "react";
import {
  BookOpen,
  ExternalLink,
  Play,
  AlertCircle,
  Loader2,
  ArrowLeft,
  Sparkles,
  Clock,
  Target,
} from "lucide-react";
import { generateMultiVideoMCQs } from "../utils/contentScan";
import { useNavigate } from "react-router-dom";
import { useQuiz } from "../contexts/QuizContext";
import QuizLoading from "./QuizLoading";

function ResultsView({
  chapters,
  videos,
  websites,
  error,
  topic,
  grade,
  fromHistory,
  setError,
  fetchVideoResources,
  fetchWebResources,
  setVideos,
  setWebsites,
  activeTab,
  setActiveTab,
  chapterHistory,
  onBack,
}) {
  const [loading, setLoading] = useState(false);
  const [quizLoading, setQuizLoading] = useState(false);
  const [showQuizNotice, setShowQuizNotice] = useState(false);

  const navigate = useNavigate();
  const { setQuestions, setUserAnswers, setCurrent, setShowResults } =
    useQuiz();
  const handleChapterClick = async (chapter) => {
    if (!chapter) return setError("Chapter cannot be blank");

    // Reset previous resources and error
    setVideos([]);
    setWebsites([]);
    setError("");

    // Get the index of the clicked chapter
    const chapterIndex = chapters.findIndex(
      (ch) => ch.toLowerCase().trim() === chapter.toLowerCase().trim()
    );

    if (chapterIndex === -1) {
      return setError("Chapter not found in list.");
    }

    // Apply your logic here
    if (fromHistory) {
      const historyItem = chapterHistory[chapterIndex];

      if (historyItem) {
        setVideos(historyItem.videos || []);
        setWebsites(historyItem.websites || []);
      } else {
        setError("No history found for this chapter.");
      }
    } else {
      if (!topic?.trim()) return setError("Topic cannot be blank");
      if (!grade?.trim()) return setError("Grade cannot be blank");

      try {
        setLoading(true);
        await fetchVideoResources(chapter);
        const websitesArr = await fetchWebResources({ topic, grade, chapter });
        setWebsites(websitesArr);
      } catch (err) {
        const backendMsg = err?.response?.data?.error;
        setError(backendMsg || err.message || "Failed to fetch resources");
        setVideos([]);
        setWebsites([]);
      } finally {
        setLoading(false);
      }
    }
  };

  const handleGenerateQuiz = async () => {
    // setShowQuizNotice(true);
    // console.log("Generating quiz for these videos:", videos);
     setQuizLoading(true); // start loading

     try {
       const res = await generateMultiVideoMCQs(videos);
       if (res.error) {
         setError(res.error);
       } else {
         console.log("Quiz generated successfully:", res);
         setQuestions(res.questions);
         setUserAnswers({});
         setCurrent(0);
         navigate("/quiz");
       }
     } catch (err) {
       setError(err.message || "Failed to generate quiz");
     } finally {
       setQuizLoading(false); // stop loading
     }
  };

  return (
    <div className="min-h-screen p-6 overflow-x-hidden">
      {quizLoading && (
        <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex flex-col items-center justify-center">
          <QuizLoading />
        </div>
      )}
      {showQuizNotice && (
        <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center">
          <div className="max-w-lg w-full bg-gradient-to-br from-yellow-900 to-orange-900 border border-yellow-500/30 rounded-3xl p-8 shadow-2xl text-white space-y-6 relative">
            <button
              onClick={() => setShowQuizNotice(false)}
              className="absolute top-3 right-4 text-yellow-300 hover:text-white text-lg font-bold"
            >
              ✖
            </button>
            <div className="flex items-center gap-4">
              <div className="bg-yellow-600 p-3 rounded-full">
                <AlertCircle className="w-6 h-6 text-white" />
              </div>
              <div>
                <h2 className="text-xl font-bold text-yellow-200">
                  ⚠️ Quiz Generation Unavailable
                </h2>
                <p className="text-yellow-100 mt-1">
                  Due to memory limits on the current server deployment, quiz
                  generation is temporarily disabled. We're working on
                  optimizing resources. Please check back soon.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-3xl p-8 text-white shadow-2xl border border-blue-400/20">
          <button
            onClick={onBack}
            className="inline-flex items-center gap-2 text-blue-100 hover:text-white hover:bg-white/15 px-4 py-2 rounded-xl transition-all duration-200 mb-6 backdrop-blur-sm"
          >
            <ArrowLeft className="w-4 h-4" />
            Back to input
          </button>

          <div className="flex items-center gap-4 mb-4">
            <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-4 shadow-lg">
              <Target className="w-8 h-8 text-blue-100" />
            </div>
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
                AI Learning Hub
              </h1>
              <p className="text-blue-100 text-lg font-medium">
                Discover personalized educational resources powered by AI
              </p>
            </div>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="bg-gradient-to-r from-red-900/40 to-pink-900/40 border border-red-500/50 rounded-2xl p-6 shadow-lg backdrop-blur-sm">
            <div className="flex items-center gap-3">
              <div className="bg-red-500/20 rounded-full p-2">
                <AlertCircle className="w-5 h-5 text-red-400" />
              </div>
              <div>
                <h3 className="font-bold text-red-300">Error Detected</h3>
                <p className="text-red-200 font-medium">{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Generated Chapters */}
        {chapters.length > 0 && (
          <div className="bg-gradient-to-br from-gray-800 via-slate-800 to-gray-900 rounded-3xl shadow-2xl overflow-hidden border border-gray-700/50">
            <div className="bg-gradient-to-r from-blue-600 to-indigo-700 p-6 border-b border-gray-700/30">
              <div className="flex items-center gap-4">
                <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-3 shadow-lg">
                  <BookOpen className="w-7 h-7 text-white" />
                </div>
                <div className="flex-1">
                  <h2 className="text-3xl font-bold text-white">
                    AI-Generated Chapters
                  </h2>
                  <p className="text-blue-100 font-medium">
                    Click on any chapter to explore AI-curated resources
                  </p>
                </div>
                <div className="bg-white/20 backdrop-blur-lg text-white px-5 py-2 rounded-full font-bold border border-white/30">
                  {chapters.length} chapters
                </div>
              </div>
            </div>

            <div className="p-8">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {chapters.map((chapter, i) => (
                  <div
                    key={i}
                    onClick={() => handleChapterClick(chapter)}
                    className="group relative bg-gradient-to-br from-gray-700 to-slate-800 hover:from-gray-600 hover:to-slate-700 rounded-2xl p-6 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:shadow-xl border border-gray-600/50 hover:border-indigo-500/50"
                  >
                    <div className="flex items-start gap-4">
                      <div className="flex-shrink-0 w-14 h-14 bg-gradient-to-br from-blue-500 via-purple-500 to-indigo-600 rounded-2xl flex items-center justify-center text-white font-bold text-lg shadow-lg">
                        {i + 1}
                      </div>
                      <div className="flex-1">
                        <h3 className="text-gray-100 font-bold group-hover:text-indigo-300 transition-colors leading-relaxed overflow-hidden text-ellipsis break-words">
                          {chapter}
                        </h3>
                        <div className="flex items-center gap-2 mt-3 text-gray-400">
                          <Clock className="w-4 h-4 text-blue-400" />
                          <span className="text-sm font-medium">
                            Click to explore
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-500/0 to-indigo-500/0 group-hover:from-blue-500/10 group-hover:to-indigo-500/20 rounded-2xl transition-all duration-300" />
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Loading State */}
        {loading && (
          <div className="bg-gradient-to-br from-gray-800 to-slate-900 rounded-3xl shadow-2xl border border-gray-700/50 p-12">
            <div className="flex flex-col items-center justify-center space-y-6">
              <div className="relative">
                <div className="bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-600 rounded-full p-6 shadow-lg">
                  <Loader2 className="w-10 h-10 text-white animate-spin" />
                </div>
                <div className="absolute inset-0 bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-600 rounded-full animate-pulse opacity-30" />
              </div>
              <div className="text-center">
                <h3 className="text-2xl font-bold text-gray-100 mb-2">
                  AI is Processing Resources
                </h3>
                <p className="text-gray-400 font-medium">
                  Our AI is curating the best personalized learning materials
                  for you...
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Resources Grid */}
        {(videos.length > 0 || websites.length > 0) && (
          <div className="space-y-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Videos Section */}
              {videos.length > 0 && (
                <div className="bg-gradient-to-br from-gray-800 to-red-900/20 rounded-3xl shadow-2xl border border-gray-700/50 overflow-hidden">
                  <div className="bg-gradient-to-r from-red-600 to-pink-700 p-6 border-b border-gray-700/30">
                    <div className="flex items-center gap-4">
                      <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-3 shadow-lg">
                        <Play className="w-7 h-7 text-white" />
                      </div>
                      <div className="flex-1">
                        <h3 className="text-2xl font-bold text-white">
                          AI-Curated Videos
                        </h3>
                        <p className="text-red-100 font-medium">
                          Personalized video content for visual learning
                        </p>
                      </div>
                      <div className="bg-white/20 backdrop-blur-lg text-white px-5 py-2 rounded-full font-bold border border-white/30">
                        {videos.length} videos
                      </div>
                    </div>
                  </div>

                  <div className="p-6 space-y-4">
                    {videos.map((v, i) => (
                      <a
                        key={i}
                        href={v.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="group flex items-center gap-4 p-5 bg-gradient-to-r from-gray-700 to-red-900/20 hover:from-red-900/20 hover:to-pink-900/20 rounded-2xl border border-gray-600/50 hover:border-pink-500/50 transition-all duration-300 transform hover:scale-102 hover:shadow-lg"
                      >
                        <div className="flex-shrink-0 w-14 h-14 bg-gradient-to-br from-red-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg">
                          <Play className="w-6 h-6 text-white" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <h4 className="text-gray-100 font-bold group-hover:text-red-300 transition-colors overflow-hidden text-ellipsis break-words">
                            {v.title}
                          </h4>
                          <p className="text-gray-400 text-sm mt-1 font-medium">
                            Click to watch AI-recommended video
                          </p>
                        </div>
                        <div className="flex-shrink-0 bg-gray-600 rounded-full p-2 shadow-sm group-hover:shadow-md transition-shadow border border-gray-500/50">
                          <ExternalLink className="w-5 h-5 text-gray-300 group-hover:text-red-400 transition-colors" />
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              )}

              {/* Websites Section */}
              {websites.length > 0 && (
                <div className="bg-gradient-to-br from-gray-800 to-emerald-900/20 rounded-3xl shadow-2xl border border-gray-700/50 overflow-hidden">
                  <div className="bg-gradient-to-r from-emerald-600 to-teal-700 p-6 border-b border-gray-700/30">
                    <div className="flex items-center gap-4">
                      <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-3 shadow-lg">
                        <ExternalLink className="w-7 h-7 text-white" />
                      </div>
                      <div className="flex-1">
                        <h3 className="text-2xl font-bold text-white">
                          AI-Selected Resources
                        </h3>
                        <p className="text-emerald-100 font-medium">
                          Intelligent reading materials and references
                        </p>
                      </div>
                      <div className="bg-white/20 backdrop-blur-lg text-white px-5 py-2 rounded-full font-bold border border-white/30">
                        {websites.length} sites
                      </div>
                    </div>
                  </div>

                  <div className="p-6 space-y-4">
                    {websites.map((w, i) => (
                      <a
                        key={i}
                        href={w.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="group flex items-center gap-4 p-5 bg-gradient-to-r from-gray-700 to-emerald-900/20 hover:from-emerald-900/20 hover:to-teal-900/20 rounded-2xl border border-gray-600/50 hover:border-teal-500/50 transition-all duration-300 transform hover:scale-102 hover:shadow-lg"
                      >
                        <div className="flex-shrink-0 w-14 h-14 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center shadow-lg">
                          <ExternalLink className="w-6 h-6 text-white" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <h4 className="text-gray-100 font-bold group-hover:text-emerald-300 transition-colors overflow-hidden text-ellipsis break-words">
                            {w.title}
                          </h4>
                          <p className="text-gray-400 text-sm mt-1 font-medium">
                            Click to visit AI-recommended website
                          </p>
                        </div>
                        <div className="flex-shrink-0 bg-gray-600 rounded-full p-2 shadow-sm group-hover:shadow-md transition-shadow border border-gray-500/50">
                          <ExternalLink className="w-5 h-5 text-gray-300 group-hover:text-emerald-400 transition-colors" />
                        </div>
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Generate Quiz Button */}
            {videos.length > 0 && (
              <div className="flex justify-center">
                <button
                  onClick={handleGenerateQuiz}
                  className="group relative bg-gradient-to-r from-purple-600 via-indigo-600 to-blue-600 hover:from-purple-700 hover:via-indigo-700 hover:to-blue-700 text-white font-bold px-10 py-5 rounded-2xl shadow-2xl hover:shadow-3xl transition-all duration-300 transform hover:scale-105 border border-purple-300/30"
                >
                  <div className="flex items-center gap-3">
                    <Sparkles className="w-6 h-6" />
                    <span className="text-lg">Generate AI Quiz</span>
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-400 via-indigo-400 to-blue-400 rounded-2xl blur opacity-0 group-hover:opacity-30 transition-opacity duration-300" />
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default ResultsView;



================================================
FILE: frontend/src/components/Scanner.jsx
================================================
// Scanner.jsx
import React, { useState, useEffect, useMemo, useRef } from "react";
import { uploadPdf, analyzeYoutube } from "../utils/contentScan";
import { Viewer, Worker, SpecialZoomLevel } from "@react-pdf-viewer/core";
import { defaultLayoutPlugin } from "@react-pdf-viewer/default-layout";
import { highlightPlugin } from "@react-pdf-viewer/highlight";
import "@react-pdf-viewer/core/lib/styles/index.css";
import "@react-pdf-viewer/default-layout/lib/styles/index.css";
import Model2history from "./Model2history";
import ScannerLoading from "./ScannerLoading";

import { fetchUserPDFList } from "../utils/contentScan";
import {
  Upload,
  FileText,
  Link as LinkIcon,
  Loader2,
  AlertCircle,
  ScanLine,
  CheckCircle,
  ArrowLeft,
  Sparkles,
  Brain,
  Zap,
  Target,
  PlayCircle,
  BookOpen,
  Shield,
  Lightbulb,
} from "lucide-react";
import Model2results from "./Model2results";

/**
 * If you're working with Django + CSRF, keep your existing util:
 *   import { getCsrfToken } from "../utils/api";
 * and add an X‑CSRFToken header the same way you already do.
 */

const API_BASE = import.meta.env.VITE_API_BASE;

/**
 * Endpoints (adjust to match your backend):
 *   POST `${API_BASE}/analyze/pdf`   – multipart/form‑data with key `file`
 *   POST `${API_BASE}/analyze/yt`    – JSON { "url": "<YouTube link>" }
 * Your backend should return JSON like { ok: true, data: … } or { error: "…" }.
 */

function Scanner() {
  const [mode, setMode] = useState("pdf"); // "pdf" | "yt"
  const [file, setFile] = useState(null); // File object for PDF
  const [url, setUrl] = useState(""); // YouTube URL
  const [isLoading, setIsLoading] = useState(false);
  const [response, setResponse] = useState(null); // Backend result
  const [error, setError] = useState("");
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isLoaded, setIsLoaded] = useState(false);
  const viewerRef = useRef(null);

  const [activeTab, setActiveTab] = useState("form");
  const [question, setQuestion] = useState("");
  const [messages, setMessages] = useState([
    {
      type: "ai",
      text: `Hello! I've analyzed your ${
        mode === "pdf" ? "PDF document" : "YouTube video"
      }. What would you like to know about it?`,
    },
  ]); // "form" | "results"
  const defaultLayoutPluginInstance = defaultLayoutPlugin();

  // Enhanced mode options with better descriptions and icons
  const modeOptions = [
    {
      value: "pdf",
      label: "PDF Document",
      icon: FileText,
      description: "Transform PDFs into interactive learning experiences",
      placeholder: "Choose a PDF file to analyze",
      gradient: "from-orange-500 via-red-500 to-pink-600",
      emoji: "📄",
      features: [
        "Extract key concepts",
        "Generate summaries",
        "Create study guides",
        "Auto-highlight important text",
      ],
    },
    {
      value: "yt",
      label: "YouTube Video",
      icon: PlayCircle,
      description: "Convert video content into structured knowledge",
      placeholder: "https://www.youtube.com/watch?v=...",
      gradient: "from-red-500 via-pink-500 to-purple-600",
      emoji: "🎥",
      features: [
        "Auto-generate timestamps",
        "Extract transcripts",
        "Create chapter summaries",
        "Generate quiz questions",
      ],
    },
  ];

  const fileUrl = useMemo(
    () => (file ? URL.createObjectURL(file) : null),
    [file]
  );

  useEffect(() => {
    setIsLoaded(true);
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  useEffect(() => {
    if (viewerRef.current) {
      viewerRef.current.zoom(SpecialZoomLevel.ActualSize); // 100% zoom
    }
  }, [fileUrl]);

  const highlightPluginInstance = highlightPlugin();
  const { jumpToHighlightArea, highlightAreas, setHighlightAreas } =
    highlightPluginInstance;

  /* ---------- handlers ---------- */
  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0] ?? null;
    setFile(selectedFile);
    console.log("Selected file:", selectedFile);
    setError("");
  };

  const handleUrlChange = (e) => {
    setUrl(e.target.value);
    setError("");
  };

  const handleModeChange = (newMode) => {
    setMode(newMode);
    // clear previous inputs so user doesn't accidentally send wrong thing
    setFile(null);
    setUrl("");
    setResponse(null);
    setError("");
  };

const handleSubmit = async (e) => {
  e.preventDefault();
  setError("");
  setResponse(null);

  try {
    if (mode === "pdf") {
      if (!file) return setError("Please choose a PDF file to analyze.");
      setIsLoading(true); // <-- Move it here
      let data = await uploadPdf(file);
      setResponse(data);
      setActiveTab("results");
      return;
    }

    if (mode === "yt") {
      if (!url.trim())
        return setError("Please paste a YouTube link to analyze.");
      setIsLoading(true); // <-- Move it here
      let data = await analyzeYoutube(url);
      console.log("YouTube analysis response:", data);
      setResponse(data);
      setActiveTab("results");
      return;
    }
  } catch (err) {
    console.error(err);
    setError(
      err.response?.data?.error ||
        err.message ||
        "Something went wrong. Please try again."
    );
  } finally {
    setIsLoading(false);
  }
};


  const getCurrentModeConfig = () => {
    return modeOptions.find((option) => option.value === mode);
  };

  const handleNewScan = () => {
    setActiveTab("form");
    setResponse(null);
    setError("");
    setFile(null);
    setUrl("");
  };

  /* ---------- helpers ---------- */
  const prettyJson = (json) => JSON.stringify(json, null, 2);

  return (
    <div className="min-h-screen  text-white overflow-hidden">
      {/* Loading Overlay */}
      {isLoading && (
        <div className="fixed inset-0 z-50 bg-black/50 backdrop-blur-sm">
          <ScannerLoading 
            mode={mode} 
            fileName={file?.name} 
            url={url} 
          />
        </div>
      )}


      {/* Animated Background */}
      <div className="fixed inset-0 pointer-events-none">
        <div
          className="absolute w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"
          style={{
            left: mousePosition.x - 192,
            top: mousePosition.y - 192,
            transition: "all 0.3s ease-out",
          }}
        />
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-purple-500/5 rounded-full blur-2xl animate-pulse delay-1000" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-indigo-500/5 rounded-full blur-3xl animate-pulse delay-2000" />
      </div>

      <div className="relative space-y-8 w-full">
        {/* ---------------- TAB 1 : SCANNER FORM ---------------- */}
        {activeTab === "form" && (
          <div
            className={`transition-all duration-1000 ${
              isLoaded
                ? "opacity-100 translate-y-0"
                : "opacity-0 translate-y-10"
            }`}
          >
            {/* Enhanced Main Content Card */}
            <div className="bg-gradient-to-br from-gray-800/60 to-slate-900/60 rounded-3xl shadow-2xl border border-gray-700/50 p-8 backdrop-blur-sm">
              {/* Mode Selection with Enhanced Design */}
              <div className="space-y-6 mb-12">
                <div className="text-center">
                  <h2 className="text-3xl font-bold text-white mb-2 flex items-center justify-center gap-3">
                    <Brain className="w-8 h-8 text-blue-400" />
                    Choose Your Content Type
                  </h2>
                  <p className="text-gray-300 text-lg">
                    Select how you'd like to learn today
                  </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                  {modeOptions.map((option) => {
                    const Icon = option.icon;
                    return (
                      <div
                        key={option.value}
                        onClick={() => handleModeChange(option.value)}
                        className={`group relative p-8 rounded-3xl border-2 transition-all duration-500 cursor-pointer transform hover:scale-105 backdrop-blur-sm ${
                          mode === option.value
                            ? "border-blue-500 bg-gradient-to-br from-blue-900/40 to-indigo-900/40 shadow-2xl"
                            : "border-gray-600/50 bg-gradient-to-br from-gray-700/40 to-slate-800/40 hover:border-gray-500/70 hover:shadow-xl"
                        }`}
                      >
                        {/* Animated background for selected mode */}
                        {mode === option.value && (
                          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 via-purple-500/10 to-indigo-500/10 rounded-3xl animate-pulse" />
                        )}

                        <div className="relative">
                          <div className="flex items-center gap-4 mb-6">
                            <div
                              className={`w-16 h-16 bg-gradient-to-br ${
                                option.gradient
                              } rounded-2xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300 ${
                                mode === option.value ? "animate-pulse" : ""
                              }`}
                            >
                              <Icon className="w-8 h-8 text-white" />
                            </div>
                            <div>
                              <h3
                                className={`text-2xl font-bold ${
                                  mode === option.value
                                    ? "text-blue-100"
                                    : "text-white group-hover:text-blue-100"
                                } transition-colors flex items-center gap-2`}
                              >
                                {option.emoji} {option.label}
                              </h3>
                              <p
                                className={`text-lg ${
                                  mode === option.value
                                    ? "text-blue-200"
                                    : "text-gray-300 group-hover:text-blue-200"
                                } transition-colors`}
                              >
                                {option.description}
                              </p>
                            </div>
                          </div>

                          {/* Feature List */}
                          <div className="space-y-2">
                            {option.features.map((feature, index) => (
                              <div
                                key={index}
                                className="flex items-center gap-3 text-gray-300"
                              >
                                <CheckCircle
                                  className={`w-4 h-4 ${
                                    mode === option.value
                                      ? "text-blue-400"
                                      : "text-gray-500"
                                  } transition-colors`}
                                />
                                <span className="text-sm">{feature}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

             

              {/* Enhanced Input Form */}
              <form onSubmit={handleSubmit} className="space-y-8 p-5">
                <div className="space-y-4">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl p-3">
                      <Target className="w-6 h-6 text-white" />
                    </div>
                    <h3 className="text-2xl font-bold text-white">
                      {mode === "pdf"
                        ? "📄 Upload Your Document"
                        : "🎥 Paste Video URL"}
                    </h3>
                  </div>

                  {mode === "pdf" ? (
                    <div className="relative group">
                      <input
                        type="file"
                        accept=".pdf"
                        onChange={handleFileChange}
                        className="w-full p-6 border-2 border-dashed border-gray-600 hover:border-blue-500 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 bg-gradient-to-br from-gray-700/50 to-slate-800/50 text-white file:mr-6 file:py-3 file:px-6 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-gradient-to-r file:from-blue-500 file:to-indigo-600 file:text-white hover:file:from-blue-600 hover:file:to-indigo-700 file:shadow-lg hover:file:shadow-xl file:transition-all backdrop-blur-sm"
                      />
                      <div className="absolute top-6 right-6 text-gray-400 group-hover:text-blue-400 transition-colors">
                        <Upload className="w-6 h-6" />
                      </div>
                    </div>
                  ) : (
                    <div className="relative group">
                      <input
                        type="text"
                        placeholder={getCurrentModeConfig()?.placeholder}
                        value={url || ""}
                        onChange={handleUrlChange}
                        className="w-full p-6 pl-16 border-2 border-gray-600 group-hover:border-blue-500 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 bg-gradient-to-br from-gray-700/50 to-slate-800/50 text-white placeholder-gray-400 text-lg backdrop-blur-sm"
                      />
                      <LinkIcon className="absolute left-6 top-6 w-6 h-6 text-gray-400 group-hover:text-blue-400 transition-colors" />
                    </div>
                  )}
                </div>

                {/* Enhanced File Info Display */}
                {mode === "pdf" && file && (
                  <div className="p-6 bg-gradient-to-r from-emerald-900/40 to-teal-900/40 rounded-2xl border border-emerald-500/30 backdrop-blur-sm">
                    <div className="flex items-center gap-4">
                      <div className="bg-gradient-to-r from-emerald-500 to-teal-600 rounded-xl p-3">
                        <FileText className="w-6 h-6 text-white" />
                      </div>
                      <div>
                        <p className="text-white font-semibold text-lg">
                          {file.name}
                        </p>
                        <p className="text-emerald-200">
                          📊 Size: {(file.size / 1024 / 1024).toFixed(2)} MB
                        </p>
                      </div>
                      <div className="ml-auto">
                        <CheckCircle className="w-8 h-8 text-emerald-400 animate-pulse" />
                      </div>
                    </div>
                  </div>
                )}

                {/* Enhanced Submit Button */}
                <div className="text-center">
                  <button
                    type="submit"
                    disabled={isLoading}
                    className={`group relative w-full font-bold py-6 px-12 rounded-2xl transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900 shadow-2xl ${
                      isLoading
                        ? "bg-gray-600 cursor-not-allowed"
                        : "bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 hover:from-blue-700 hover:via-purple-700 hover:to-indigo-800 hover:shadow-3xl"
                    } text-white text-xl border border-blue-400/30`}
                  >
                    {isLoading ? (
                      <div className="flex items-center justify-center gap-4">
                        <Loader2 className="w-8 h-8 animate-spin" />
                        <span>🔄 Analyzing Content...</span>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center gap-4">
                        <Sparkles className="w-8 h-8 group-hover:animate-spin" />
                        <span>✨ Start AI Analysis</span>
                        <Zap className="w-8 h-8 group-hover:animate-pulse" />
                      </div>
                    )}
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-indigo-400 rounded-2xl blur opacity-0 group-hover:opacity-30 transition-opacity duration-300" />
                  </button>
                </div>
              </form>

              {/* Enhanced Error Display */}
              {error && (
                <div className="mt-8 p-6 bg-gradient-to-r from-red-900/40 to-pink-900/40 border border-red-500/30 rounded-2xl backdrop-blur-sm">
                  <div className="flex items-center gap-4">
                    <div className="bg-gradient-to-r from-red-500 to-pink-600 rounded-xl p-3">
                      <AlertCircle className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <p className="text-white font-semibold text-lg">
                        ⚠️ Oops! Something went wrong
                      </p>
                      <p className="text-red-200">{error}</p>
                    </div>
                  </div>
                </div>
              )}

              {/* Enhanced History Component */}
              <div className="mt-12 p-8  rounded-2xl backdrop-blur-sm">
                <div className="flex items-center gap-3 mb-6">
                  <div className="bg-gradient-to-r from-purple-600 to-indigo-700 rounded-xl p-3">
                    <BookOpen className="w-6 h-6 text-white" />
                  </div>
                  <h3 className="text-2xl font-bold text-white">
                    📚 Your Learning History
                  </h3>
                </div>
                <Model2history />
              </div>
            </div>
          </div>
        )}

        {/* ---------------- TAB 2 : RESULTS ---------------- */}
        {activeTab === "results" && (
          <div className="w-full h-full flex-grow">
            <Model2results
              file={file}
              url={url}
              mode={mode}
              isLoading={isLoading}
              setIsLoading={setIsLoading}
              onNewScan={handleNewScan}
              viewerRef={viewerRef}
              fileUrl={fileUrl}
              response={response}
            />
          </div>
        )}
      </div>
    </div>
  );
}

export default Scanner;



================================================
FILE: frontend/src/components/ScannerLoading.jsx
================================================
import React, { useState, useEffect } from "react";
import { 
  FileText, 
  PlayCircle, 
  Loader2, 
  Brain, 
  Sparkles, 
  Zap,
  ScanLine,
  BookOpen,
  Video,
  Target,
  CheckCircle,
  Clock,
  Cpu,
  Eye,
  MessageSquare
} from "lucide-react";

const ScannerLoading = ({ mode, fileName, url }) => {
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState(0);
  const [dots, setDots] = useState("");

  // PDF Analysis Steps
  const pdfSteps = [
    { icon: FileText, text: "Reading PDF structure", color: "text-blue-400" },
    { icon: ScanLine, text: "Extracting text content", color: "text-green-400" },
    { icon: Brain, text: "Analyzing key concepts", color: "text-purple-400" },
    { icon: Target, text: "Identifying main topics", color: "text-yellow-400" },
    { icon: BookOpen, text: "Generating summary", color: "text-indigo-400" },
    { icon: Sparkles, text: "Creating insights", color: "text-pink-400" }
  ];

  // YouTube Analysis Steps
  const youtubeSteps = [
    { icon: PlayCircle, text: "Fetching video metadata", color: "text-red-400" },
    { icon: Video, text: "Processing video content", color: "text-orange-400" },
    { icon: MessageSquare, text: "Extracting transcript", color: "text-green-400" },
    { icon: Brain, text: "Analyzing content flow", color: "text-purple-400" },
    { icon: Clock, text: "Creating timestamps", color: "text-blue-400" },
    { icon: Sparkles, text: "Generating insights", color: "text-pink-400" }
  ];

  const steps = mode === "pdf" ? pdfSteps : youtubeSteps;

  useEffect(() => {
    // Progress animation
    const progressInterval = setInterval(() => {
      setProgress(prev => {
        if (prev >= 100) return 100;
        return prev + Math.random() * 3;
      });
    }, 200);

    // Step progression
    const stepInterval = setInterval(() => {
      setCurrentStep(prev => {
        if (prev >= steps.length - 1) return steps.length - 1;
        return prev + 1;
      });
    }, 1500);

    // Dots animation
    const dotsInterval = setInterval(() => {
      setDots(prev => {
        if (prev.length >= 3) return "";
        return prev + ".";
      });
    }, 500);

    return () => {
      clearInterval(progressInterval);
      clearInterval(stepInterval);
      clearInterval(dotsInterval);
    };
  }, [steps.length]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white overflow-hidden flex items-center justify-center">
      {/* Animated Background */}
      <div className="fixed inset-0 pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-blue-500/10 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-indigo-500/5 rounded-full blur-3xl animate-pulse delay-2000" />
      </div>

      <div className="relative z-10 w-full max-w-lg mx-auto px-6">
        {/* Main Loading Card */}
        <div className="bg-gradient-to-br from-gray-800/80 to-slate-900/80 rounded-2xl shadow-2xl border border-gray-700/50 p-6 backdrop-blur-sm">
          {/* Header */}
          <div className="text-center mb-6">
            <div className="relative inline-block">
              <div className={`w-16 h-16 bg-gradient-to-br ${
                mode === "pdf" 
                  ? "from-orange-500 via-red-500 to-pink-600" 
                  : "from-red-500 via-pink-500 to-purple-600"
              } rounded-xl flex items-center justify-center shadow-2xl mb-3 animate-pulse`}>
                {mode === "pdf" ? (
                  <FileText className="w-8 h-8 text-white" />
                ) : (
                  <PlayCircle className="w-8 h-8 text-white" />
                )}
              </div>
              <div className="absolute -top-1 -right-1 w-6 h-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center animate-spin">
                <Loader2 className="w-3 h-3 text-white" />
              </div>
            </div>
            
            <h2 className="text-2xl font-bold text-white mb-2">
              {mode === "pdf" ? "ðŸ“„ Analyzing PDF" : "ðŸŽ¥ Processing Video"}
            </h2>
            <p className="text-gray-300 text-sm mb-3">
              {mode === "pdf" 
                ? "Extracting insights from your document" 
                : "Converting video into structured knowledge"
              }
            </p>
            
            {/* File/URL Info */}
            <div className="bg-gradient-to-r from-gray-700/50 to-slate-800/50 rounded-lg p-3 backdrop-blur-sm">
              <p className="text-gray-200 font-medium truncate text-sm">
                {mode === "pdf" ? fileName : url}
              </p>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="mb-6">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-300">Progress</span>
              <span className="text-sm font-medium text-blue-400">{Math.round(progress)}%</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-2 overflow-hidden">
              <div 
                className="bg-gradient-to-r from-blue-500 via-purple-500 to-indigo-600 h-2 rounded-full transition-all duration-500 ease-out relative"
                style={{ width: `${progress}%` }}
              >
                <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse" />
              </div>
            </div>
          </div>

          {/* Current Step Display */}
          <div className="mb-6">
            <div className="flex items-center gap-3 p-3 rounded-lg bg-gradient-to-r from-blue-900/40 to-purple-900/40 border border-blue-500/30 backdrop-blur-sm">
              <div className="w-10 h-10 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center animate-pulse">
                {React.createElement(steps[currentStep]?.icon || Loader2, {
                  className: "w-5 h-5 text-white"
                })}
              </div>
              <div className="flex-1">
                <p className="text-blue-100 font-semibold text-sm">
                  {steps[currentStep]?.text || "Processing"}
                  <span className="text-blue-400">{dots}</span>
                </p>
              </div>
              <Loader2 className="w-4 h-4 text-blue-400 animate-spin" />
            </div>
          </div>

          {/* Animated Particles */}
          <div className="absolute inset-0 pointer-events-none overflow-hidden rounded-2xl">
            {[...Array(10)].map((_, i) => (
              <div
                key={i}
                className="absolute w-1 h-1 bg-blue-400 rounded-full animate-pulse"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 2}s`,
                  animationDuration: `${2 + Math.random() * 2}s`
                }}
              />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ScannerLoading;


================================================
FILE: frontend/src/contexts/QuizContext.jsx
================================================
import React, { createContext, useState, useContext } from "react";


const QuizContext = createContext();

export const QuizProvider = ({ children }) => {
  const [questions, setQuestions] = useState([]); // Add setQuestions
  const [userAnswers, setUserAnswers] = useState({});
  const [current, setCurrent] = useState(0);
  const [showResults, setShowResults] = useState(false);

  return (
    <QuizContext.Provider
      value={{
        questions,
        setQuestions, // Expose this to context
        userAnswers,
        setUserAnswers,
        current,
        setCurrent,
        showResults,
        setShowResults,
      }}
    >
      {children}
    </QuizContext.Provider>
  );
};

export const useQuiz = () => useContext(QuizContext);



================================================
FILE: frontend/src/pages/AuthForm.jsx
================================================
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signInWithPopup,
  GoogleAuthProvider,
  fetchSignInMethodsForEmail,
} from "firebase/auth";
import { auth } from "../utils/firebase";
import axios from "axios";
import {
  User,
  Mail,
  Lock,
  LogIn,
  UserPlus,
  Brain,
  Sparkles,
  ArrowRight,
  Target,
  Users,
  BookOpen,
  Video,
  Globe,
  TestTube,
  Shield,
  TrendingUp,
  CheckCircle,
  Star,
  Heart,
  Coffee,
} from "lucide-react";

const API_BASE = import.meta.env.VITE_API_BASE;

const AuthForm = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
  });
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isLoaded, setIsLoaded] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    setIsLoaded(true);
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };
    window.addEventListener("mousemove", handleMouseMove);
    return () => window.removeEventListener("mousemove", handleMouseMove);
  }, []);

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Auth Handlers â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const { user } = await signInWithEmailAndPassword(
        auth,
        formData.email,
        formData.password
      );
      const token = await user.getIdToken();
      localStorage.setItem("token", token);

      navigate("/dashboard");
    } catch (error) {
      console.error(error);
      alert(`Login failed: ${error.message}`);
    }
  };

  const handleSignup = async (e) => {
    e.preventDefault();
    try {
      const { user } = await createUserWithEmailAndPassword(
        auth,
        formData.email,
        formData.password
      );

      // Register user in Django backend with UID in headers
      await axios.post(
        `${API_BASE}/login/`,
        {
          username: formData.username,
          email: user.email,
        },
        {
          headers: {
            "X-Firebase-Uid": user.uid,
          },
        }
      );

      setIsLogin(true);
    } catch (error) {
      console.error(error);
      alert(`Signup failed: ${error.message}`);
    }
  };

  const handleGoogleLogin = async () => {
    const provider = new GoogleAuthProvider();
    try {
      const result = await signInWithPopup(auth, provider);
      const { user } = result;

      const signInMethods = await fetchSignInMethodsForEmail(auth, user.email);
      if (signInMethods.length != 1 && signInMethods[0] != "google.com") {
        await axios.post(
          `${API_BASE}/login/`,
          {
            username: user.email,
            email: user.email,
          },
          {
            headers: {
              "X-Firebase-UID": user.uid,
            },
          }
        );
      }
      setIsLogin(true);
      navigate("/dashboard");
    } catch (error) {
      console.error(error);
      alert(`Google login failed: ${error.message}`);
    }
  };

  const features = [
    {
      icon: <Brain className="w-6 h-6" />,
      text: "AI-Powered Learning",
      color: "text-blue-400",
    },
    {
      icon: <Video className="w-6 h-6" />,
      text: "Smart Video Curation",
      color: "text-purple-400",
    },
    {
      icon: <Globe className="w-6 h-6" />,
      text: "Trusted Resources",
      color: "text-emerald-400",
    },
    {
      icon: <TestTube className="w-6 h-6" />,
      text: "Adaptive Quizzes",
      color: "text-indigo-400",
    },
    {
      icon: <Shield className="w-6 h-6" />,
      text: "Privacy Protected",
      color: "text-teal-400",
    },
    {
      icon: <TrendingUp className="w-6 h-6" />,
      text: "Progress Tracking",
      color: "text-pink-400",
    },
  ];

  const stats = [
    {
      number: "50K+",
      label: "Active Learners",
      icon: <Users className="w-5 h-5" />,
    },
    {
      number: "1M+",
      label: "Chapters Generated",
      icon: <BookOpen className="w-5 h-5" />,
    },
    {
      number: "99.8%",
      label: "Success Rate",
      icon: <Star className="w-5 h-5" />,
    },
  ];

  return (
    <div className="min-h-screen overflow-x-hidden bg-gradient-to-br from-gray-900 via-slate-900 to-gray-800 text-white">
      {/* Animated Background */}
      <div className="fixed inset-0 pointer-events-none">
        <div
          className="absolute w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"
          style={{
            left: mousePosition.x - 192,
            top: mousePosition.y - 192,
            transition: "all 0.3s ease-out",
          }}
        />
        <div className="absolute inset-0 bg-gradient-to-r from-blue-600/5 via-purple-600/5 to-indigo-700/5 animate-pulse"></div>
      </div>

      <div className="relative h-screen flex items-center justify-center p-4 overflow-auto">

  <div className={`w-full max-w-[800px] min-h-screen lg:h-[800px] overflow-hidden transition-all duration-1000 rounded-3xl ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>


          {/* Main Container - Horizontal Layout */}
          <div className="bg-gradient-to-br from-gray-800/90 to-slate-900/90 rounded-3xl shadow-2xl overflow-auto backdrop-blur-sm border border-gray-700/50">
            <div className="grid lg:grid-cols-2 min-h-[600px]">


              {/* Left Side - Branding & Features */}
              <div className="bg-gradient-to-br from-blue-600/20 via-purple-600/20 to-indigo-700/20 p-4 lg:p-6 flex flex-col justify-center relative overflow-auto">
                <div className="absolute inset-0 bg-gradient-to-r from-blue-600/10 via-purple-600/10 to-indigo-700/10 animate-pulse"></div>

                <div className="relative z-10">
                  {/* Logo & Brand */}
                  <div className="flex items-center mb-8">
                    <div className="relative">
                      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-2xl p-4 shadow-2xl border border-blue-400/30 animate-pulse">
                        <Target className="w-12 h-12 text-white" />
                      </div>
                      <div className="absolute -inset-2 bg-gradient-to-r from-blue-400 via-purple-400 to-indigo-400 rounded-2xl blur opacity-30 animate-pulse"></div>
                    </div>
                    <div className="ml-4">
                      <h1 className="text-4xl font-bold bg-gradient-to-r from-white via-blue-100 to-indigo-200 bg-clip-text text-transparent">
                        AI Learning Hub
                      </h1>
                      <p className="text-blue-200 text-lg">
                        Learn Smarter, Not Harder
                      </p>
                    </div>
                  </div>

                  {/* Welcome Message */}
                  <div className="mb-8">
                    <h2 className="text-3xl font-bold text-white mb-4">
                      {isLogin
                        ? "ðŸŽ“ Welcome Back!"
                        : "ðŸš€ Join the Future of Learning"}
                    </h2>
                    <p className="text-gray-300 text-lg leading-relaxed">
                      {isLogin
                        ? "Continue your personalized learning journey with AI-powered education tools."
                        : "Transform your education with AI-generated content, smart quizzes, and curated resources."}
                    </p>
                  </div>

                  {/* Features Grid */}
                  <div className="grid grid-cols-2 gap-4 mb-8">
                    {features.map((feature, index) => (
                      <div
                        key={index}
                        className="flex items-center p-3 bg-gradient-to-r from-gray-700/60 to-slate-800/60 rounded-xl border border-gray-600/50 hover:border-indigo-500/50 transition-all duration-300 backdrop-blur-sm group"
                      >
                        <div
                          className={`${feature.color} mr-3 bg-gray-800/50 rounded-lg p-2 group-hover:animate-pulse`}
                        >
                          {feature.icon}
                        </div>
                        <span className="text-gray-100 font-medium text-sm">
                          {feature.text}
                        </span>
                      </div>
                    ))}
                  </div>

                  {/* Stats */}
                  <div className="grid grid-cols-3 gap-4">
                    {stats.map((stat, index) => (
                      <div
                        key={index}
                        className="text-center p-4 bg-gradient-to-br from-gray-700/60 to-slate-800/60 rounded-xl border border-gray-600/50 backdrop-blur-sm"
                      >
                        <div className="flex justify-center mb-2 text-blue-400">
                          {stat.icon}
                        </div>
                        <div className="text-2xl font-bold text-white">
                          {stat.number}
                        </div>
                        <div className="text-gray-300 text-xs">
                          {stat.label}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Right Side - Auth Form */}
              <div className="p-4 lg:p-6 flex flex-col justify-center">
                <div className="max-w-md mx-auto w-full">
                  {/* Form Header */}
                  <div className="text-center mb-8">
                    <div className="flex items-center justify-center mb-4">
                      <div
                        className={`bg-gradient-to-r ${
                          isLogin
                            ? "from-blue-600 to-indigo-600"
                            : "from-purple-600 to-pink-600"
                        } rounded-2xl p-3 shadow-lg animate-pulse`}
                      >
                        {isLogin ? (
                          <LogIn className="h-8 w-8 text-white" />
                        ) : (
                          <UserPlus className="h-8 w-8 text-white" />
                        )}
                      </div>
                    </div>
                    <h2 className="text-3xl font-bold text-white mb-2">
                      {isLogin ? "Sign In" : "Create Account"}
                    </h2>
                    <p className="text-gray-400">
                      {isLogin
                        ? "Access your personalized learning dashboard"
                        : "Start your AI-powered learning journey"}
                    </p>
                  </div>

                  {/* Auth Form */}
                  <form
                    className="space-y-6"
                    onSubmit={isLogin ? handleLogin : handleSignup}
                  >
                    {!isLogin && (
                      <div className="space-y-2">
                        <label className="text-sm font-medium text-gray-300 flex items-center space-x-2">
                          <User className="h-4 w-4 text-blue-400" />
                          <span>Username</span>
                        </label>
                        <input
                          type="text"
                          className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 placeholder-gray-400 text-white backdrop-blur-sm"
                          placeholder="Choose a username"
                          value={formData.username}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              username: e.target.value,
                            })
                          }
                          required
                        />
                      </div>
                    )}

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-300 flex items-center space-x-2">
                        <Mail className="h-4 w-4 text-blue-400" />
                        <span>Email</span>
                      </label>
                      <input
                        type="email"
                        className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 placeholder-gray-400 text-white backdrop-blur-sm"
                        placeholder="Enter your email"
                        value={formData.email}
                        onChange={(e) =>
                          setFormData({ ...formData, email: e.target.value })
                        }
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-300 flex items-center space-x-2">
                        <Lock className="h-4 w-4 text-blue-400" />
                        <span>Password</span>
                      </label>
                      <input
                        type="password"
                        className="w-full px-4 py-3 bg-gray-700/50 border border-gray-600/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 placeholder-gray-400 text-white backdrop-blur-sm"
                        placeholder="Enter your password"
                        value={formData.password}
                        onChange={(e) =>
                          setFormData({ ...formData, password: e.target.value })
                        }
                        required
                      />
                    </div>

                    {/* Submit Button */}
                    <button
                      type="submit"
                      className="group w-full bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 hover:from-blue-700 hover:via-purple-700 hover:to-indigo-800 text-white py-4 px-6 rounded-xl font-bold text-lg shadow-2xl hover:shadow-3xl transition-all duration-300 transform hover:scale-105 border border-blue-400/30"
                    >
                      <div className="flex items-center justify-center gap-3">
                        <Sparkles className="w-5 h-5 group-hover:animate-spin" />
                        {isLogin ? "Sign In" : "Create Account"}
                        <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
                      </div>
                    </button>

                    {/* Divider */}
                    <div className="relative my-6">
                      <div className="absolute inset-0 flex items-center">
                        <div className="w-full border-t border-gray-600/50"></div>
                      </div>
                      <div className="relative flex justify-center text-sm">
                        <span className="px-3 bg-gradient-to-br from-gray-800/90 to-slate-900/90 text-gray-400">
                          or
                        </span>
                      </div>
                    </div>

                    {/* Google Login */}
                    <button
                      type="button"
                      onClick={handleGoogleLogin}
                      className="group w-full bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white py-4 px-6 rounded-xl font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 border border-red-400/30"
                    >
                      <div className="flex items-center justify-center gap-3">
                        <svg className="w-5 h-5" viewBox="0 0 24 24">
                          <path
                            fill="currentColor"
                            d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                          />
                          <path
                            fill="currentColor"
                            d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                          />
                          <path
                            fill="currentColor"
                            d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                          />
                          <path
                            fill="currentColor"
                            d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                          />
                        </svg>
                        Continue with Google
                      </div>
                    </button>

                    {/* Toggle Button */}
                    <button
                      type="button"
                      className="group w-full bg-transparent border-2 border-gray-600/50 hover:border-indigo-500/50 text-gray-300 hover:text-white py-4 px-6 rounded-xl font-medium text-lg hover:bg-gray-700/20 transition-all duration-300 transform hover:scale-105"
                      onClick={() => setIsLogin(!isLogin)}
                    >
                      <div className="flex items-center justify-center gap-3">
                        <Heart className="w-5 h-5 group-hover:animate-pulse" />
                        {isLogin
                          ? "Need an account? Sign up"
                          : "Already have an account? Sign in"}
                      </div>
                    </button>
                  </form>

                  {/* Footer */}
                  <div className="text-center mt-8 pt-6 border-t border-gray-700/50">
                    <div className="flex justify-center items-center gap-2 text-gray-400 text-sm">
                      <Coffee className="w-4 h-4" />
                      <span>Join our community of learners</span>
                      <Sparkles className="w-4 h-4" />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AuthForm;



================================================
FILE: frontend/src/pages/Dashboard.jsx
================================================
// Dashboard.jsx
import React, { useState } from "react";
import {
  LayoutDashboard,
  History,
  ScanBarcode,
  Menu,
  X,
  ChevronLeft,
  ChevronRight,
  Settings,
  User,
  Database,
} from "lucide-react";

// ðŸ‘‰ slot in your real screens here
import Resources from "../components/Resources"; // Adjust the import path
import Scanner from "../components/Scanner"; // Adjust the import path

const TAB_CONFIG = [
  { id: "resources", label: "Resources", icon: LayoutDashboard },
  { id: "scanner", label: "Scanner", icon: ScanBarcode },
];


export default function Dashboard() {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [activeTab, setActiveTab] = useState("resources");
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);

  const CurrentScreen = {
  resources: Resources,
  scanner: Scanner,
}[activeTab];


  const getTabTitle = (tabId) => {
    const tab = TAB_CONFIG.find(t => t.id === tabId);
    return tab ? tab.label : "Dashboard";
  };

  const getTabDescription = (tabId) => {
  const descriptions = {
    resources: "Manage and view your resource collection",
    scanner: "Scan and identify new resources"
  };
  return descriptions[tabId] || "Navigate through your dashboard";
};


  return (
    <div className="flex h-screen overflow-hidden bg-slate-100 dark:bg-slate-950">
      {/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Sidebar â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */}
      <aside
        className={`bg-gradient-to-b from-slate-900 to-slate-800 text-slate-100 transition-all duration-300 ease-in-out border-r border-slate-700
          ${sidebarOpen ? "translate-x-0" : "-translate-x-full"}
          ${sidebarCollapsed ? "w-16" : "w-64"}
          fixed sm:static inset-y-0 z-40 sm:translate-x-0 shadow-xl`}
      >
        {/* Header with logo and collapse button */}
        <div className="flex items-center justify-between p-4 border-b border-slate-700">
          {!sidebarCollapsed && (
            <div className="flex items-center gap-3">
              <div className="p-2 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg">
                <Database className="w-5 h-5 text-white" />
              </div>
              <span className="font-semibold text-lg">Resource Hub</span>
            </div>
          )}
          
          {/* Mobile close button */}
          <button
            className="p-1 rounded-lg hover:bg-slate-700 transition-colors sm:hidden"
            onClick={() => setSidebarOpen(false)}
          >
            <X size={20} />
          </button>
          
          {/* Desktop collapse button */}
          <button
            className="p-1 rounded-lg hover:bg-slate-700 transition-colors hidden sm:block"
            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
          >
            {sidebarCollapsed ? <ChevronRight size={20} /> : <ChevronLeft size={20} />}
          </button>
        </div>

        {/* Navigation menu */}
        <nav className="mt-6 space-y-2 px-3">
          {TAB_CONFIG.map(({ id, label, icon: Icon }) => (
            <button
              key={id}
              onClick={() => setActiveTab(id)}
              className={`group flex items-center w-full px-3 py-3 text-left gap-3 rounded-lg transition-all duration-200
                ${activeTab === id 
                  ? "bg-gradient-to-r from-blue-500/20 to-purple-600/20 text-blue-400 shadow-lg" 
                  : "hover:bg-slate-700/50 text-slate-300 hover:text-white"
                }`}
              title={sidebarCollapsed ? label : undefined}
            >
              <Icon
                size={20}
                className={`shrink-0 transition-colors ${
                  activeTab === id ? "text-blue-400" : "text-slate-400 group-hover:text-blue-300"
                }`}
              />
              {!sidebarCollapsed && (
                <span className="font-medium">{label}</span>
              )}
              {activeTab === id && (
                <div className="ml-auto w-2 h-2 bg-blue-400 rounded-full"></div>
              )}
            </button>
          ))}
        </nav>

        {/* Bottom section */}
        
      </aside>

      {/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Main Content Area â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */}
      <div className="flex-1 flex flex-col bg-slate-50 dark:bg-slate-900 min-w-0">
       

        {/* Main Content */}
        <main className="flex-1 bg-gradient-to-br from-slate-900 via-gray-900 to-black  overflow-y-auto">
          <div className="">
            {CurrentScreen ? (
              <CurrentScreen />
            ) : (
              <div className="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-8 text-center">
                <div className="p-3 bg-gradient-to-r from-red-500 to-pink-600 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                  <X className="w-8 h-8 text-white" />
                </div>
                <h2 className="text-2xl font-semibold text-slate-900 dark:text-slate-100 mb-2">
                  Tab Not Found
                </h2>
                <p className="text-slate-600 dark:text-slate-400">
                  The requested tab could not be found. Please select a valid option from the sidebar.
                </p>
              </div>
            )}
          </div>
        </main>
      </div>

      {/* Mobile sidebar overlay */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-30 sm:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
    </div>
  );
}


================================================
FILE: frontend/src/pages/Home.jsx
================================================
import React, { useState, useEffect } from 'react';
import { Brain, Search, Rocket, Target, Users, BookOpen, Video, Globe, TestTube, Clock, BarChart, Star, ArrowRight, Play, CheckCircle, Sparkles, Upload, Link, Zap, Award, TrendingUp, Shield, Lightbulb, Coffee, Heart, MessageCircle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
const Home = () => {
  const [activeFeature, setActiveFeature] = useState(0);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isLoaded, setIsLoaded] = useState(false);
   const navigate = useNavigate();

  useEffect(() => {
    setIsLoaded(true);
    const handleMouseMove = (e) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };
    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  const handleGetStarted = () => {
    navigate("/auth")
  };

  const features = [
    {
      icon: <Brain className="w-8 h-8" />,
      title: "AI Chapter Generator",
      description: "Transform any topic into comprehensive, grade-appropriate chapters with visual aids and examples.",
      gradient: "from-blue-500 via-purple-500 to-indigo-600",
      detail: "Smart content generation that adapts to your learning level"
    },
    {
      icon: <Video className="w-8 h-8" />,
      title: "Smart Video Curation",
      description: "AI-powered video selection with automatic summaries, timestamps, and follow-up questions.",
      gradient: "from-red-500 to-pink-600",
      detail: "Never waste time on irrelevant videos again"
    },
    {
      icon: <Globe className="w-8 h-8" />,
      title: "Trusted Resource Hub",
      description: "Curated collection of verified educational websites and interactive learning materials.",
      gradient: "from-emerald-500 to-teal-600",
      detail: "Quality-checked resources from top educational institutions"
    },
    {
      icon: <TestTube className="w-8 h-8" />,
      title: "Dynamic Quiz Engine",
      description: "Adaptive assessments that evolve with your learning progress and identify knowledge gaps.",
      gradient: "from-purple-600 via-indigo-600 to-blue-600",
      detail: "Personalized questions that challenge you at the right level"
    }
  ];

  const newFeatures = [
    {
      icon: <Upload className="w-6 h-6" />,
      title: "PDF Intelligence",
      description: "Upload textbooks, notes, or papers - AI extracts key concepts and creates instant study materials.",
      gradient: "from-orange-500 to-red-600"
    },
    {
      icon: <Link className="w-6 h-6" />,
      title: "YouTube AI Scanner",
      description: "Paste any educational video link for instant summaries, notes, and comprehension questions.",
      gradient: "from-pink-500 to-rose-600"
    },
    {
      icon: <Zap className="w-6 h-6" />,
      title: "Lightning Learning",
      description: "Master complex topics in minutes with AI-optimized learning paths and micro-lessons.",
      gradient: "from-yellow-500 to-orange-600"
    }
  ];

  const benefits = [
    { icon: <Target className="w-6 h-6" />, text: "Personalized Learning Journey", color: "text-blue-400" },
    { icon: <Clock className="w-6 h-6" />, text: "24/7 AI Study Companion", color: "text-green-400" },
    { icon: <BookOpen className="w-6 h-6" />, text: "Multi-Board Curriculum Support", color: "text-purple-400" },
    { icon: <Brain className="w-6 h-6" />, text: "Intelligent Content Generation", color: "text-indigo-400" },
    { icon: <TrendingUp className="w-6 h-6" />, text: "Advanced Progress Analytics", color: "text-pink-400" },
    { icon: <Shield className="w-6 h-6" />, text: "Privacy-First Architecture", color: "text-teal-400" }
  ];

  const userTypes = [
    { type: "Students", emoji: "🎓", gradient: "from-blue-500 to-indigo-600", desc: "K-12 & Higher Education" },
    { type: "Teachers", emoji: "👨‍🏫", gradient: "from-emerald-500 to-teal-600", desc: "Lesson Planning & Resources" },
    { type: "Exam Aspirants", emoji: "🏆", gradient: "from-purple-500 to-pink-600", desc: "JEE, NEET, UPSC & More" },
    { type: "Lifelong Learners", emoji: "🌟", gradient: "from-orange-500 to-red-600", desc: "Continuous Skill Development" }
  ];

  const testimonials = [
    {
      name: "Ananya Sharma",
      role: "NEET Aspirant",
      text: "Uploaded my entire biology syllabus PDF - got perfect summaries and practice MCQs instantly!",
      rating: 5,
      image: "👩‍🎓"
    },
    {
      name: "Aditya Kumar",
      role: "Class 10 Student",
      text: "The YouTube scanner is incredible. AI breaks down complex physics videos better than my tutor.",
      rating: 5,
      image: "👨‍🎓"
    },
    {
      name: "Priya Patel",
      role: "Teacher",
      text: "Creating lesson plans is now effortless. My students love the interactive quizzes!",
      rating: 5,
      image: "👩‍🏫"
    }
  ];

  const stats = [
    { number: "50K+", label: "Active Learners", icon: <Users className="w-6 h-6" /> },
    { number: "1M+", label: "Chapters Generated", icon: <BookOpen className="w-6 h-6" /> },
    { number: "500K+", label: "Videos Analyzed", icon: <Video className="w-6 h-6" /> },
    { number: "99.8%", label: "Success Rate", icon: <Award className="w-6 h-6" /> }
  ];


  
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-gray-800 text-white overflow-hidden">
      {/* Animated Background */}
      <div className="fixed inset-0 pointer-events-none">
        <div 
          className="absolute w-96 h-96 bg-blue-500/10 rounded-full blur-3xl animate-pulse"
          style={{
            left: mousePosition.x - 192,
            top: mousePosition.y - 192,
            transition: 'all 0.3s ease-out'
          }}
        />
      </div>

      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-indigo-700/20 animate-pulse"></div>
        
        <div className={`relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 transition-all duration-1000 ${isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
          <div className="text-center">
            {/* Animated Logo */}
            <div className="flex justify-center items-center mb-8">
              <div className="relative">
                <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-3xl p-6 shadow-2xl border border-blue-400/30 animate-bounce">
                  <Target className="w-16 h-16 text-white" />
                </div>
                <div className="absolute -inset-2 bg-gradient-to-r from-blue-400 via-purple-400 to-indigo-400 rounded-3xl blur opacity-30 animate-pulse"></div>
              </div>
            </div>
            
            {/* Main Title with Typing Effect */}
            <h1 className="text-7xl font-bold bg-gradient-to-r from-white via-blue-100 to-indigo-200 bg-clip-text text-transparent mb-6 animate-pulse">
              AI Learning Hub
            </h1>
            
            <p className="text-3xl text-blue-100 mb-4 font-medium animate-bounce">
              Learn Smarter, Not Harder
            </p>
            
            <p className="text-xl text-gray-300 mb-8 max-w-4xl mx-auto leading-relaxed">
              🔍 Instantly Understand Any Topic - Enter any topic and grade level – our AI generates 
              easy-to-understand chapters, curated videos, helpful websites, and smart quizzes tailored just for you.
            </p>


            {/* Enhanced Get Started Button */}
            <div className="flex justify-center mb-16">
              <button
                onClick={handleGetStarted}
                className="group relative bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 hover:from-blue-700 hover:via-purple-700 hover:to-indigo-800 text-white font-bold px-16 py-8 rounded-3xl shadow-2xl hover:shadow-3xl transition-all duration-300 transform hover:scale-105 border border-blue-300/30"
              >
                <div className="flex items-center gap-4">
                  <Sparkles className="w-10 h-10 animate-spin" />
                  <span className="text-3xl">Start Learning Now</span>
                  <ArrowRight className="w-10 h-10 group-hover:translate-x-2 transition-transform" />
                </div>
                <div className="absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-indigo-400 rounded-3xl blur opacity-0 group-hover:opacity-40 transition-opacity duration-300" />
              </button>
            </div>

            {/* Stats Section */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
              {stats.map((stat, index) => (
                <div key={index} className="bg-gradient-to-br from-gray-800/60 to-slate-900/60 rounded-2xl p-6 backdrop-blur-sm border border-gray-700/50 hover:border-blue-500/50 transition-all duration-300">
                  <div className="flex items-center justify-center mb-2 text-blue-400">
                    {stat.icon}
                  </div>
                  <div className="text-3xl font-bold text-white mb-1">{stat.number}</div>
                  <div className="text-gray-300 text-sm">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Features Section */}
      <div className="py-20 bg-gradient-to-br from-gray-800/50 to-slate-800/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <div className="flex items-center justify-center mb-6">
              <div className="bg-gradient-to-r from-blue-600 to-indigo-700 rounded-2xl p-4 shadow-lg animate-pulse">
                <Rocket className="w-10 h-10 text-white" />
              </div>
            </div>
            <h2 className="text-5xl font-bold text-white mb-6">🚀 Revolutionary Features</h2>
            <p className="text-gray-300 text-xl max-w-3xl mx-auto">
              Experience the future of personalized learning with our cutting-edge AI technology
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
            {features.map((feature, index) => (
              <div 
                key={index} 
                className={`group bg-gradient-to-br from-gray-700/80 to-slate-800/80 rounded-3xl p-8 hover:shadow-2xl transition-all duration-500 transform hover:scale-105 border border-gray-600/50 hover:border-indigo-500/50 cursor-pointer backdrop-blur-sm ${activeFeature === index ? 'ring-2 ring-blue-500' : ''}`}
                onMouseEnter={() => setActiveFeature(index)}
              >
                <div className={`w-16 h-16 bg-gradient-to-br ${feature.gradient} rounded-2xl flex items-center justify-center mb-6 shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:animate-pulse`}>
                  <div className="text-white group-hover:scale-110 transition-transform">
                    {feature.icon}
                  </div>
                </div>
                <h3 className="text-xl font-bold text-white mb-4 group-hover:text-indigo-300 transition-colors">{feature.title}</h3>
                <p className="text-gray-300 leading-relaxed mb-4">{feature.description}</p>
                <p className="text-sm text-indigo-300 font-medium opacity-0 group-hover:opacity-100 transition-opacity">{feature.detail}</p>
              </div>
            ))}
          </div>

          {/* New Features Highlight */}
          <div className="bg-gradient-to-r from-indigo-900/40 to-purple-900/40 rounded-3xl p-8 border border-indigo-500/30 backdrop-blur-sm">
            <h3 className="text-3xl font-bold text-white mb-8 text-center">🆕 Latest Innovations</h3>
            <div className="grid md:grid-cols-3 gap-6">
              {newFeatures.map((feature, index) => (
                <div key={index} className="flex items-start p-6 bg-gradient-to-br from-gray-800/60 to-slate-900/60 rounded-2xl border border-gray-700/50 hover:border-indigo-500/50 transition-all duration-300">
                  <div className={`p-3 bg-gradient-to-r ${feature.gradient} rounded-xl mr-4 flex-shrink-0`}>
                    {feature.icon}
                  </div>
                  <div>
                    <h4 className="text-lg font-bold text-white mb-2">{feature.title}</h4>
                    <p className="text-gray-300 text-sm">{feature.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Benefits Section */}
      <div className="py-20 bg-gradient-to-br from-slate-800/50 to-gray-900/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-white mb-4">✨ Why Students Love Us</h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              Discover powerful tools designed to enhance your learning experience
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {benefits.map((benefit, index) => (
              <div key={index} className="flex items-center p-6 bg-gradient-to-r from-gray-700/80 to-slate-800/80 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 border border-gray-600/50 hover:border-indigo-500/50 group backdrop-blur-sm">
                <div className={`${benefit.color} mr-6 bg-gray-800 rounded-full p-3 group-hover:animate-pulse`}>
                  {benefit.icon}
                </div>
                <span className="text-gray-100 font-medium text-lg group-hover:text-white transition-colors">{benefit.text}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Enhanced Testimonials Section */}
      <div className="py-20 bg-gradient-to-br from-gray-800/50 to-slate-800/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-white mb-4">💬 What Our Users Say</h2>
            <p className="text-gray-300 text-lg">Real stories from real students and teachers</p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <div key={index} className="bg-gradient-to-br from-gray-700/80 to-slate-800/80 rounded-3xl p-8 border border-gray-600/50 hover:border-indigo-500/50 transition-all duration-300 transform hover:scale-105 backdrop-blur-sm">
                <div className="flex items-center mb-6">
                  <div className="text-4xl mr-4">{testimonial.image}</div>
                  <div>
                    <div className="font-bold text-white">{testimonial.name}</div>
                    <div className="text-gray-400 text-sm">{testimonial.role}</div>
                  </div>
                </div>
                <p className="text-gray-300 mb-4 italic">"{testimonial.text}"</p>
                <div className="flex text-yellow-400">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <Star key={i} className="w-5 h-5 fill-current" />
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Enhanced Perfect For Section */}
      <div className="py-20 bg-gradient-to-br from-gray-800/50 to-slate-800/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <div className="flex items-center justify-center mb-6">
              <div className="bg-gradient-to-r from-emerald-600 to-teal-700 rounded-2xl p-4 shadow-lg animate-pulse">
                <Users className="w-10 h-10 text-white" />
              </div>
            </div>
            <h2 className="text-4xl font-bold text-white mb-4">🎯 Perfect for Everyone</h2>
            <p className="text-gray-300 text-lg max-w-2xl mx-auto">
              Whether you're a student, teacher, or lifelong learner, AI Tutor adapts to your unique needs
            </p>
          </div>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {userTypes.map((user, index) => (
              <div key={index} className="group text-center p-8 bg-gradient-to-br from-gray-700/80 to-slate-800/80 rounded-3xl hover:shadow-2xl transition-all duration-300 transform hover:scale-105 border border-gray-600/50 hover:border-indigo-500/50 backdrop-blur-sm">
                <div className={`w-20 h-20 bg-gradient-to-br ${user.gradient} rounded-2xl flex items-center justify-center mb-6 mx-auto shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:animate-bounce`}>
                  <div className="text-4xl">{user.emoji}</div>
                </div>
                <h3 className="text-xl font-bold text-white group-hover:text-indigo-300 transition-colors mb-2">{user.type}</h3>
                <p className="text-gray-400 text-sm">{user.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Enhanced CTA Section */}
      <div className="py-20 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 border-t border-blue-400/20 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-indigo-700/20 animate-pulse"></div>
        
        <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <div className="bg-white/10 backdrop-blur-lg rounded-3xl p-12 shadow-2xl border border-white/20">
            <h2 className="text-5xl font-bold text-white mb-6">🚀 Start Your Learning Journey</h2>
            <p className="text-xl text-blue-100 mb-10 max-w-3xl mx-auto">
              Join 50,000+ students already transforming their education with AI. 
              Experience personalized learning that adapts to your pace and style.
            </p>
            
            <div className="flex flex-col sm:flex-row gap-6 justify-center items-center mb-8">
              <button 
                onClick={handleGetStarted}
                className="group w-full sm:w-auto bg-white text-indigo-600 px-12 py-6 rounded-2xl text-xl font-bold hover:bg-gray-100 transition-all duration-300 shadow-2xl hover:shadow-3xl transform hover:scale-105"
              >
                <div className="flex items-center justify-center gap-3">
                  <Sparkles className="w-6 h-6 group-hover:animate-spin" />
                  Start Free Trial
                </div>
              </button>
              
              <button className="group w-full sm:w-auto bg-transparent border-2 border-white text-white px-12 py-6 rounded-2xl text-xl font-bold hover:bg-white hover:text-indigo-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105">
                <div className="flex items-center justify-center gap-3">
                  <Heart className="w-6 h-6 group-hover:animate-pulse" />
                  Join Community
                </div>
              </button>
            </div>

            <div className="text-center">
              <div className="flex justify-center items-center gap-4 text-blue-100">
                <Coffee className="w-5 h-5" />
                <span>Join our community of passionate learners</span>
                <MessageCircle className="w-5 h-5" />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Footer */}
      <div className="py-12 bg-gray-900 text-center border-t border-gray-700/50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-center mb-4">
            <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-2xl p-3 shadow-lg animate-pulse">
              <Brain className="w-8 h-8 text-white" />
            </div>
          </div>
          <p className="text-gray-400 text-xl font-semibold mb-2">
            🎓 AI Tutor - Empowering education with intelligent tools
          </p>
          <p className="text-gray-500 mb-4">
            Discover personalized educational resources powered by advanced AI technology
          </p>
          <div className="flex justify-center items-center gap-4 text-gray-400">
            <Lightbulb className="w-5 h-5" />
            <span>Built with ❤️ for learners worldwide</span>
            <Sparkles className="w-5 h-5" />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;


================================================
FILE: frontend/src/pages/NotFound.jsx
================================================
import React from 'react';

const NotFound = () => {
  return (
    <div>
      <h2>404 - Page Not Found</h2>
    </div>
  );
};

export default NotFound;



================================================
FILE: frontend/src/pages/Quiz.jsx
================================================
import React, { useState } from "react";
import { useQuiz } from "../contexts/QuizContext";
import { useNavigate } from "react-router-dom";
import { 
  ChevronLeft, 
  ChevronRight, 
  CheckCircle, 
  XCircle, 
  Trophy, 
  Brain, 
  PlayCircle,
  Award,
  Target,
  Clock,
  BookOpen,
  ArrowLeft
} from "lucide-react";

const Quiz = () => {
  const navigate = useNavigate();
  const {  
    questions,
    setQuestions,
    userAnswers,
    setUserAnswers,
    current,
    setCurrent,
    showResults,
    setShowResults, 
  } = useQuiz();

  const currentQuestion = questions[current];
  console.log(questions);
  console.log("Current Question:", currentQuestion);

  const handleAnswer = (optionKey) => {
    setUserAnswers({ ...userAnswers, [current]: optionKey });
  };

  const handleNext = () => {
    if (current < questions.length - 1) {
      setCurrent(current + 1);
    } else {
      setShowResults(true);
    }
  };

  const handlePrev = () => {
    if (current > 0) {
      setCurrent(current - 1);
    }
  };

  const isCorrect = (index) => {
    return userAnswers[index] === questions[index].correct_answer;
  };

  const calculateScore = () => {
    const correctAnswers = questions.filter((_, index) => isCorrect(index)).length;
    return {
      correct: correctAnswers,
      total: questions.length,
      percentage: Math.round((correctAnswers / questions.length) * 100)
    };
  };

  const getScoreColor = (percentage) => {
    if (percentage >= 80) return "from-green-600 to-emerald-700";
    if (percentage >= 60) return "from-yellow-600 to-orange-700";
    return "from-red-600 to-pink-700";
  };

  const getScoreIcon = (percentage) => {
    if (percentage >= 80) return Trophy;
    if (percentage >= 60) return Award;
    return Target;
  };

  const handleGoBack = () => {
    // Reset quiz state
    setShowResults(false);
    setCurrent(0);
    setUserAnswers({});
    // Navigate back to previous page
    navigate(-1);
  };

  return (
    <div className="min-h-screen p-6 overflow-x-hidden bg-gradient-to-br from-gray-800 via-slate-800 to-gray-900">
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header Section */}
        <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-3xl p-8 text-white shadow-2xl border border-blue-400/20">
          <div className="flex items-center gap-4">
            <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-4 shadow-lg">
              <Brain className="w-8 h-8 text-blue-100" />
            </div>
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
                AI Quiz Challenge
              </h1>
              <p className="text-blue-100 text-lg font-medium">
                Test your knowledge with AI-generated questions
              </p>
            </div>
          </div>
        </div>

        {!showResults ? (
          <div className="bg-gradient-to-br from-gray-800 via-slate-800 to-gray-900 rounded-3xl shadow-2xl overflow-hidden border border-gray-700/50">
            {/* Progress Bar */}
            <div className="bg-gradient-to-r from-blue-600 to-indigo-700 p-6 border-b border-gray-700/30">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center gap-3">
                  <div className="bg-white/20 backdrop-blur-lg rounded-xl p-2 shadow-lg">
                    <BookOpen className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">
                      Question {current + 1} of {questions.length}
                    </h2>
                    <p className="text-blue-100 font-medium">
                      Progress: {Math.round(((current + 1) / questions.length) * 100)}%
                    </p>
                  </div>
                </div>
                <div className="bg-white/20 backdrop-blur-lg text-white px-4 py-2 rounded-full font-bold border border-white/30">
                  {current + 1}/{questions.length}
                </div>
              </div>
              
              {/* Progress Bar */}
              <div className="w-full bg-white/20 rounded-full h-3 overflow-hidden">
                <div 
                  className="bg-gradient-to-r from-white to-blue-100 h-full rounded-full transition-all duration-500 ease-out shadow-sm"
                  style={{ width: `${((current + 1) / questions.length) * 100}%` }}
                />
              </div>
            </div>

            {/* Question Content */}
            <div className="p-8">
              <div className="mb-8">
                <h3 className="text-2xl font-bold text-gray-100 mb-6 leading-relaxed">
                  {currentQuestion.question}
                </h3>
                
                <div className="space-y-4">
                  {Object.entries(currentQuestion.options).map(([key, value]) => (
                    <button
                      key={key}
                      onClick={() => handleAnswer(key)}
                      className={`group w-full text-left p-5 rounded-2xl transition-all duration-300 transform hover:scale-102 border ${
                        userAnswers[current] === key
                          ? "bg-gradient-to-r from-blue-600 to-indigo-700 border-blue-400 text-white shadow-lg"
                          : "bg-gradient-to-r from-gray-700 to-slate-800 hover:from-gray-600 hover:to-slate-700 border-gray-600/50 hover:border-indigo-500/50 text-gray-100 hover:text-white"
                      }`}
                    >
                      <div className="flex items-center gap-4">
                        <div className={`flex-shrink-0 w-12 h-12 rounded-xl flex items-center justify-center font-bold text-lg shadow-lg ${
                          userAnswers[current] === key
                            ? "bg-white/20 backdrop-blur-lg text-white"
                            : "bg-gradient-to-br from-blue-500 to-indigo-600 text-white"
                        }`}>
                          {key.toUpperCase()}
                        </div>
                        <span className="font-medium text-lg">{value}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Navigation Buttons */}
              <div className="flex justify-between">
                <button
                  onClick={handlePrev}
                  disabled={current === 0}
                  className="group flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-gray-600 to-slate-700 hover:from-gray-500 hover:to-slate-600 text-white font-bold rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 border border-gray-500/50"
                >
                  <ChevronLeft className="w-5 h-5" />
                  Previous
                </button>
                
                <button
                  onClick={handleNext}
                  className="group flex items-center gap-3 px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 text-white font-bold rounded-2xl shadow-lg transition-all duration-300 transform hover:scale-105 border border-blue-400/30"
                >
                  {current < questions.length - 1 ? "Next" : "Submit Quiz"}
                  <ChevronRight className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-8">
            {/* Go Back Button */}
            <div className="flex justify-start">
              <button
                onClick={handleGoBack}
                className="inline-flex items-center gap-2 text-blue-100 hover:text-white hover:bg-white/15 px-6 py-3 rounded-xl transition-all duration-200 backdrop-blur-sm bg-gradient-to-r from-gray-700 to-slate-800 hover:from-gray-600 hover:to-slate-700 border border-gray-600/50 hover:border-indigo-500/50 font-medium shadow-lg"
              >
                <ArrowLeft className="w-5 h-5" />
                Go Back to Resources
              </button>
            </div>

            {/* Score Display */}
            <div className={`bg-gradient-to-r ${getScoreColor(calculateScore().percentage)} rounded-3xl p-8 text-white shadow-2xl border border-white/20`}>
              <div className="flex items-center gap-6">
                <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-4 shadow-lg">
                  {React.createElement(getScoreIcon(calculateScore().percentage), {
                    className: "w-12 h-12 text-white"
                  })}
                </div>
                <div className="flex-1">
                  <h2 className="text-4xl font-bold mb-2">Quiz Complete!</h2>
                  <p className="text-xl font-medium opacity-90">
                    You scored {calculateScore().correct} out of {calculateScore().total} questions
                  </p>
                </div>
                <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-6 text-center shadow-lg">
                  <div className="text-4xl font-bold">{calculateScore().percentage}%</div>
                  <div className="text-lg font-medium opacity-90">Score</div>
                </div>
              </div>
            </div>

            {/* Results Section */}
            <div className="bg-gradient-to-br from-gray-800 via-slate-800 to-gray-900 rounded-3xl shadow-2xl overflow-hidden border border-gray-700/50">
              <div className="bg-gradient-to-r from-purple-600 to-indigo-700 p-6 border-b border-gray-700/30">
                <div className="flex items-center gap-4">
                  <div className="bg-white/20 backdrop-blur-lg rounded-2xl p-3 shadow-lg">
                    <CheckCircle className="w-7 h-7 text-white" />
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold text-white">Detailed Results</h3>
                    <p className="text-purple-100 font-medium">
                      Review your answers and learn from explanations
                    </p>
                  </div>
                </div>
              </div>

              <div className="p-8 space-y-6">
                {questions.map((q, index) => (
                  <div key={index} className="bg-gradient-to-r from-gray-700 to-slate-800 rounded-2xl p-6 border border-gray-600/50 shadow-lg">
                    <div className="flex items-start gap-4 mb-4">
                      <div className={`flex-shrink-0 w-12 h-12 rounded-xl flex items-center justify-center font-bold text-lg shadow-lg ${
                        isCorrect(index) 
                          ? "bg-gradient-to-br from-green-500 to-emerald-600 text-white"
                          : "bg-gradient-to-br from-red-500 to-pink-600 text-white"
                      }`}>
                        {index + 1}
                      </div>
                      <div className="flex-1">
                        <h4 className="text-xl font-bold text-gray-100 mb-3">
                          {q.question}
                        </h4>
                        
                        <div className="space-y-2">
                          <div className="flex items-center gap-3">
                            {isCorrect(index) ? (
                              <CheckCircle className="w-5 h-5 text-green-400" />
                            ) : (
                              <XCircle className="w-5 h-5 text-red-400" />
                            )}
                            <span className={`font-bold ${
                              isCorrect(index) ? "text-green-300" : "text-red-300"
                            }`}>
                              Your Answer: {userAnswers[index]?.toUpperCase() || "None"}
                            </span>
                          </div>
                          
                          <div className="flex items-center gap-3">
                            <CheckCircle className="w-5 h-5 text-green-400" />
                            <span className="font-semibold text-green-300">
                              Correct Answer: {q.correct_answer.toUpperCase()}
                            </span>
                          </div>
                        </div>
                        
                        <div className="mt-4 p-4 bg-gray-800/50 rounded-xl border border-gray-600/30">
                          <p className="text-gray-300 italic font-medium">{q.explanation}</p>
                        </div>
                        
                        <div className="mt-4">
                          <a
                            href={q.youtube_url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="group inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-red-600 to-pink-700 hover:from-red-700 hover:to-pink-800 text-white font-bold rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 border border-red-400/30"
                          >
                            <PlayCircle className="w-5 h-5" />
                            <span>Watch at {q.timestamp}</span>
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Quiz;


================================================
FILE: frontend/src/utils/api.js
================================================
import axios from 'axios';
import { getFirebaseIdToken } from './firebase';
const API_BASE = import.meta.env.VITE_API_BASE;

// Create axios instance
const api = axios.create({
  baseURL: API_BASE,
  withCredentials: true,
});

// Function to get CSRF token
export const getCsrfToken = async () => {
  try {
    const response = await api.get('/csrf/');
    return response.data.csrfToken;
  } catch (error) {
    console.error('Error getting CSRF token:', error);
    throw error;
  }
};

// Utility for making authenticated requests
export const apiRequest = async (method, url, data = null) => {
  try {
    // Get CSRF token first
    const csrfToken = await getCsrfToken();
    const idToken = await getFirebaseIdToken();
    
    const config = {
      method,
      url,
      withCredentials: true,
      headers: {
        'X-CSRFToken': csrfToken,
        'Authorization': `Bearer ${idToken}`,
        'Content-Type': 'application/json',
      },
    };

    if (data) {
      config.data = data;
    }

    const response = await api(config);
    return response.data;
  } catch (error) {
    console.error('API request failed:', error);
    throw error;
  }
};


================================================
FILE: frontend/src/utils/contentScan.js
================================================
// src/utils/contentScan.js   (or wherever you keep API helpers)
import axios from "axios";
import { getCsrfToken } from "./api";      // keep if you use CSRF
import { getFirebaseIdToken } from "./firebase"; // keep if you use Firebase auth

const API_BASE = import.meta.env.VITE_API_BASE;

/* ---------- PDF ---------- */
export async function uploadPdf(file) {
  if (!file) throw new Error("No PDF file provided");
  const fd = new FormData();
  fd.append("pdf", file);

  const csrf = await getCsrfToken();
  const idToken = await getFirebaseIdToken();       // drop if not needed
  const res = await axios.post(`${API_BASE}/process-pdf/`, fd, {
    headers: {
      "Content-Type": "multipart/form-data",
      "X-CSRFToken": csrf,  
      Authorization: `Bearer ${idToken}`,               // drop if not needed
    },
    withCredentials: true,
  });
  console.log("PDF upload response:", res.data);
  
  return res.data;                         // { status: true, … }
}

/* ---------- YouTube ---------- */
export async function analyzeYoutube(url) {
  if (!url) throw new Error("No YouTube URL provided");

  const csrf = await getCsrfToken();       // drop if not needed
  const idToken = await getFirebaseIdToken(); // drop if not needed
  const res = await axios.post(
    `${API_BASE}/process-youtube/`,
    { video_url: url },
    {
      headers: {
      "Content-Type": "application/json",
      "X-CSRFToken": csrf,  
      Authorization: `Bearer ${idToken}`,               // drop if not needed
    },    // drop if not needed
      withCredentials: true,
    }
  );

  return res.data;                         // { ok: true, … }
}


export async function askPdfQuestion(pdfId, question) {
  if (!pdfId || !question?.trim()) {
    throw new Error("pdfId and question are required");
  }
  const csrf = await getCsrfToken();
  const idToken = await getFirebaseIdToken();

  /* 2️⃣  POST to /api/question-answer/ */
  const res = await axios.post(
    `${API_BASE}/answer-question/`,          // adjust path if needed
    {
      pdf_id: pdfId,
      question: question.trim(),
    },
    {
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": csrf,
        Authorization: `Bearer ${idToken}`,  // 👉 Django uses this
      },
    }
  );


  return res.data;                          
}



export async function fetchUserPDFList() {
  try {
    const idToken = await getFirebaseIdToken(); // Ensure you have a valid Firebase ID token
    const csrf = await getCsrfToken();
    if (!idToken) throw new Error("User not authenticated");


    const response = await fetch(`${API_BASE}/user/pdfs/`, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${idToken}`,
        "X-CSRFToken": csrf,  // Optional if using CSRF protection
        "Content-Type": "application/json",
      },
    });

    const data = await response.json();

    if (!response.ok || !data.status) {
      throw new Error(data.error || "Failed to fetch PDF list.");
    }

    return data.data; // Array of PDFs
  } catch (err) {
    console.error("Error fetching user PDFs:", err);
    throw err;
  }
}



export async function deletePdf(pdfId) {
  try {
    const idToken = await getFirebaseIdToken();
    const csrf = await getCsrfToken();
    if (!idToken) throw new Error("User not authenticated");

    const response = await axios.delete(`${API_BASE}/user/pdfs/${pdfId}/`, {
      headers: {
        "X-CSRFToken": csrf,  // Optional if using CSRF protection
        "Content-Type": "application/json",
        Authorization: `Bearer ${idToken}`,
      },
    });

    return {
      success: true,
      message: response.data.message,
    };
  } catch (error) {
    console.error("Delete PDF error:", error.response?.data || error.message);
    return {
      success: false,
      message: error.response?.data?.message || "Something went wrong",
      error: error.response?.data?.error || null,
    };
  }
}

export async function askYoutubeQuestion(videoId, question) {
  const token = await getFirebaseIdToken();
  const csrf = await getCsrfToken();
  if (!token) throw new Error("User not authenticated");
  const res = await axios.post(
    `${import.meta.env.VITE_API_BASE}/ask-youtube-question/`,
    { video_id: videoId, question },
    {
      headers: {
        Authorization: `Bearer ${token}`,
        "X-CSRFToken": csrf,  // Optional if using CSRF protection
        "Content-Type": "application/json",
      },
    }
  );
  return res.data;
}



export async function fetchYouTubeHistory() {
  const token = await getFirebaseIdToken();
  const csrf = await getCsrfToken();
  if (!token) throw new Error("User not authenticated");
  const res = await fetch(`${API_BASE}/user/youtube-videos/`, {
    headers: {
      Authorization: `Bearer ${token}`,
      "X-CSRFToken": csrf,  
      "Content-Type": "application/json",
    },
  });
  const json = await res.json();
  if (!json.status) throw new Error("Failed to fetch YouTube history");
  return json.data;
}


export async function deleteYoutubeVideo(videoId) {
  const token = await getFirebaseIdToken();
  const csrf = await getCsrfToken();
  if (!token) throw new Error("User not authenticated");
  const res = await fetch(`${API_BASE}/user/youtube-videos/${videoId}/`, {
    method: "DELETE",
    headers: {
      Authorization: `Bearer ${token}`,
      "X-CSRFToken": csrf, 
      "Content-Type": "application/json",
    },
  });

  const json = await res.json();
  if (!json.status) throw new Error(json.error || "Failed to delete video");
  return json;
}


export async function fetchChapterGenerationHistory() {
   // if CSRF is enabled
  const idToken = await getFirebaseIdToken();
  const csrfToken = await getCsrfToken();
  if (!idToken) throw new Error("User not authenticated");
  const res = await axios.get(`${API_BASE}/chapters/history/`, {
    withCredentials: true,
    headers: {
      Authorization: `Bearer ${idToken}`,
      "Content-Type": "application/json",
      "X-CSRFToken": csrfToken, 
    },
  });

  return res.data.data;
}


export async function deleteChapterGeneration(generationId) {
  const firebaseIdToken = await getFirebaseIdToken();
  const csrfToken = await getCsrfToken();

  const res = await fetch(`${API_BASE}/chapters/${generationId}/`, {
    method: "DELETE",
    headers: {
      "Authorization": `Bearer ${firebaseIdToken}`,
      "X-CSRFToken": csrfToken,
      "Content-Type": "application/json",
    },
    credentials: "include",
  });

  if (!res.ok) {
    const data = await res.json();
    throw new Error(data.error || "Failed to delete generation");
  }

  return await res.json();
}


export async function fetchChapterResources(generationId) {
  try {
    const idToken = await getFirebaseIdToken();
    const csrfToken = await getCsrfToken(); 
    if (!idToken) throw new Error("User not authenticated");

    const response = await axios.get(`${API_BASE}/chapters/${generationId}/resources/`, {
      headers: {
        Authorization: `Bearer ${idToken}`,
        "X-CSRFToken": csrfToken,
        "Content-Type": "application/json",
      },
    });

    return response.data.data; 
  } catch (error) {
    console.error("Error fetching chapter resources:", error);
    throw error;
  }
}



export async function generateMultiVideoMCQs(videoUrls) {
  if (!Array.isArray(videoUrls) || videoUrls.length !== 4) {
    throw new Error("You must provide exactly 4 video URLs.");
  }
  const idToken = await getFirebaseIdToken();
  const csrfToken = await getCsrfToken();
  if (!idToken) throw new Error("User not authenticated");

  try {
    const response = await axios.post(`${API_BASE}/generate-multi-mcqs/`, {
      video_urls: videoUrls,
      headers: {
        Authorization: `Bearer ${idToken}`,
        "X-CSRFToken": csrfToken,
        "Content-Type": "application/json",
      },
    });

    return response.data; // Contains { status, total_questions, questions, saved_to }
  } catch (error) {
    console.error("Failed to generate MCQs:", error.response?.data || error.message);
    throw error;
  }
}


export async function fetchPDFConversationHistory(pdfId) {
  try {
    const token = await getFirebaseIdToken();
    const csrf = await getCsrfToken();
    if (!token) throw new Error("User not authenticated");
    const response = await axios.get(`${API_BASE}/user/pdfs/${pdfId}/conversations/`, {
      headers: {
        Authorization: `Bearer ${token}`,
        "X-CSRFToken": csrf,  // Optional if using CSRF protection
        "Content-Type": "application/json",
      },
    });

    if (response.data.status) {
      return response.data.data; // returns array of conversation objects
    } else {
      throw new Error(response.data.error || "Unknown error");
    }
  } catch (err) {
    console.error("Error fetching PDF conversation history:", err);
    throw err;
  }
}


================================================
FILE: frontend/src/utils/firebase.js
================================================
// src/lib/firebase.js
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';       // 👈 add this
import { getAnalytics, isSupported } from 'firebase/analytics';

const firebaseConfig = {
  apiKey:               import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain:           import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId:            import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket:        import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId:    import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId:                import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId:        import.meta.env.VITE_FIREBASE_MEASUREMENT_ID,
};

const app  = initializeApp(firebaseConfig);

export const auth = getAuth(app);          // 🔑 Auth
export const db   = getFirestore(app);     // 🗄️ Firestore  ← NEW

// Analytics (only in browser, not SSR)
export const analytics = (await isSupported()) ? getAnalytics(app) : null;

// Inside firebase.js
export const getFirebaseIdToken = async () => {
  const user = auth.currentUser;
  if (!user) throw new Error("User not logged in");
  return await user.getIdToken();
};

export default app;



================================================
FILE: frontend/src/utils/getCurrentUserUID.js
================================================
// utils/getCurrentUserUID.js
import { getAuth, onAuthStateChanged } from "firebase/auth";

export const getCurrentUserUID = () => {
  return new Promise((resolve, reject) => {
    const auth = getAuth();

    const unsubscribe = onAuthStateChanged(
      auth,
      (user) => {
        unsubscribe(); // Stop listening after first result
        if (user) {
          resolve(user.uid);
        } else {
          reject("No user is currently signed in.");
        }
      },
      (error) => {
        reject(error);
      }
    );
  });
};



================================================
FILE: transcripts/multi_mcqs.json
================================================
[
    {
        "question": "What is the primary function of a Generative Adversarial Network (GAN)?",
        "options": {
            "a": "To classify images as real or fake.",
            "b": "To enhance the resolution of existing images.",
            "c": "To generate realistic fake images.",
            "d": "To compress image data for storage."
        },
        "correct_answer": "c",
        "timestamp": "00:00:31,160 --> 00:01:24,799",
        "seconds": 31,
        "youtube_url": "https://youtu.be/dQw4w9WgXcQ?t=31s",
        "explanation": "Explaination: The video explicitly states that GANs are used to generate fake images.  The \"generating\" part of the name highlights this core function."
    },
    {
        "question": "In a GAN, what is the role of the \"discriminator\"?",
        "options": {
            "a": "To generate new images from noise data.",
            "b": "To determine if an image is high resolution.",
            "c": "To distinguish between real and fake images.",
            "d": "To enhance the color palette of images."
        },
        "correct_answer": "c",
        "timestamp": "00:01:43,680 --> 00:02:29,800",
        "seconds": 103,
        "youtube_url": "https://youtu.be/dQw4w9WgXcQ?t=103s",
        "explanation": "Explaination: The discriminator's purpose is to differentiate between real and fake images, acting as a judge in the adversarial process."
    },
    {
        "question": "What type of machine learning is a Generative Adversarial Network (GAN), and what are its two key components?",
        "options": {
            "a": "Supervised learning; a predictor and a classifier",
            "b": "Unsupervised learning; a generator and a discriminator",
            "c": "Reinforcement learning; an actor and a critic",
            "d": "Supervised learning; a generator and a discriminator"
        },
        "correct_answer": "b",
        "timestamp": "00:00:55,877 --> 00:02:46,092",
        "seconds": 55,
        "youtube_url": "https://youtu.be/dQw4w9WgXcQ?t=55s",
        "explanation": "Explaination: The transcript explicitly states that a GAN is an example of unsupervised learning and that it consists of two submodels: a generator and a discriminator."
    },
    {
        "question": "What is the primary function of the discriminator in a GAN?",
        "options": {
            "a": "To generate fake samples from random input.",
            "b": "To update the generator's model based on prediction accuracy.",
            "c": "To distinguish between real and fake samples.",
            "d": "To provide feedback to the user on the quality of generated samples."
        },
        "correct_answer": "c",
        "timestamp": "00:00:55,877 --> 00:02:46,092",
        "seconds": 55,
        "youtube_url": "https://youtu.be/dQw4w9WgXcQ?t=55s",
        "explanation": "Explaination: The discriminator's role is clearly defined as evaluating samples and determining whether they are real or fake, generated by the generator."
    },
    {
        "question": "How does the training process of a GAN work in relation to the generator and discriminator?",
        "options": {
            "a": "Both models are simultaneously trained and updated in each iteration.",
            "b": "The generator is trained first, followed by the discriminator.",
            "c": "The discriminator is trained first, and only then the generator starts training, which involves an iterative process of creating fakes, receiving feedback and updating its model.",
            "d": "The models are trained independently and their results are combined later."
        },
        "correct_answer": "c",
        "timestamp": "00:03:14,330 --> 00:05:46,831",
        "seconds": 194,
        "youtube_url": "https://youtu.be/dQw4w9WgXcQ?t=194s",
        "explanation": "Explaination: The transcript describes a staged training process: the discriminator is trained first to recognize real samples, then the generator is introduced to create fakes and the iterative process of feedback and model updates begins."
    },
    {
        "question": "What is the core idea behind consistency regularization in the context of Generative Adversarial Networks (GANs)?",
        "options": {
            "a": "To ensure the generator produces highly diverse images.",
            "b": "To enforce consistent predictions from the discriminator on both real and augmented images.",
            "c": "To improve the stability of the generator network.",
            "d": "To reduce the computational cost of GAN training."
        },
        "correct_answer": "b",
        "timestamp": "00:00:30,240 --> 00:01:12,210",
        "seconds": 30,
        "youtube_url": "https://youtu.be/2UBJbLr_Ja0?t=30s",
        "explanation": "Explaination: The video explicitly states that consistency regularization aims to make the discriminator predict the same class label for real images and their augmented versions, thereby strengthening the training process."
    },
    {
        "question": "What is a key problem identified with the original consistency regularization (CR) GAN formulation?",
        "options": {
            "a": "The generator overfits to the training data.",
            "b": "The discriminator struggles to differentiate between real and fake images.",
            "c": "The discriminator might mistake augmentations as actual features of the target data.",
            "d": "The consistency regularization loss is computationally expensive."
        },
        "correct_answer": "c",
        "timestamp": "00:04:08,450 --> 00:04:46,370",
        "seconds": 248,
        "youtube_url": "https://youtu.be/2UBJbLr_Ja0?t=248s",
        "explanation": "Explaination: The transcript quotes the paper directly, highlighting that a major flaw in the original method was the discriminator's potential misinterpretation of augmentations as genuine data features."
    },
    {
        "question": "What are Generative Adversarial Networks (GANs)?",
        "options": {
            "a": "A type of Recurrent Neural Network used for time series data.",
            "b": "A class of deep learning architectures used to generate realistic data by learning patterns from existing datasets.",
            "c": "A type of convolutional neural network used for image classification.",
            "d": "A system for analyzing large datasets to find patterns."
        },
        "correct_answer": "b",
        "timestamp": "00:00:01,270 --> 00:01:04,720",
        "seconds": 1,
        "youtube_url": "https://youtu.be/y7sL_q8BtWQ?t=1s",
        "explanation": "Explaination: The transcript explicitly defines GANs as a class of deep learning architectures designed to generate realistic data by learning from existing datasets."
    },
    {
        "question": "What are the two main components of a GAN, and what are their respective roles?",
        "options": {
            "a": "Classifier and Regressor; one classifies data, the other predicts values.",
            "b": "Encoder and Decoder; one compresses data, the other reconstructs it.",
            "c": "Generator and Discriminator; one generates data, the other evaluates its realism.",
            "d": "Autoencoder and Variational Autoencoder; both generate data but with different approaches."
        },
        "correct_answer": "c",
        "timestamp": "00:00:46,960 --> 00:01:48,720",
        "seconds": 46,
        "youtube_url": "https://youtu.be/y7sL_q8BtWQ?t=46s",
        "explanation": "Explaination: The video clearly states that GANs consist of a generator (which creates new data) and a discriminator (which assesses the authenticity of the generated data)."
    },
    {
        "question": "How does the training process of a GAN work?",
        "options": {
            "a": "The generator and discriminator are trained sequentially, one after the other.",
            "b": "Only the discriminator is trained; the generator's output is pre-defined.",
            "c": "The generator and discriminator are trained simultaneously in a loop, competing against each other.",
            "d": "The generator is trained first, and then the discriminator is fine-tuned based on the generator's output."
        },
        "correct_answer": "c",
        "timestamp": "00:02:13,040 --> 00:03:17,280",
        "seconds": 133,
        "youtube_url": "https://youtu.be/y7sL_q8BtWQ?t=133s",
        "explanation": "Explaination: The transcript describes the training as an iterative process where both the generator and discriminator are trained concurrently, with the generator aiming to fool the discriminator and the discriminator aiming to correctly identify real and fake data."
    }
]


================================================
FILE: vectorstores/book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book/index.faiss
================================================
[Non-text file]


================================================
FILE: vectorstores/book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book/index.pkl
================================================
[Non-text file]


================================================
FILE: vectorstores/book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book1/index.faiss
================================================
[Non-text file]


================================================
FILE: vectorstores/book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book1/index.pkl
================================================
[Non-text file]


================================================
FILE: vectorstores/book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book3/index.faiss
================================================
[Non-text file]


================================================
FILE: vectorstores/book_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_book3/index.pkl
================================================
[Non-text file]


================================================
FILE: vectorstores/yt_gvpHdrU1F1ZmUy7y4TqTLHsLVMR2_H0JfZDXStKY/index.faiss
================================================
[Non-text file]


================================================
FILE: vectorstores/yt_gvpHdrU1F1ZmUy7y4TqTLHsLVMR2_H0JfZDXStKY/index.pkl
================================================
[Non-text file]


================================================
FILE: vectorstores/yt_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_H0JfZDXStKY/index.faiss
================================================
[Non-text file]


================================================
FILE: vectorstores/yt_WkSCUnxKz1ZOWKyVhJ4ANBEZPtq2_H0JfZDXStKY/index.pkl
================================================
[Non-text file]

